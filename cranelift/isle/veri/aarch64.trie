term {
	name = ty_shift_mask
	bindings = [
		0: Type	argument(0)
		1: Type	constructor(lane_type, [0], 0)
		2: u8	constructor(ty_bits, [1], 0)
		3: u64	constructor(u8_as_u64, [2], 0)
		4: u64	const_int(1, u64)
		5: u64	constructor(u64_sub, [3, 4], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/prelude.isle line 323
			constraints = [
			]
			prio = 0
			result = 5
		}
	]
}
term {
	name = is_ref_type
	bindings = [
		0: Type	argument(0)
		1: bool	const_prim(true)
		2: bool	const_prim(false)
	]
	rules = [
		{
			pos = ../../codegen/src/prelude.isle line 330
			constraints = [
				0:	const_prim(R32)
			]
			prio = 1
			result = 1
		}
		{
			pos = ../../codegen/src/prelude.isle line 331
			constraints = [
				0:	const_prim(R64)
			]
			prio = 1
			result = 1
		}
		{
			pos = ../../codegen/src/prelude.isle line 332
			constraints = [
			]
			prio = 0
			result = 2
		}
	]
}
term {
	name = output_reg
	bindings = [
		0: Reg	argument(0)
		1: ValueRegs	constructor(value_reg, [0], 1)
		2: InstOutput	constructor(output, [1], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 73
			constraints = [
			]
			prio = 0
			result = 2
			impure = [1, 2]
		}
	]
}
term {
	name = output_value
	bindings = [
		0: Value	argument(0)
		1: ValueRegs	constructor(put_in_regs, [0], 1)
		2: InstOutput	constructor(output, [1], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 77
			constraints = [
			]
			prio = 0
			result = 2
			impure = [1, 2]
		}
	]
}
term {
	name = temp_reg
	bindings = [
		0: Type	argument(0)
		1: WritableReg	constructor(temp_writable_reg, [0], 1)
		2: Reg	constructor(writable_reg_to_reg, [1], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 97
			constraints = [
			]
			prio = 0
			result = 2
			impure = [1]
		}
	]
}
term {
	name = value_regs_range
	bindings = [
		0: ValueRegs	argument(0)
		1: usize	const_int(0, usize)
		2: usize	constructor(value_regs_len, [0], 0)
		3: Range	constructor(range, [1, 2], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 146
			constraints = [
			]
			prio = 0
			result = 3
		}
	]
}
term {
	name = lo_reg
	bindings = [
		0: Value	argument(0)
		1: ValueRegs	constructor(put_in_regs, [0], 1)
		2: usize	const_int(0, usize)
		3: Reg	constructor(value_regs_get, [1, 2], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 157
			constraints = [
			]
			prio = 0
			result = 3
			impure = [1, 3]
		}
	]
}
term {
	name = multi_reg_to_pair_and_single
	bindings = [
		0: MultiReg	argument(0)
		1: Reg	match_variant(0, MultiReg::Three, a)
		2: Reg	match_variant(0, MultiReg::Three, b)
		3: Reg	match_variant(0, MultiReg::Three, c)
		4: ValueRegs	constructor(value_regs, [1, 2], 1)
		5: ValueRegs	constructor(value_reg, [3], 2)
		6: InstOutput	constructor(output_pair, [4, 5], 3)
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 168
			constraints = [
				0:	variant(MultiReg::Three)
			]
			prio = 0
			result = 6
			impure = [4, 5, 6]
		}
	]
}
term {
	name = multi_reg_to_pair
	bindings = [
		0: MultiReg	argument(0)
		1: Reg	match_variant(0, MultiReg::Two, a)
		2: Reg	match_variant(0, MultiReg::Two, b)
		3: ValueRegs	constructor(value_regs, [1, 2], 1)
		4: InstOutput	constructor(output, [3], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 173
			constraints = [
				0:	variant(MultiReg::Two)
			]
			prio = 0
			result = 4
			impure = [3, 4]
		}
	]
}
term {
	name = multi_reg_to_single
	bindings = [
		0: MultiReg	argument(0)
		1: Reg	match_variant(0, MultiReg::One, a)
		2: ValueRegs	constructor(value_reg, [1], 1)
		3: InstOutput	constructor(output, [2], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 178
			constraints = [
				0:	variant(MultiReg::One)
			]
			prio = 0
			result = 3
			impure = [2, 3]
		}
	]
}
term {
	name = emit_side_effect
	bindings = [
		0: SideEffectNoResult	argument(0)
		1: MInst	match_variant(0, SideEffectNoResult::Inst, inst)
		2: Unit	constructor(emit, [1], 1)
		3: MInst	match_variant(0, SideEffectNoResult::Inst2, inst1)
		4: MInst	match_variant(0, SideEffectNoResult::Inst2, inst2)
		5: Unit	constructor(emit, [3], 1)
		6: Unit	constructor(emit, [4], 2)
		7: MInst	match_variant(0, SideEffectNoResult::Inst3, inst1)
		8: MInst	match_variant(0, SideEffectNoResult::Inst3, inst2)
		9: MInst	match_variant(0, SideEffectNoResult::Inst3, inst3)
		10: Unit	constructor(emit, [7], 1)
		11: Unit	constructor(emit, [8], 2)
		12: Unit	constructor(emit, [9], 3)
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 367
			constraints = [
				0:	variant(SideEffectNoResult::Inst)
			]
			prio = 0
			result = 2
			impure = [2]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 369
			constraints = [
				0:	variant(SideEffectNoResult::Inst2)
			]
			prio = 0
			result = 6
			impure = [5, 6]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 372
			constraints = [
				0:	variant(SideEffectNoResult::Inst3)
			]
			prio = 0
			result = 12
			impure = [10, 11, 12]
		}
	]
}
term {
	name = side_effect
	bindings = [
		0: SideEffectNoResult	argument(0)
		1: Unit	constructor(emit_side_effect, [0], 1)
		2: InstOutput	constructor(output_none, [], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 380
			constraints = [
			]
			prio = 0
			result = 2
			impure = [1, 2]
		}
	]
}
term {
	name = side_effect_concat
	bindings = [
		0: SideEffectNoResult	argument(0)
		1: MInst	match_variant(0, SideEffectNoResult::Inst, inst)
		2: SideEffectNoResult	argument(1)
		3: MInst	match_variant(2, SideEffectNoResult::Inst, inst)
		4: SideEffectNoResult	make_variant(SideEffectNoResult::Inst2, [1, 3])
		5: MInst	match_variant(2, SideEffectNoResult::Inst2, inst1)
		6: MInst	match_variant(2, SideEffectNoResult::Inst2, inst2)
		7: SideEffectNoResult	make_variant(SideEffectNoResult::Inst3, [1, 5, 6])
		8: MInst	match_variant(0, SideEffectNoResult::Inst2, inst1)
		9: MInst	match_variant(0, SideEffectNoResult::Inst2, inst2)
		10: SideEffectNoResult	make_variant(SideEffectNoResult::Inst3, [8, 9, 3])
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 385
			constraints = [
				0:	variant(SideEffectNoResult::Inst)
				2:	variant(SideEffectNoResult::Inst)
			]
			prio = 0
			result = 4
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 387
			constraints = [
				0:	variant(SideEffectNoResult::Inst)
				2:	variant(SideEffectNoResult::Inst2)
			]
			prio = 0
			result = 7
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 389
			constraints = [
				0:	variant(SideEffectNoResult::Inst2)
				2:	variant(SideEffectNoResult::Inst)
			]
			prio = 0
			result = 10
		}
	]
}
term {
	name = produces_flags_concat
	bindings = [
		0: ProducesFlags	argument(0)
		1: MInst	match_variant(0, ProducesFlags::ProducesFlagsSideEffect, inst)
		2: ProducesFlags	argument(1)
		3: MInst	match_variant(2, ProducesFlags::ProducesFlagsSideEffect, inst)
		4: ProducesFlags	make_variant(ProducesFlags::ProducesFlagsTwiceSideEffect, [1, 3])
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 414
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsSideEffect)
				2:	variant(ProducesFlags::ProducesFlagsSideEffect)
			]
			prio = 0
			result = 4
		}
	]
}
term {
	name = produces_flags_get_reg
	bindings = [
		0: ProducesFlags	argument(0)
		1: MInst	match_variant(0, ProducesFlags::ProducesFlagsReturnsReg, inst)
		2: Reg	match_variant(0, ProducesFlags::ProducesFlagsReturnsReg, result)
		3: MInst	match_variant(0, ProducesFlags::ProducesFlagsReturnsResultWithConsumer, inst)
		4: Reg	match_variant(0, ProducesFlags::ProducesFlagsReturnsResultWithConsumer, result)
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 444
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsReg)
			]
			prio = 0
			result = 2
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 445
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsResultWithConsumer)
			]
			prio = 0
			result = 4
		}
	]
}
term {
	name = produces_flags_ignore
	bindings = [
		0: ProducesFlags	argument(0)
		1: MInst	match_variant(0, ProducesFlags::ProducesFlagsReturnsReg, inst)
		2: Reg	match_variant(0, ProducesFlags::ProducesFlagsReturnsReg, result)
		3: ProducesFlags	make_variant(ProducesFlags::ProducesFlagsSideEffect, [1])
		4: MInst	match_variant(0, ProducesFlags::ProducesFlagsReturnsResultWithConsumer, inst)
		5: Reg	match_variant(0, ProducesFlags::ProducesFlagsReturnsResultWithConsumer, result)
		6: ProducesFlags	make_variant(ProducesFlags::ProducesFlagsSideEffect, [4])
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 450
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsReg)
			]
			prio = 0
			result = 3
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 452
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsResultWithConsumer)
			]
			prio = 0
			result = 6
		}
	]
}
term {
	name = consumes_flags_concat
	bindings = [
		0: ConsumesFlags	argument(0)
		1: MInst	match_variant(0, ConsumesFlags::ConsumesFlagsReturnsReg, inst)
		2: Reg	match_variant(0, ConsumesFlags::ConsumesFlagsReturnsReg, result)
		3: ConsumesFlags	argument(1)
		4: MInst	match_variant(3, ConsumesFlags::ConsumesFlagsReturnsReg, inst)
		5: Reg	match_variant(3, ConsumesFlags::ConsumesFlagsReturnsReg, result)
		6: ValueRegs	constructor(value_regs, [2, 5], 1)
		7: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs, [1, 4, 6])
		8: MInst	match_variant(0, ConsumesFlags::ConsumesFlagsSideEffect, inst)
		9: MInst	match_variant(3, ConsumesFlags::ConsumesFlagsSideEffect, inst)
		10: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsSideEffect2, [8, 9])
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 459
			constraints = [
				0:	variant(ConsumesFlags::ConsumesFlagsReturnsReg)
				3:	variant(ConsumesFlags::ConsumesFlagsReturnsReg)
			]
			prio = 0
			result = 7
			impure = [6]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 465
			constraints = [
				0:	variant(ConsumesFlags::ConsumesFlagsSideEffect)
				3:	variant(ConsumesFlags::ConsumesFlagsSideEffect)
			]
			prio = 0
			result = 10
		}
	]
}
term {
	name = with_flags
	bindings = [
		0: ProducesFlags	argument(0)
		1: MInst	match_variant(0, ProducesFlags::ProducesFlagsReturnsResultWithConsumer, inst)
		2: Reg	match_variant(0, ProducesFlags::ProducesFlagsReturnsResultWithConsumer, result)
		3: ConsumesFlags	argument(1)
		4: MInst	match_variant(3, ConsumesFlags::ConsumesFlagsReturnsResultWithProducer, inst)
		5: Reg	match_variant(3, ConsumesFlags::ConsumesFlagsReturnsResultWithProducer, result)
		6: Unit	constructor(emit, [1], 1)
		7: Unit	constructor(emit, [4], 2)
		8: ValueRegs	constructor(value_regs, [2, 5], 3)
		9: MInst	match_variant(3, ConsumesFlags::ConsumesFlagsSideEffect, inst)
		10: Unit	constructor(emit, [9], 2)
		11: ValueRegs	constructor(value_reg, [2], 3)
		12: MInst	match_variant(0, ProducesFlags::ProducesFlagsSideEffect, inst)
		13: MInst	match_variant(3, ConsumesFlags::ConsumesFlagsReturnsReg, inst)
		14: Reg	match_variant(3, ConsumesFlags::ConsumesFlagsReturnsReg, result)
		15: Unit	constructor(emit, [12], 1)
		16: Unit	constructor(emit, [13], 2)
		17: ValueRegs	constructor(value_reg, [14], 3)
		18: MInst	match_variant(3, ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs, inst1)
		19: MInst	match_variant(3, ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs, inst2)
		20: ValueRegs	match_variant(3, ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs, result)
		21: Unit	constructor(emit, [18], 2)
		22: Unit	constructor(emit, [19], 3)
		23: MInst	match_variant(3, ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs, inst1)
		24: MInst	match_variant(3, ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs, inst2)
		25: MInst	match_variant(3, ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs, inst3)
		26: MInst	match_variant(3, ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs, inst4)
		27: ValueRegs	match_variant(3, ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs, result)
		28: Unit	constructor(emit, [23], 2)
		29: Unit	constructor(emit, [24], 3)
		30: Unit	constructor(emit, [25], 4)
		31: Unit	constructor(emit, [26], 5)
		32: MInst	match_variant(0, ProducesFlags::ProducesFlagsTwiceSideEffect, inst1)
		33: MInst	match_variant(0, ProducesFlags::ProducesFlagsTwiceSideEffect, inst2)
		34: Unit	constructor(emit, [32], 1)
		35: Unit	constructor(emit, [33], 2)
		36: Unit	constructor(emit, [13], 3)
		37: ValueRegs	constructor(value_reg, [14], 4)
		38: Unit	constructor(emit, [18], 3)
		39: Unit	constructor(emit, [19], 4)
		40: Unit	constructor(emit, [23], 3)
		41: Unit	constructor(emit, [24], 4)
		42: Unit	constructor(emit, [25], 5)
		43: Unit	constructor(emit, [26], 6)
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 482
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsResultWithConsumer)
				3:	variant(ConsumesFlags::ConsumesFlagsReturnsResultWithProducer)
			]
			prio = 0
			result = 8
			impure = [6, 7, 8]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 490
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsResultWithConsumer)
				3:	variant(ConsumesFlags::ConsumesFlagsSideEffect)
			]
			prio = 0
			result = 11
			impure = [6, 10, 11]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 496
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsSideEffect)
				3:	variant(ConsumesFlags::ConsumesFlagsReturnsReg)
			]
			prio = 0
			result = 17
			impure = [15, 16, 17]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 502
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsSideEffect)
				3:	variant(ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs)
			]
			prio = 0
			result = 20
			impure = [15, 21, 22]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 514
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsSideEffect)
				3:	variant(ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs)
			]
			prio = 0
			result = 27
			impure = [15, 28, 29, 30, 31]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 530
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsTwiceSideEffect)
				3:	variant(ConsumesFlags::ConsumesFlagsReturnsReg)
			]
			prio = 0
			result = 37
			impure = [34, 35, 36, 37]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 537
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsTwiceSideEffect)
				3:	variant(ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs)
			]
			prio = 0
			result = 20
			impure = [34, 35, 38, 39]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 550
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsTwiceSideEffect)
				3:	variant(ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs)
			]
			prio = 0
			result = 27
			impure = [34, 35, 40, 41, 42, 43]
		}
	]
}
term {
	name = with_flags_reg
	bindings = [
		0: ProducesFlags	argument(0)
		1: ConsumesFlags	argument(1)
		2: ValueRegs	constructor(with_flags, [0, 1], 1)
		3: usize	const_int(0, usize)
		4: Reg	constructor(value_regs_get, [2, 3], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 568
			constraints = [
			]
			prio = 0
			result = 4
			impure = [2, 4]
		}
	]
}
term {
	name = flags_to_producesflags
	bindings = [
		0: Value	argument(0)
		1: Unit	constructor(mark_value_used, [0], 1)
		2: ProducesFlags	make_variant(ProducesFlags::AlreadyExistingFlags, [])
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 575
			constraints = [
			]
			prio = 0
			result = 2
			impure = [1]
		}
	]
}
term {
	name = with_flags_side_effect
	bindings = [
		0: ProducesFlags	argument(0)
		1: ConsumesFlags	argument(1)
		2: MInst	match_variant(1, ConsumesFlags::ConsumesFlagsSideEffect, inst)
		3: SideEffectNoResult	make_variant(SideEffectNoResult::Inst, [2])
		4: MInst	match_variant(1, ConsumesFlags::ConsumesFlagsSideEffect2, inst1)
		5: MInst	match_variant(1, ConsumesFlags::ConsumesFlagsSideEffect2, inst2)
		6: SideEffectNoResult	make_variant(SideEffectNoResult::Inst2, [4, 5])
		7: MInst	match_variant(0, ProducesFlags::ProducesFlagsSideEffect, inst)
		8: SideEffectNoResult	make_variant(SideEffectNoResult::Inst2, [7, 2])
		9: SideEffectNoResult	make_variant(SideEffectNoResult::Inst3, [7, 4, 5])
		10: MInst	match_variant(0, ProducesFlags::ProducesFlagsTwiceSideEffect, inst1)
		11: MInst	match_variant(0, ProducesFlags::ProducesFlagsTwiceSideEffect, inst2)
		12: SideEffectNoResult	make_variant(SideEffectNoResult::Inst3, [10, 11, 2])
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 586
			constraints = [
				0:	variant(ProducesFlags::AlreadyExistingFlags)
				1:	variant(ConsumesFlags::ConsumesFlagsSideEffect)
			]
			prio = 0
			result = 3
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 591
			constraints = [
				0:	variant(ProducesFlags::AlreadyExistingFlags)
				1:	variant(ConsumesFlags::ConsumesFlagsSideEffect2)
			]
			prio = 0
			result = 6
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 596
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsSideEffect)
				1:	variant(ConsumesFlags::ConsumesFlagsSideEffect)
			]
			prio = 0
			result = 8
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 601
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsSideEffect)
				1:	variant(ConsumesFlags::ConsumesFlagsSideEffect2)
			]
			prio = 0
			result = 9
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 606
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsTwiceSideEffect)
				1:	variant(ConsumesFlags::ConsumesFlagsSideEffect)
			]
			prio = 0
			result = 12
		}
	]
}
term {
	name = with_flags_chained
	bindings = [
		0: ProducesFlags	argument(0)
		1: MInst	match_variant(0, ProducesFlags::ProducesFlagsSideEffect, inst)
		2: ConsumesAndProducesFlags	argument(1)
		3: MInst	match_variant(2, ConsumesAndProducesFlags::SideEffect, inst)
		4: ConsumesFlags	argument(2)
		5: MInst	match_variant(4, ConsumesFlags::ConsumesFlagsSideEffect, inst)
		6: Unit	constructor(emit, [1], 1)
		7: Unit	constructor(emit, [3], 2)
		8: Unit	constructor(emit, [5], 3)
		9: MultiReg	make_variant(MultiReg::Empty, [])
		10: MInst	match_variant(4, ConsumesFlags::ConsumesFlagsSideEffect2, inst1)
		11: MInst	match_variant(4, ConsumesFlags::ConsumesFlagsSideEffect2, inst2)
		12: Unit	constructor(emit, [10], 3)
		13: Unit	constructor(emit, [11], 4)
		14: MInst	match_variant(4, ConsumesFlags::ConsumesFlagsReturnsReg, inst)
		15: Reg	match_variant(4, ConsumesFlags::ConsumesFlagsReturnsReg, result)
		16: Unit	constructor(emit, [14], 3)
		17: MultiReg	make_variant(MultiReg::One, [15])
		18: MInst	match_variant(4, ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs, inst1)
		19: MInst	match_variant(4, ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs, inst2)
		20: ValueRegs	match_variant(4, ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs, result)
		21: Unit	constructor(emit, [18], 3)
		22: Unit	constructor(emit, [19], 4)
		23: usize	const_int(0, usize)
		24: Reg	constructor(value_regs_get, [20, 23], 5)
		25: usize	const_int(1, usize)
		26: Reg	constructor(value_regs_get, [20, 25], 6)
		27: MultiReg	make_variant(MultiReg::Two, [24, 26])
		28: MInst	match_variant(4, ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs, inst1)
		29: MInst	match_variant(4, ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs, inst2)
		30: MInst	match_variant(4, ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs, inst3)
		31: MInst	match_variant(4, ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs, inst4)
		32: ValueRegs	match_variant(4, ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs, result)
		33: Unit	constructor(emit, [28], 3)
		34: Unit	constructor(emit, [29], 4)
		35: Unit	constructor(emit, [30], 5)
		36: Unit	constructor(emit, [31], 6)
		37: Reg	constructor(value_regs_get, [32, 23], 7)
		38: Reg	constructor(value_regs_get, [32, 25], 8)
		39: MultiReg	make_variant(MultiReg::Two, [37, 38])
		40: MInst	match_variant(0, ProducesFlags::ProducesFlagsReturnsReg, inst)
		41: Reg	match_variant(0, ProducesFlags::ProducesFlagsReturnsReg, result)
		42: Unit	constructor(emit, [40], 1)
		43: MultiReg	make_variant(MultiReg::One, [41])
		44: MultiReg	make_variant(MultiReg::Two, [41, 15])
		45: MultiReg	make_variant(MultiReg::Three, [41, 24, 26])
		46: MultiReg	make_variant(MultiReg::Three, [41, 37, 38])
		47: MInst	match_variant(2, ConsumesAndProducesFlags::ReturnsReg, inst)
		48: Reg	match_variant(2, ConsumesAndProducesFlags::ReturnsReg, result)
		49: Unit	constructor(emit, [47], 2)
		50: MultiReg	make_variant(MultiReg::One, [48])
		51: MultiReg	make_variant(MultiReg::Two, [48, 15])
		52: MultiReg	make_variant(MultiReg::Three, [48, 24, 26])
		53: MultiReg	make_variant(MultiReg::Three, [48, 37, 38])
		54: MultiReg	make_variant(MultiReg::Two, [41, 48])
		55: MultiReg	make_variant(MultiReg::Three, [41, 48, 15])
		56: MultiReg	make_variant(MultiReg::Four, [41, 48, 24, 26])
		57: MultiReg	make_variant(MultiReg::Four, [41, 48, 37, 38])
		58: MInst	match_variant(0, ProducesFlags::ProducesFlagsReturnsResultWithConsumer, inst)
		59: Reg	match_variant(0, ProducesFlags::ProducesFlagsReturnsResultWithConsumer, result)
		60: Unit	constructor(emit, [58], 1)
		61: MultiReg	make_variant(MultiReg::Two, [59, 48])
		62: MultiReg	make_variant(MultiReg::Three, [59, 48, 15])
		63: MInst	match_variant(4, ConsumesFlags::ConsumesFlagsReturnsResultWithProducer, inst)
		64: Reg	match_variant(4, ConsumesFlags::ConsumesFlagsReturnsResultWithProducer, result)
		65: Unit	constructor(emit, [63], 3)
		66: MultiReg	make_variant(MultiReg::Three, [59, 48, 64])
		67: MultiReg	make_variant(MultiReg::Four, [59, 48, 24, 26])
		68: MultiReg	make_variant(MultiReg::Four, [59, 48, 37, 38])
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 615
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsSideEffect)
				2:	variant(ConsumesAndProducesFlags::SideEffect)
				4:	variant(ConsumesFlags::ConsumesFlagsSideEffect)
			]
			prio = 0
			result = 9
			impure = [6, 7, 8]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 623
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsSideEffect)
				2:	variant(ConsumesAndProducesFlags::SideEffect)
				4:	variant(ConsumesFlags::ConsumesFlagsSideEffect2)
			]
			prio = 0
			result = 9
			impure = [6, 7, 12, 13]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 632
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsSideEffect)
				2:	variant(ConsumesAndProducesFlags::SideEffect)
				4:	variant(ConsumesFlags::ConsumesFlagsReturnsReg)
			]
			prio = 0
			result = 17
			impure = [6, 7, 16]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 640
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsSideEffect)
				2:	variant(ConsumesAndProducesFlags::SideEffect)
				4:	variant(ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs)
			]
			prio = 0
			result = 27
			impure = [6, 7, 21, 22, 24, 26]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 649
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsSideEffect)
				2:	variant(ConsumesAndProducesFlags::SideEffect)
				4:	variant(ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs)
			]
			prio = 0
			result = 39
			impure = [6, 7, 33, 34, 35, 36, 37, 38]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 662
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsReg)
				2:	variant(ConsumesAndProducesFlags::SideEffect)
				4:	variant(ConsumesFlags::ConsumesFlagsSideEffect)
			]
			prio = 0
			result = 43
			impure = [42, 7, 8]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 670
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsReg)
				2:	variant(ConsumesAndProducesFlags::SideEffect)
				4:	variant(ConsumesFlags::ConsumesFlagsSideEffect2)
			]
			prio = 0
			result = 43
			impure = [42, 7, 12, 13]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 679
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsReg)
				2:	variant(ConsumesAndProducesFlags::SideEffect)
				4:	variant(ConsumesFlags::ConsumesFlagsReturnsReg)
			]
			prio = 0
			result = 44
			impure = [42, 7, 16]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 687
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsReg)
				2:	variant(ConsumesAndProducesFlags::SideEffect)
				4:	variant(ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs)
			]
			prio = 0
			result = 45
			impure = [42, 7, 21, 22, 24, 26]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 696
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsReg)
				2:	variant(ConsumesAndProducesFlags::SideEffect)
				4:	variant(ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs)
			]
			prio = 0
			result = 46
			impure = [42, 7, 33, 34, 35, 36, 37, 38]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 709
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsSideEffect)
				2:	variant(ConsumesAndProducesFlags::ReturnsReg)
				4:	variant(ConsumesFlags::ConsumesFlagsSideEffect)
			]
			prio = 0
			result = 50
			impure = [6, 49, 8]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 717
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsSideEffect)
				2:	variant(ConsumesAndProducesFlags::ReturnsReg)
				4:	variant(ConsumesFlags::ConsumesFlagsSideEffect2)
			]
			prio = 0
			result = 50
			impure = [6, 49, 12, 13]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 726
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsSideEffect)
				2:	variant(ConsumesAndProducesFlags::ReturnsReg)
				4:	variant(ConsumesFlags::ConsumesFlagsReturnsReg)
			]
			prio = 0
			result = 51
			impure = [6, 49, 16]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 734
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsSideEffect)
				2:	variant(ConsumesAndProducesFlags::ReturnsReg)
				4:	variant(ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs)
			]
			prio = 0
			result = 52
			impure = [6, 49, 21, 22, 24, 26]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 743
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsSideEffect)
				2:	variant(ConsumesAndProducesFlags::ReturnsReg)
				4:	variant(ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs)
			]
			prio = 0
			result = 53
			impure = [6, 49, 33, 34, 35, 36, 37, 38]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 756
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsReg)
				2:	variant(ConsumesAndProducesFlags::ReturnsReg)
				4:	variant(ConsumesFlags::ConsumesFlagsSideEffect)
			]
			prio = 0
			result = 54
			impure = [42, 49, 8]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 764
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsReg)
				2:	variant(ConsumesAndProducesFlags::ReturnsReg)
				4:	variant(ConsumesFlags::ConsumesFlagsSideEffect2)
			]
			prio = 0
			result = 54
			impure = [42, 49, 12, 13]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 773
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsReg)
				2:	variant(ConsumesAndProducesFlags::ReturnsReg)
				4:	variant(ConsumesFlags::ConsumesFlagsReturnsReg)
			]
			prio = 0
			result = 55
			impure = [42, 49, 16]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 781
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsReg)
				2:	variant(ConsumesAndProducesFlags::ReturnsReg)
				4:	variant(ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs)
			]
			prio = 0
			result = 56
			impure = [42, 49, 21, 22, 24, 26]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 790
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsReg)
				2:	variant(ConsumesAndProducesFlags::ReturnsReg)
				4:	variant(ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs)
			]
			prio = 0
			result = 57
			impure = [42, 49, 33, 34, 35, 36, 37, 38]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 802
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsResultWithConsumer)
				2:	variant(ConsumesAndProducesFlags::ReturnsReg)
				4:	variant(ConsumesFlags::ConsumesFlagsSideEffect)
			]
			prio = 0
			result = 61
			impure = [60, 49, 8]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 810
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsResultWithConsumer)
				2:	variant(ConsumesAndProducesFlags::ReturnsReg)
				4:	variant(ConsumesFlags::ConsumesFlagsSideEffect2)
			]
			prio = 0
			result = 61
			impure = [60, 49, 12, 13]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 819
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsResultWithConsumer)
				2:	variant(ConsumesAndProducesFlags::ReturnsReg)
				4:	variant(ConsumesFlags::ConsumesFlagsReturnsReg)
			]
			prio = 0
			result = 62
			impure = [60, 49, 16]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 827
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsResultWithConsumer)
				2:	variant(ConsumesAndProducesFlags::ReturnsReg)
				4:	variant(ConsumesFlags::ConsumesFlagsReturnsResultWithProducer)
			]
			prio = 0
			result = 66
			impure = [60, 49, 65]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 835
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsResultWithConsumer)
				2:	variant(ConsumesAndProducesFlags::ReturnsReg)
				4:	variant(ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs)
			]
			prio = 0
			result = 67
			impure = [60, 49, 21, 22, 24, 26]
		}
		{
			pos = ../../codegen/src/prelude_lower.isle line 844
			constraints = [
				0:	variant(ProducesFlags::ProducesFlagsReturnsResultWithConsumer)
				2:	variant(ConsumesAndProducesFlags::ReturnsReg)
				4:	variant(ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs)
			]
			prio = 0
			result = 68
			impure = [60, 49, 33, 34, 35, 36, 37, 38]
		}
	]
}
term {
	name = lower_return
	bindings = [
		0: ValueSlice	argument(0)
		1: Unit	constructor(gen_return, [0], 1)
		2: InstOutput	constructor(output_none, [], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/prelude_lower.isle line 1044
			constraints = [
			]
			prio = 0
			result = 2
			impure = [1, 2]
		}
	]
}
term {
	name = operand_size
	bindings = [
		0: Type	argument(0)
		1: Option(Type)	extractor(fits_in_32, 0)
		2: Type	match_some(1)
		3: OperandSize	make_variant(OperandSize::Size32, [])
		4: Option(Type)	extractor(fits_in_64, 0)
		5: Type	match_some(4)
		6: OperandSize	make_variant(OperandSize::Size64, [])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1226
			constraints = [
				1:	some
			]
			prio = 1
			result = 3
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1227
			constraints = [
				4:	some
			]
			prio = 0
			result = 6
		}
	]
}
term {
	name = scalar_size
	bindings = [
		0: Type	argument(0)
		1: ScalarSize	make_variant(ScalarSize::Size8, [])
		2: ScalarSize	make_variant(ScalarSize::Size16, [])
		3: ScalarSize	make_variant(ScalarSize::Size32, [])
		4: ScalarSize	make_variant(ScalarSize::Size64, [])
		5: ScalarSize	make_variant(ScalarSize::Size128, [])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1239
			constraints = [
				0:	const_prim(I8)
			]
			prio = 0
			result = 1
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1240
			constraints = [
				0:	const_prim(I16)
			]
			prio = 0
			result = 2
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1241
			constraints = [
				0:	const_prim(I32)
			]
			prio = 0
			result = 3
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1242
			constraints = [
				0:	const_prim(I64)
			]
			prio = 0
			result = 4
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1243
			constraints = [
				0:	const_prim(I128)
			]
			prio = 0
			result = 5
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1245
			constraints = [
				0:	const_prim(F32)
			]
			prio = 0
			result = 3
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1246
			constraints = [
				0:	const_prim(F64)
			]
			prio = 0
			result = 4
		}
	]
}
term {
	name = lane_size
	bindings = [
		0: Type	argument(0)
		1: Option((u32, u32))	extractor(multi_lane, 0)
		2: (u32, u32)	match_some(1)
		3: u32	match_tuple(2, 0)
		4: u32	match_tuple(2, 1)
		5: ScalarSize	make_variant(ScalarSize::Size8, [])
		6: ScalarSize	make_variant(ScalarSize::Size16, [])
		7: ScalarSize	make_variant(ScalarSize::Size32, [])
		8: ScalarSize	make_variant(ScalarSize::Size64, [])
		9: Option((u32, u32))	extractor(dynamic_lane, 0)
		10: (u32, u32)	match_some(9)
		11: u32	match_tuple(10, 0)
		12: u32	match_tuple(10, 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1250
			constraints = [
				1:	some
				3:	const_int(8)
			]
			prio = 1
			result = 5
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1251
			constraints = [
				1:	some
				3:	const_int(16)
			]
			prio = 1
			result = 6
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1252
			constraints = [
				1:	some
				3:	const_int(32)
			]
			prio = 1
			result = 7
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1253
			constraints = [
				1:	some
				3:	const_int(64)
			]
			prio = 1
			result = 8
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1254
			constraints = [
				9:	some
				11:	const_int(8)
			]
			prio = 0
			result = 5
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1255
			constraints = [
				9:	some
				11:	const_int(16)
			]
			prio = 0
			result = 6
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1256
			constraints = [
				9:	some
				11:	const_int(32)
			]
			prio = 0
			result = 7
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1257
			constraints = [
				9:	some
				11:	const_int(64)
			]
			prio = 0
			result = 8
		}
	]
}
term {
	name = vector_lane_size
	bindings = [
		0: VectorSize	argument(0)
		1: ScalarSize	make_variant(ScalarSize::Size8, [])
		2: ScalarSize	make_variant(ScalarSize::Size16, [])
		3: ScalarSize	make_variant(ScalarSize::Size32, [])
		4: ScalarSize	make_variant(ScalarSize::Size64, [])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1261
			constraints = [
				0:	variant(VectorSize::Size8x16)
			]
			prio = 0
			result = 1
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1262
			constraints = [
				0:	variant(VectorSize::Size8x8)
			]
			prio = 0
			result = 1
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1263
			constraints = [
				0:	variant(VectorSize::Size16x8)
			]
			prio = 0
			result = 2
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1264
			constraints = [
				0:	variant(VectorSize::Size16x4)
			]
			prio = 0
			result = 2
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1265
			constraints = [
				0:	variant(VectorSize::Size32x4)
			]
			prio = 0
			result = 3
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1266
			constraints = [
				0:	variant(VectorSize::Size32x2)
			]
			prio = 0
			result = 3
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1267
			constraints = [
				0:	variant(VectorSize::Size64x2)
			]
			prio = 0
			result = 4
		}
	]
}
term {
	name = vector_size
	bindings = [
		0: Type	argument(0)
		1: Option((u32, u32))	extractor(multi_lane, 0)
		2: (u32, u32)	match_some(1)
		3: u32	match_tuple(2, 0)
		4: u32	match_tuple(2, 1)
		5: VectorSize	make_variant(VectorSize::Size8x8, [])
		6: VectorSize	make_variant(VectorSize::Size8x16, [])
		7: VectorSize	make_variant(VectorSize::Size16x4, [])
		8: VectorSize	make_variant(VectorSize::Size16x8, [])
		9: VectorSize	make_variant(VectorSize::Size32x2, [])
		10: VectorSize	make_variant(VectorSize::Size32x4, [])
		11: VectorSize	make_variant(VectorSize::Size64x2, [])
		12: Option((u32, u32))	extractor(dynamic_lane, 0)
		13: (u32, u32)	match_some(12)
		14: u32	match_tuple(13, 0)
		15: u32	match_tuple(13, 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1302
			constraints = [
				1:	some
				3:	const_int(8)
				4:	const_int(8)
			]
			prio = 1
			result = 5
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1303
			constraints = [
				1:	some
				3:	const_int(8)
				4:	const_int(16)
			]
			prio = 1
			result = 6
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1304
			constraints = [
				1:	some
				3:	const_int(16)
				4:	const_int(4)
			]
			prio = 1
			result = 7
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1305
			constraints = [
				1:	some
				3:	const_int(16)
				4:	const_int(8)
			]
			prio = 1
			result = 8
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1306
			constraints = [
				1:	some
				3:	const_int(32)
				4:	const_int(2)
			]
			prio = 1
			result = 9
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1307
			constraints = [
				1:	some
				3:	const_int(32)
				4:	const_int(4)
			]
			prio = 1
			result = 10
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1308
			constraints = [
				1:	some
				3:	const_int(64)
				4:	const_int(2)
			]
			prio = 1
			result = 11
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1309
			constraints = [
				12:	some
				14:	const_int(8)
				15:	const_int(8)
			]
			prio = 0
			result = 5
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1310
			constraints = [
				12:	some
				14:	const_int(8)
				15:	const_int(16)
			]
			prio = 0
			result = 6
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1311
			constraints = [
				12:	some
				14:	const_int(16)
				15:	const_int(4)
			]
			prio = 0
			result = 7
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1312
			constraints = [
				12:	some
				14:	const_int(16)
				15:	const_int(8)
			]
			prio = 0
			result = 8
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1313
			constraints = [
				12:	some
				14:	const_int(32)
				15:	const_int(2)
			]
			prio = 0
			result = 9
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1314
			constraints = [
				12:	some
				14:	const_int(32)
				15:	const_int(4)
			]
			prio = 0
			result = 10
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1315
			constraints = [
				12:	some
				14:	const_int(64)
				15:	const_int(2)
			]
			prio = 0
			result = 11
		}
	]
}
term {
	name = imm12_from_negated_value
	bindings = [
		0: Value	argument(0)
		1: Option(Inst)	extractor(def_inst, 0)
		2: Inst	match_some(1)
		3: Option(Value)	extractor(first_result, 2)
		4: Value	match_some(3)
		5: Type	extractor(value_type, 4)
		6: InstructionData	extractor(inst_data, 2)
		7: Opcode	match_variant(6, InstructionData::UnaryImm, opcode)
		8: Imm64	match_variant(6, InstructionData::UnaryImm, imm)
		9: i64	constructor(i64_sextend_imm64, [5, 8], 0)
		10: i64	constructor(i64_neg, [9], 0)
		11: u64	constructor(i64_as_u64, [10], 0)
		12: Option(Imm12)	extractor(imm12_from_u64, 11)
		13: Imm12	match_some(12)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1810
			constraints = [
				1:	some
				3:	some
				6:	variant(InstructionData::UnaryImm)
				7:	variant(Opcode::Iconst)
				12:	some
			]
			prio = 0
			result = 13
		}
	]
}
term {
	name = value_regs_zero
	bindings = [
		0: Type	const_prim(I64)
		1: ImmExtend	make_variant(ImmExtend::Zero, [])
		2: u64	const_int(0, u64)
		3: Reg	constructor(imm, [0, 1, 2], 1)
		4: Reg	constructor(imm, [0, 1, 2], 2)
		5: ValueRegs	constructor(value_regs, [3, 4], 3)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1856
			constraints = [
			]
			prio = 0
			result = 5
			impure = [3, 4, 5]
		}
	]
}
term {
	name = mov
	bindings = [
		0: Reg	argument(0)
		1: Type	argument(1)
		2: Type	const_prim(I64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: OperandSize	constructor(operand_size, [1], 2)
		5: MInst	make_variant(MInst::Mov, [4, 3, 0])
		6: Unit	constructor(emit, [5], 3)
		7: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1864
			constraints = [
			]
			prio = 0
			result = 7
			impure = [3, 4, 6]
		}
	]
}
term {
	name = movz
	bindings = [
		0: MoveWideConst	argument(0)
		1: OperandSize	argument(1)
		2: Type	const_prim(I64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MoveWideOp	make_variant(MoveWideOp::MovZ, [])
		5: MInst	make_variant(MInst::MovWide, [4, 3, 0, 1])
		6: Unit	constructor(emit, [5], 2)
		7: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1871
			constraints = [
			]
			prio = 0
			result = 7
			impure = [3, 6]
		}
	]
}
term {
	name = movn
	bindings = [
		0: MoveWideConst	argument(0)
		1: OperandSize	argument(1)
		2: Type	const_prim(I64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MoveWideOp	make_variant(MoveWideOp::MovN, [])
		5: MInst	make_variant(MInst::MovWide, [4, 3, 0, 1])
		6: Unit	constructor(emit, [5], 2)
		7: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1878
			constraints = [
			]
			prio = 0
			result = 7
			impure = [3, 6]
		}
	]
}
term {
	name = alu_rr_imm_logic
	bindings = [
		0: ALUOp	argument(0)
		1: Type	argument(1)
		2: Reg	argument(2)
		3: ImmLogic	argument(3)
		4: Type	const_prim(I64)
		5: WritableReg	constructor(temp_writable_reg, [4], 1)
		6: OperandSize	constructor(operand_size, [1], 2)
		7: MInst	make_variant(MInst::AluRRImmLogic, [0, 6, 5, 2, 3])
		8: Unit	constructor(emit, [7], 3)
		9: Reg	constructor(writable_reg_to_reg, [5], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1885
			constraints = [
			]
			prio = 0
			result = 9
			impure = [5, 6, 8]
		}
	]
}
term {
	name = alu_rr_imm_shift
	bindings = [
		0: ALUOp	argument(0)
		1: Type	argument(1)
		2: Reg	argument(2)
		3: ImmShift	argument(3)
		4: Type	const_prim(I64)
		5: WritableReg	constructor(temp_writable_reg, [4], 1)
		6: OperandSize	constructor(operand_size, [1], 2)
		7: MInst	make_variant(MInst::AluRRImmShift, [0, 6, 5, 2, 3])
		8: Unit	constructor(emit, [7], 3)
		9: Reg	constructor(writable_reg_to_reg, [5], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1892
			constraints = [
			]
			prio = 0
			result = 9
			impure = [5, 6, 8]
		}
	]
}
term {
	name = alu_rrr
	bindings = [
		0: ALUOp	argument(0)
		1: Type	argument(1)
		2: Reg	argument(2)
		3: Reg	argument(3)
		4: Type	const_prim(I64)
		5: WritableReg	constructor(temp_writable_reg, [4], 1)
		6: OperandSize	constructor(operand_size, [1], 2)
		7: MInst	make_variant(MInst::AluRRR, [0, 6, 5, 2, 3])
		8: Unit	constructor(emit, [7], 3)
		9: Reg	constructor(writable_reg_to_reg, [5], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1899
			constraints = [
			]
			prio = 0
			result = 9
			impure = [5, 6, 8]
		}
	]
}
term {
	name = vec_rrr
	bindings = [
		0: VecALUOp	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: VectorSize	argument(3)
		4: Type	const_prim(I8X16)
		5: WritableReg	constructor(temp_writable_reg, [4], 1)
		6: MInst	make_variant(MInst::VecRRR, [0, 5, 1, 2, 3])
		7: Unit	constructor(emit, [6], 2)
		8: Reg	constructor(writable_reg_to_reg, [5], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1906
			constraints = [
			]
			prio = 0
			result = 8
			impure = [5, 7]
		}
	]
}
term {
	name = fpu_rr
	bindings = [
		0: FPUOp1	argument(0)
		1: Reg	argument(1)
		2: ScalarSize	argument(2)
		3: Type	const_prim(F64)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: MInst	make_variant(MInst::FpuRR, [0, 2, 4, 1])
		6: Unit	constructor(emit, [5], 2)
		7: Reg	constructor(writable_reg_to_reg, [4], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1913
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4, 6]
		}
	]
}
term {
	name = vec_rrr_mod
	bindings = [
		0: VecALUModOp	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Reg	argument(3)
		4: VectorSize	argument(4)
		5: Type	const_prim(I8X16)
		6: WritableReg	constructor(temp_writable_reg, [5], 1)
		7: MInst	make_variant(MInst::VecRRRMod, [0, 6, 1, 2, 3, 4])
		8: Unit	constructor(emit, [7], 2)
		9: Reg	constructor(writable_reg_to_reg, [6], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1921
			constraints = [
			]
			prio = 0
			result = 9
			impure = [6, 8]
		}
	]
}
term {
	name = vec_fmla_elem
	bindings = [
		0: VecALUModOp	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Reg	argument(3)
		4: VectorSize	argument(4)
		5: u8	argument(5)
		6: Type	const_prim(I8X16)
		7: WritableReg	constructor(temp_writable_reg, [6], 1)
		8: MInst	make_variant(MInst::VecFmlaElem, [0, 7, 1, 2, 3, 4, 5])
		9: Unit	constructor(emit, [8], 2)
		10: Reg	constructor(writable_reg_to_reg, [7], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1929
			constraints = [
			]
			prio = 0
			result = 10
			impure = [7, 9]
		}
	]
}
term {
	name = fpu_rri
	bindings = [
		0: FPUOpRI	argument(0)
		1: Reg	argument(1)
		2: Type	const_prim(F64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::FpuRRI, [0, 3, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1935
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = fpu_rri_mod
	bindings = [
		0: FPUOpRIMod	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Type	const_prim(F64)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: MInst	make_variant(MInst::FpuRRIMod, [0, 4, 1, 2])
		6: Unit	constructor(emit, [5], 2)
		7: Reg	constructor(writable_reg_to_reg, [4], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1941
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4, 6]
		}
	]
}
term {
	name = fpu_rrr
	bindings = [
		0: FPUOp2	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ScalarSize	argument(3)
		4: Type	const_prim(F64)
		5: WritableReg	constructor(temp_writable_reg, [4], 1)
		6: MInst	make_variant(MInst::FpuRRR, [0, 3, 5, 1, 2])
		7: Unit	constructor(emit, [6], 2)
		8: Reg	constructor(writable_reg_to_reg, [5], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1948
			constraints = [
			]
			prio = 0
			result = 8
			impure = [5, 7]
		}
	]
}
term {
	name = fpu_rrrr
	bindings = [
		0: FPUOp3	argument(0)
		1: ScalarSize	argument(1)
		2: Reg	argument(2)
		3: Reg	argument(3)
		4: Reg	argument(4)
		5: Type	const_prim(F64)
		6: WritableReg	constructor(temp_writable_reg, [5], 1)
		7: MInst	make_variant(MInst::FpuRRRR, [0, 1, 6, 2, 3, 4])
		8: Unit	constructor(emit, [7], 2)
		9: Reg	constructor(writable_reg_to_reg, [6], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1955
			constraints = [
			]
			prio = 0
			result = 9
			impure = [6, 8]
		}
	]
}
term {
	name = fpu_cmp
	bindings = [
		0: ScalarSize	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: MInst	make_variant(MInst::FpuCmp, [0, 1, 2])
		4: ProducesFlags	make_variant(ProducesFlags::ProducesFlagsSideEffect, [3])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1962
			constraints = [
			]
			prio = 0
			result = 4
		}
	]
}
term {
	name = vec_lanes
	bindings = [
		0: VecLanesOp	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: Type	const_prim(I8X16)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: MInst	make_variant(MInst::VecLanes, [0, 4, 1, 2])
		6: Unit	constructor(emit, [5], 2)
		7: Reg	constructor(writable_reg_to_reg, [4], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1968
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4, 6]
		}
	]
}
term {
	name = vec_shift_imm
	bindings = [
		0: VecShiftImmOp	argument(0)
		1: u8	argument(1)
		2: Reg	argument(2)
		3: VectorSize	argument(3)
		4: Type	const_prim(I8X16)
		5: WritableReg	constructor(temp_writable_reg, [4], 1)
		6: MInst	make_variant(MInst::VecShiftImm, [0, 5, 2, 3, 1])
		7: Unit	constructor(emit, [6], 2)
		8: Reg	constructor(writable_reg_to_reg, [5], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1975
			constraints = [
			]
			prio = 0
			result = 8
			impure = [5, 7]
		}
	]
}
term {
	name = vec_dup
	bindings = [
		0: Reg	argument(0)
		1: VectorSize	argument(1)
		2: Type	const_prim(I8X16)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::VecDup, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1982
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = vec_dup_from_fpu
	bindings = [
		0: Reg	argument(0)
		1: VectorSize	argument(1)
		2: u8	argument(2)
		3: Type	const_prim(I8X16)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: MInst	make_variant(MInst::VecDupFromFpu, [4, 0, 1, 2])
		6: Unit	constructor(emit, [5], 2)
		7: Reg	constructor(writable_reg_to_reg, [4], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1989
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4, 6]
		}
	]
}
term {
	name = vec_dup_imm
	bindings = [
		0: ASIMDMovModImm	argument(0)
		1: bool	argument(1)
		2: VectorSize	argument(2)
		3: Type	const_prim(I8X16)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: MInst	make_variant(MInst::VecDupImm, [4, 0, 1, 2])
		6: Unit	constructor(emit, [5], 2)
		7: Reg	constructor(writable_reg_to_reg, [4], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 1996
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4, 6]
		}
	]
}
term {
	name = alu_rr_imm12
	bindings = [
		0: ALUOp	argument(0)
		1: Type	argument(1)
		2: Reg	argument(2)
		3: Imm12	argument(3)
		4: Type	const_prim(I64)
		5: WritableReg	constructor(temp_writable_reg, [4], 1)
		6: OperandSize	constructor(operand_size, [1], 2)
		7: MInst	make_variant(MInst::AluRRImm12, [0, 6, 5, 2, 3])
		8: Unit	constructor(emit, [7], 3)
		9: Reg	constructor(writable_reg_to_reg, [5], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2003
			constraints = [
			]
			prio = 0
			result = 9
			impure = [5, 6, 8]
		}
	]
}
term {
	name = alu_rrr_shift
	bindings = [
		0: ALUOp	argument(0)
		1: Type	argument(1)
		2: Reg	argument(2)
		3: Reg	argument(3)
		4: ShiftOpAndAmt	argument(4)
		5: Type	const_prim(I64)
		6: WritableReg	constructor(temp_writable_reg, [5], 1)
		7: OperandSize	constructor(operand_size, [1], 2)
		8: MInst	make_variant(MInst::AluRRRShift, [0, 7, 6, 2, 3, 4])
		9: Unit	constructor(emit, [8], 3)
		10: Reg	constructor(writable_reg_to_reg, [6], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2010
			constraints = [
			]
			prio = 0
			result = 10
			impure = [6, 7, 9]
		}
	]
}
term {
	name = cmp_rr_shift
	bindings = [
		0: OperandSize	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: u64	argument(3)
		4: Type	const_prim(I64)
		5: Option(ShiftOpAndAmt)	constructor(lshr_from_u64, [4, 3], 0)
		6: ShiftOpAndAmt	match_some(5)
		7: ALUOp	make_variant(ALUOp::SubS, [])
		8: WritableReg	constructor(writable_zero_reg, [], 1)
		9: MInst	make_variant(MInst::AluRRRShift, [7, 0, 8, 1, 2, 6])
		10: ProducesFlags	make_variant(ProducesFlags::ProducesFlagsSideEffect, [9])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2018
			constraints = [
				5:	some
			]
			prio = 0
			result = 10
			impure = [8]
		}
	]
}
term {
	name = cmp_rr_shift_asr
	bindings = [
		0: OperandSize	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: u64	argument(3)
		4: Type	const_prim(I64)
		5: Option(ShiftOpAndAmt)	constructor(ashr_from_u64, [4, 3], 0)
		6: ShiftOpAndAmt	match_some(5)
		7: ALUOp	make_variant(ALUOp::SubS, [])
		8: WritableReg	constructor(writable_zero_reg, [], 1)
		9: MInst	make_variant(MInst::AluRRRShift, [7, 0, 8, 1, 2, 6])
		10: ProducesFlags	make_variant(ProducesFlags::ProducesFlagsSideEffect, [9])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2027
			constraints = [
				5:	some
			]
			prio = 0
			result = 10
			impure = [8]
		}
	]
}
term {
	name = alu_rrr_extend
	bindings = [
		0: ALUOp	argument(0)
		1: Type	argument(1)
		2: Reg	argument(2)
		3: Reg	argument(3)
		4: ExtendOp	argument(4)
		5: Type	const_prim(I64)
		6: WritableReg	constructor(temp_writable_reg, [5], 1)
		7: OperandSize	constructor(operand_size, [1], 2)
		8: MInst	make_variant(MInst::AluRRRExtend, [0, 7, 6, 2, 3, 4])
		9: Unit	constructor(emit, [8], 3)
		10: Reg	constructor(writable_reg_to_reg, [6], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2035
			constraints = [
			]
			prio = 0
			result = 10
			impure = [6, 7, 9]
		}
	]
}
term {
	name = alu_rr_extend_reg
	bindings = [
		0: ALUOp	argument(0)
		1: Type	argument(1)
		2: Reg	argument(2)
		3: ExtendedValue	argument(3)
		4: Reg	constructor(put_extended_in_reg, [3], 1)
		5: ExtendOp	constructor(get_extended_op, [3], 2)
		6: Reg	constructor(alu_rrr_extend, [0, 1, 2, 4, 5], 3)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2043
			constraints = [
			]
			prio = 0
			result = 6
			impure = [4, 5, 6]
		}
	]
}
term {
	name = alu_rrrr
	bindings = [
		0: ALUOp3	argument(0)
		1: Type	argument(1)
		2: Reg	argument(2)
		3: Reg	argument(3)
		4: Reg	argument(4)
		5: Type	const_prim(I64)
		6: WritableReg	constructor(temp_writable_reg, [5], 1)
		7: OperandSize	constructor(operand_size, [1], 2)
		8: MInst	make_variant(MInst::AluRRRR, [0, 7, 6, 2, 3, 4])
		9: Unit	constructor(emit, [8], 3)
		10: Reg	constructor(writable_reg_to_reg, [6], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2050
			constraints = [
			]
			prio = 0
			result = 10
			impure = [6, 7, 9]
		}
	]
}
term {
	name = alu_rrr_with_flags_paired
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	argument(3)
		4: Type	const_prim(I64)
		5: WritableReg	constructor(temp_writable_reg, [4], 1)
		6: OperandSize	constructor(operand_size, [0], 2)
		7: MInst	make_variant(MInst::AluRRR, [3, 6, 5, 1, 2])
		8: Reg	constructor(writable_reg_to_reg, [5], 0)
		9: ProducesFlags	make_variant(ProducesFlags::ProducesFlagsReturnsResultWithConsumer, [7, 8])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2057
			constraints = [
			]
			prio = 0
			result = 9
			impure = [5, 6]
		}
	]
}
term {
	name = alu_rrr_with_flags_chained
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	argument(3)
		4: Type	const_prim(I64)
		5: WritableReg	constructor(temp_writable_reg, [4], 1)
		6: OperandSize	constructor(operand_size, [0], 2)
		7: MInst	make_variant(MInst::AluRRR, [3, 6, 5, 1, 2])
		8: Reg	constructor(writable_reg_to_reg, [5], 0)
		9: ConsumesAndProducesFlags	make_variant(ConsumesAndProducesFlags::ReturnsReg, [7, 8])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2065
			constraints = [
			]
			prio = 0
			result = 9
			impure = [5, 6]
		}
	]
}
term {
	name = bit_rr
	bindings = [
		0: BitOp	argument(0)
		1: Type	argument(1)
		2: Reg	argument(2)
		3: Type	const_prim(I64)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: OperandSize	constructor(operand_size, [1], 2)
		6: MInst	make_variant(MInst::BitRR, [0, 5, 4, 2])
		7: Unit	constructor(emit, [6], 3)
		8: Reg	constructor(writable_reg_to_reg, [4], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2073
			constraints = [
			]
			prio = 0
			result = 8
			impure = [4, 5, 7]
		}
	]
}
term {
	name = add_with_flags_paired
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Type	const_prim(I64)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: ALUOp	make_variant(ALUOp::AddS, [])
		6: OperandSize	constructor(operand_size, [0], 2)
		7: MInst	make_variant(MInst::AluRRR, [5, 6, 4, 1, 2])
		8: Reg	constructor(writable_reg_to_reg, [4], 0)
		9: ProducesFlags	make_variant(ProducesFlags::ProducesFlagsReturnsResultWithConsumer, [7, 8])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2080
			constraints = [
			]
			prio = 0
			result = 9
			impure = [4, 6]
		}
	]
}
term {
	name = adc_paired
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Type	const_prim(I64)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: ALUOp	make_variant(ALUOp::Adc, [])
		6: OperandSize	constructor(operand_size, [0], 2)
		7: MInst	make_variant(MInst::AluRRR, [5, 6, 4, 1, 2])
		8: Reg	constructor(writable_reg_to_reg, [4], 0)
		9: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsReturnsResultWithProducer, [7, 8])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2088
			constraints = [
			]
			prio = 0
			result = 9
			impure = [4, 6]
		}
	]
}
term {
	name = sub_with_flags_paired
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Type	const_prim(I64)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: ALUOp	make_variant(ALUOp::SubS, [])
		6: OperandSize	constructor(operand_size, [0], 2)
		7: MInst	make_variant(MInst::AluRRR, [5, 6, 4, 1, 2])
		8: Reg	constructor(writable_reg_to_reg, [4], 0)
		9: ProducesFlags	make_variant(ProducesFlags::ProducesFlagsReturnsResultWithConsumer, [7, 8])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2096
			constraints = [
			]
			prio = 0
			result = 9
			impure = [4, 6]
		}
	]
}
term {
	name = materialize_bool_result
	bindings = [
		0: Cond	argument(0)
		1: Type	const_prim(I64)
		2: WritableReg	constructor(temp_writable_reg, [1], 1)
		3: MInst	make_variant(MInst::CSet, [2, 0])
		4: Reg	constructor(writable_reg_to_reg, [2], 0)
		5: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsReturnsReg, [3, 4])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2105
			constraints = [
			]
			prio = 0
			result = 5
			impure = [2]
		}
	]
}
term {
	name = cmn_imm
	bindings = [
		0: OperandSize	argument(0)
		1: Reg	argument(1)
		2: Imm12	argument(2)
		3: ALUOp	make_variant(ALUOp::AddS, [])
		4: WritableReg	constructor(writable_zero_reg, [], 1)
		5: MInst	make_variant(MInst::AluRRImm12, [3, 0, 4, 1, 2])
		6: ProducesFlags	make_variant(ProducesFlags::ProducesFlagsSideEffect, [5])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2112
			constraints = [
			]
			prio = 0
			result = 6
			impure = [4]
		}
	]
}
term {
	name = cmp
	bindings = [
		0: OperandSize	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	make_variant(ALUOp::SubS, [])
		4: WritableReg	constructor(writable_zero_reg, [], 1)
		5: MInst	make_variant(MInst::AluRRR, [3, 0, 4, 1, 2])
		6: ProducesFlags	make_variant(ProducesFlags::ProducesFlagsSideEffect, [5])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2118
			constraints = [
			]
			prio = 0
			result = 6
			impure = [4]
		}
	]
}
term {
	name = cmp_imm
	bindings = [
		0: OperandSize	argument(0)
		1: Reg	argument(1)
		2: Imm12	argument(2)
		3: ALUOp	make_variant(ALUOp::SubS, [])
		4: WritableReg	constructor(writable_zero_reg, [], 1)
		5: MInst	make_variant(MInst::AluRRImm12, [3, 0, 4, 1, 2])
		6: ProducesFlags	make_variant(ProducesFlags::ProducesFlagsSideEffect, [5])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2124
			constraints = [
			]
			prio = 0
			result = 6
			impure = [4]
		}
	]
}
term {
	name = cmp64_imm
	bindings = [
		0: Reg	argument(0)
		1: Imm12	argument(1)
		2: OperandSize	make_variant(OperandSize::Size64, [])
		3: ProducesFlags	constructor(cmp_imm, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2130
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = cmp_extend
	bindings = [
		0: OperandSize	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ExtendOp	argument(3)
		4: ALUOp	make_variant(ALUOp::SubS, [])
		5: WritableReg	constructor(writable_zero_reg, [], 1)
		6: MInst	make_variant(MInst::AluRRRExtend, [4, 0, 5, 1, 2, 3])
		7: ProducesFlags	make_variant(ProducesFlags::ProducesFlagsSideEffect, [6])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2134
			constraints = [
			]
			prio = 0
			result = 7
			impure = [5]
		}
	]
}
term {
	name = sbc_paired
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Type	const_prim(I64)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: ALUOp	make_variant(ALUOp::Sbc, [])
		6: OperandSize	constructor(operand_size, [0], 2)
		7: MInst	make_variant(MInst::AluRRR, [5, 6, 4, 1, 2])
		8: Reg	constructor(writable_reg_to_reg, [4], 0)
		9: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsReturnsResultWithProducer, [7, 8])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2141
			constraints = [
			]
			prio = 0
			result = 9
			impure = [4, 6]
		}
	]
}
term {
	name = vec_misc
	bindings = [
		0: VecMisc2	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: Type	const_prim(I8X16)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: MInst	make_variant(MInst::VecMisc, [0, 4, 1, 2])
		6: Unit	constructor(emit, [5], 2)
		7: Reg	constructor(writable_reg_to_reg, [4], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2149
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4, 6]
		}
	]
}
term {
	name = vec_tbl
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: Type	const_prim(I8X16)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::VecTbl, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2156
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = vec_tbl_ext
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Type	const_prim(I8X16)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: MInst	make_variant(MInst::VecTblExt, [4, 0, 1, 2])
		6: Unit	constructor(emit, [5], 2)
		7: Reg	constructor(writable_reg_to_reg, [4], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2162
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4, 6]
		}
	]
}
term {
	name = vec_tbl2
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Type	argument(3)
		4: Type	const_prim(I8X16)
		5: WritableReg	constructor(temp_writable_reg, [4], 1)
		6: MInst	make_variant(MInst::VecTbl2, [5, 0, 1, 2])
		7: Unit	constructor(emit, [6], 2)
		8: Reg	constructor(writable_reg_to_reg, [5], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2169
			constraints = [
			]
			prio = 0
			result = 8
			impure = [5, 7]
		}
	]
}
term {
	name = vec_tbl2_ext
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Reg	argument(3)
		4: Type	argument(4)
		5: Type	const_prim(I8X16)
		6: WritableReg	constructor(temp_writable_reg, [5], 1)
		7: MInst	make_variant(MInst::VecTbl2Ext, [6, 0, 1, 2, 3])
		8: Unit	constructor(emit, [7], 2)
		9: Reg	constructor(writable_reg_to_reg, [6], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2178
			constraints = [
			]
			prio = 0
			result = 9
			impure = [6, 8]
		}
	]
}
term {
	name = vec_rrr_long
	bindings = [
		0: VecRRRLongOp	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: bool	argument(3)
		4: Type	const_prim(I8X16)
		5: WritableReg	constructor(temp_writable_reg, [4], 1)
		6: MInst	make_variant(MInst::VecRRRLong, [0, 5, 1, 2, 3])
		7: Unit	constructor(emit, [6], 2)
		8: Reg	constructor(writable_reg_to_reg, [5], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2187
			constraints = [
			]
			prio = 0
			result = 8
			impure = [5, 7]
		}
	]
}
term {
	name = vec_rr_pair_long
	bindings = [
		0: VecRRPairLongOp	argument(0)
		1: Reg	argument(1)
		2: Type	const_prim(I8X16)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::VecRRPairLong, [0, 3, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2194
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = vec_rrrr_long
	bindings = [
		0: VecRRRLongModOp	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Reg	argument(3)
		4: bool	argument(4)
		5: Type	const_prim(I8X16)
		6: WritableReg	constructor(temp_writable_reg, [5], 1)
		7: MInst	make_variant(MInst::VecRRRLongMod, [0, 6, 1, 2, 3, 4])
		8: Unit	constructor(emit, [7], 2)
		9: Reg	constructor(writable_reg_to_reg, [6], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2201
			constraints = [
			]
			prio = 0
			result = 9
			impure = [6, 8]
		}
	]
}
term {
	name = vec_rr_narrow_low
	bindings = [
		0: VecRRNarrowOp	argument(0)
		1: Reg	argument(1)
		2: ScalarSize	argument(2)
		3: Type	const_prim(I8X16)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: MInst	make_variant(MInst::VecRRNarrowLow, [0, 4, 1, 2])
		6: Unit	constructor(emit, [5], 2)
		7: Reg	constructor(writable_reg_to_reg, [4], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2208
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4, 6]
		}
	]
}
term {
	name = vec_rr_narrow_high
	bindings = [
		0: VecRRNarrowOp	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ScalarSize	argument(3)
		4: Type	const_prim(I8X16)
		5: WritableReg	constructor(temp_writable_reg, [4], 1)
		6: MInst	make_variant(MInst::VecRRNarrowHigh, [0, 5, 1, 2, 3])
		7: Unit	constructor(emit, [6], 2)
		8: Reg	constructor(writable_reg_to_reg, [5], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2216
			constraints = [
			]
			prio = 0
			result = 8
			impure = [5, 7]
		}
	]
}
term {
	name = vec_rr_long
	bindings = [
		0: VecRRLongOp	argument(0)
		1: Reg	argument(1)
		2: bool	argument(2)
		3: Type	const_prim(I8X16)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: MInst	make_variant(MInst::VecRRLong, [0, 4, 1, 2])
		6: Unit	constructor(emit, [5], 2)
		7: Reg	constructor(writable_reg_to_reg, [4], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2223
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4, 6]
		}
	]
}
term {
	name = fpu_csel
	bindings = [
		0: Type	argument(0)
		1: Cond	argument(1)
		2: Reg	argument(2)
		3: Reg	argument(3)
		4: Type	const_prim(F32)
		5: WritableReg	constructor(temp_writable_reg, [4], 1)
		6: MInst	make_variant(MInst::FpuCSel32, [5, 2, 3, 1])
		7: Reg	constructor(writable_reg_to_reg, [5], 0)
		8: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsReturnsReg, [6, 7])
		9: Type	const_prim(F64)
		10: WritableReg	constructor(temp_writable_reg, [9], 1)
		11: MInst	make_variant(MInst::FpuCSel64, [10, 2, 3, 1])
		12: Reg	constructor(writable_reg_to_reg, [10], 0)
		13: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsReturnsReg, [11, 12])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2231
			constraints = [
				0:	const_prim(F32)
			]
			prio = 0
			result = 8
			impure = [5]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2237
			constraints = [
				0:	const_prim(F64)
			]
			prio = 0
			result = 13
			impure = [10]
		}
	]
}
term {
	name = vec_csel
	bindings = [
		0: Cond	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Type	const_prim(I8X16)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: MInst	make_variant(MInst::VecCSel, [4, 1, 2, 0])
		6: Reg	constructor(writable_reg_to_reg, [4], 0)
		7: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsReturnsReg, [5, 6])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2245
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4]
		}
	]
}
term {
	name = fpu_round
	bindings = [
		0: FpuRoundMode	argument(0)
		1: Reg	argument(1)
		2: Type	const_prim(F64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::FpuRound, [0, 3, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2253
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = fpu_move
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Type	const_prim(I8X16)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::FpuMove128, [3, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
		7: Option(Type)	extractor(fits_in_64, 0)
		8: Type	match_some(7)
		9: Type	const_prim(F64)
		10: WritableReg	constructor(temp_writable_reg, [9], 1)
		11: MInst	make_variant(MInst::FpuMove64, [10, 1])
		12: Unit	constructor(emit, [11], 2)
		13: Reg	constructor(writable_reg_to_reg, [10], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2260
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2264
			constraints = [
				7:	some
			]
			prio = 1
			result = 13
			impure = [10, 12]
		}
	]
}
term {
	name = mov_to_fpu
	bindings = [
		0: Reg	argument(0)
		1: ScalarSize	argument(1)
		2: Type	const_prim(I8X16)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::MovToFpu, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2271
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = fpu_move_fp_imm
	bindings = [
		0: ASIMDFPModImm	argument(0)
		1: ScalarSize	argument(1)
		2: Type	const_prim(I8X16)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::FpuMoveFPImm, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2278
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = mov_to_vec
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: u8	argument(2)
		3: VectorSize	argument(3)
		4: Type	const_prim(I8X16)
		5: WritableReg	constructor(temp_writable_reg, [4], 1)
		6: MInst	make_variant(MInst::MovToVec, [5, 0, 1, 2, 3])
		7: Unit	constructor(emit, [6], 2)
		8: Reg	constructor(writable_reg_to_reg, [5], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2285
			constraints = [
			]
			prio = 0
			result = 8
			impure = [5, 7]
		}
	]
}
term {
	name = mov_vec_elem
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: u8	argument(2)
		3: u8	argument(3)
		4: VectorSize	argument(4)
		5: Type	const_prim(I8X16)
		6: WritableReg	constructor(temp_writable_reg, [5], 1)
		7: MInst	make_variant(MInst::VecMovElement, [6, 0, 1, 2, 3, 4])
		8: Unit	constructor(emit, [7], 2)
		9: Reg	constructor(writable_reg_to_reg, [6], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2292
			constraints = [
			]
			prio = 0
			result = 9
			impure = [6, 8]
		}
	]
}
term {
	name = mov_from_vec
	bindings = [
		0: Reg	argument(0)
		1: u8	argument(1)
		2: ScalarSize	argument(2)
		3: Type	const_prim(I64)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: MInst	make_variant(MInst::MovFromVec, [4, 0, 1, 2])
		6: Unit	constructor(emit, [5], 2)
		7: Reg	constructor(writable_reg_to_reg, [4], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2299
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4, 6]
		}
	]
}
term {
	name = mov_from_vec_signed
	bindings = [
		0: Reg	argument(0)
		1: u8	argument(1)
		2: VectorSize	argument(2)
		3: OperandSize	argument(3)
		4: Type	const_prim(I64)
		5: WritableReg	constructor(temp_writable_reg, [4], 1)
		6: MInst	make_variant(MInst::MovFromVecSigned, [5, 0, 1, 2, 3])
		7: Unit	constructor(emit, [6], 2)
		8: Reg	constructor(writable_reg_to_reg, [5], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2306
			constraints = [
			]
			prio = 0
			result = 8
			impure = [5, 7]
		}
	]
}
term {
	name = fpu_move_from_vec
	bindings = [
		0: Reg	argument(0)
		1: u8	argument(1)
		2: VectorSize	argument(2)
		3: Type	const_prim(I8X16)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: MInst	make_variant(MInst::FpuMoveFromVec, [4, 0, 1, 2])
		6: Unit	constructor(emit, [5], 2)
		7: Reg	constructor(writable_reg_to_reg, [4], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2312
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4, 6]
		}
	]
}
term {
	name = extend
	bindings = [
		0: Reg	argument(0)
		1: bool	argument(1)
		2: u8	argument(2)
		3: u8	argument(3)
		4: Type	const_prim(I64)
		5: WritableReg	constructor(temp_writable_reg, [4], 1)
		6: MInst	make_variant(MInst::Extend, [5, 0, 1, 2, 3])
		7: Unit	constructor(emit, [6], 2)
		8: Reg	constructor(writable_reg_to_reg, [5], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2319
			constraints = [
			]
			prio = 0
			result = 8
			impure = [5, 7]
		}
	]
}
term {
	name = fpu_extend
	bindings = [
		0: Reg	argument(0)
		1: ScalarSize	argument(1)
		2: Type	const_prim(F32X4)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::FpuExtend, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2326
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = vec_extend
	bindings = [
		0: VecExtendOp	argument(0)
		1: Reg	argument(1)
		2: bool	argument(2)
		3: ScalarSize	argument(3)
		4: Type	const_prim(I8X16)
		5: WritableReg	constructor(temp_writable_reg, [4], 1)
		6: MInst	make_variant(MInst::VecExtend, [0, 5, 1, 2, 3])
		7: Unit	constructor(emit, [6], 2)
		8: Reg	constructor(writable_reg_to_reg, [5], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2333
			constraints = [
			]
			prio = 0
			result = 8
			impure = [5, 7]
		}
	]
}
term {
	name = vec_extract
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: u8	argument(2)
		3: Type	const_prim(I8X16)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: MInst	make_variant(MInst::VecExtract, [4, 0, 1, 2])
		6: Unit	constructor(emit, [5], 2)
		7: Reg	constructor(writable_reg_to_reg, [4], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2340
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4, 6]
		}
	]
}
term {
	name = load_acquire
	bindings = [
		0: Type	argument(0)
		1: MemFlags	argument(1)
		2: Reg	argument(2)
		3: Type	const_prim(I64)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: MInst	make_variant(MInst::LoadAcquire, [0, 4, 2, 1])
		6: Unit	constructor(emit, [5], 2)
		7: Reg	constructor(writable_reg_to_reg, [4], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2347
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4, 6]
		}
	]
}
term {
	name = store_release
	bindings = [
		0: Type	argument(0)
		1: MemFlags	argument(1)
		2: Reg	argument(2)
		3: Reg	argument(3)
		4: MInst	make_variant(MInst::StoreRelease, [0, 2, 3, 1])
		5: SideEffectNoResult	make_variant(SideEffectNoResult::Inst, [4])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2354
			constraints = [
			]
			prio = 0
			result = 5
		}
	]
}
term {
	name = tst_imm
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: ImmLogic	argument(2)
		3: ALUOp	make_variant(ALUOp::AndS, [])
		4: OperandSize	constructor(operand_size, [0], 1)
		5: WritableReg	constructor(writable_zero_reg, [], 2)
		6: MInst	make_variant(MInst::AluRRImmLogic, [3, 4, 5, 1, 2])
		7: ProducesFlags	make_variant(ProducesFlags::ProducesFlagsSideEffect, [6])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2362
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4, 5]
		}
	]
}
term {
	name = csel
	bindings = [
		0: Cond	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Type	const_prim(I64)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: MInst	make_variant(MInst::CSel, [4, 0, 1, 2])
		6: Reg	constructor(writable_reg_to_reg, [4], 0)
		7: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsReturnsReg, [5, 6])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2376
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4]
		}
	]
}
term {
	name = cset
	bindings = [
		0: Cond	argument(0)
		1: Type	const_prim(I64)
		2: WritableReg	constructor(temp_writable_reg, [1], 1)
		3: MInst	make_variant(MInst::CSet, [2, 0])
		4: Reg	constructor(writable_reg_to_reg, [2], 0)
		5: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsReturnsReg, [3, 4])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2384
			constraints = [
			]
			prio = 0
			result = 5
			impure = [2]
		}
	]
}
term {
	name = cset_paired
	bindings = [
		0: Cond	argument(0)
		1: Type	const_prim(I64)
		2: WritableReg	constructor(temp_writable_reg, [1], 1)
		3: MInst	make_variant(MInst::CSet, [2, 0])
		4: Reg	constructor(writable_reg_to_reg, [2], 0)
		5: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsReturnsResultWithProducer, [3, 4])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2391
			constraints = [
			]
			prio = 0
			result = 5
			impure = [2]
		}
	]
}
term {
	name = csetm
	bindings = [
		0: Cond	argument(0)
		1: Type	const_prim(I64)
		2: WritableReg	constructor(temp_writable_reg, [1], 1)
		3: MInst	make_variant(MInst::CSetm, [2, 0])
		4: Reg	constructor(writable_reg_to_reg, [2], 0)
		5: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsReturnsReg, [3, 4])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2397
			constraints = [
			]
			prio = 0
			result = 5
			impure = [2]
		}
	]
}
term {
	name = csneg
	bindings = [
		0: Cond	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Type	const_prim(I64)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: MInst	make_variant(MInst::CSNeg, [4, 0, 1, 2])
		6: Reg	constructor(writable_reg_to_reg, [4], 0)
		7: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsReturnsReg, [5, 6])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2407
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4]
		}
	]
}
term {
	name = ccmp
	bindings = [
		0: OperandSize	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: NZCV	argument(3)
		4: Cond	argument(4)
		5: ProducesFlags	argument(5)
		6: MInst	make_variant(MInst::CCmp, [0, 1, 2, 3, 4])
		7: ProducesFlags	make_variant(ProducesFlags::ProducesFlagsSideEffect, [6])
		8: ProducesFlags	constructor(produces_flags_concat, [5, 7], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2417
			constraints = [
			]
			prio = 0
			result = 8
			impure = [8]
		}
	]
}
term {
	name = ccmp_imm
	bindings = [
		0: OperandSize	argument(0)
		1: Reg	argument(1)
		2: UImm5	argument(2)
		3: NZCV	argument(3)
		4: Cond	argument(4)
		5: Type	const_prim(I64)
		6: WritableReg	constructor(temp_writable_reg, [5], 1)
		7: MInst	make_variant(MInst::CCmpImm, [0, 1, 2, 3, 4])
		8: MInst	make_variant(MInst::CSet, [6, 4])
		9: Reg	constructor(writable_reg_to_reg, [6], 0)
		10: ValueRegs	constructor(value_reg, [9], 2)
		11: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs, [7, 8, 10])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2422
			constraints = [
			]
			prio = 1
			result = 11
			impure = [6, 10]
		}
	]
}
term {
	name = add
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	make_variant(ALUOp::Add, [])
		4: Reg	constructor(alu_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2432
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = add_imm
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Imm12	argument(2)
		3: ALUOp	make_variant(ALUOp::Add, [])
		4: Reg	constructor(alu_rr_imm12, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2435
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = add_extend
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: ExtendedValue	argument(2)
		3: ALUOp	make_variant(ALUOp::Add, [])
		4: Reg	constructor(alu_rr_extend_reg, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2438
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = add_extend_op
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ExtendOp	argument(3)
		4: ALUOp	make_variant(ALUOp::Add, [])
		5: Reg	constructor(alu_rrr_extend, [4, 0, 1, 2, 3], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2441
			constraints = [
			]
			prio = 0
			result = 5
			impure = [5]
		}
	]
}
term {
	name = add_shift
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ShiftOpAndAmt	argument(3)
		4: ALUOp	make_variant(ALUOp::Add, [])
		5: Reg	constructor(alu_rrr_shift, [4, 0, 1, 2, 3], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2444
			constraints = [
			]
			prio = 0
			result = 5
			impure = [5]
		}
	]
}
term {
	name = add_vec
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Add, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2447
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = sub
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	make_variant(ALUOp::Sub, [])
		4: Reg	constructor(alu_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2452
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = sub_imm
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Imm12	argument(2)
		3: ALUOp	make_variant(ALUOp::Sub, [])
		4: Reg	constructor(alu_rr_imm12, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2455
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = sub_extend
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: ExtendedValue	argument(2)
		3: ALUOp	make_variant(ALUOp::Sub, [])
		4: Reg	constructor(alu_rr_extend_reg, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2458
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = sub_shift
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ShiftOpAndAmt	argument(3)
		4: ALUOp	make_variant(ALUOp::Sub, [])
		5: Reg	constructor(alu_rrr_shift, [4, 0, 1, 2, 3], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2461
			constraints = [
			]
			prio = 0
			result = 5
			impure = [5]
		}
	]
}
term {
	name = sub_vec
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Sub, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2464
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = sub_i128
	bindings = [
		0: ValueRegs	argument(0)
		1: ValueRegs	argument(1)
		2: usize	const_int(0, usize)
		3: Reg	constructor(value_regs_get, [0, 2], 1)
		4: usize	const_int(1, usize)
		5: Reg	constructor(value_regs_get, [0, 4], 2)
		6: Reg	constructor(value_regs_get, [1, 2], 3)
		7: Reg	constructor(value_regs_get, [1, 4], 4)
		8: Type	const_prim(I64)
		9: ProducesFlags	constructor(sub_with_flags_paired, [8, 3, 6], 5)
		10: ConsumesFlags	constructor(sbc_paired, [8, 5, 7], 6)
		11: ValueRegs	constructor(with_flags, [9, 10], 7)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2467
			constraints = [
			]
			prio = 0
			result = 11
			impure = [3, 5, 6, 7, 9, 10, 11]
		}
	]
}
term {
	name = madd
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Reg	argument(3)
		4: ALUOp3	make_variant(ALUOp3::MAdd, [])
		5: Reg	constructor(alu_rrrr, [4, 0, 1, 2, 3], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2487
			constraints = [
			]
			prio = 0
			result = 5
			impure = [5]
		}
	]
}
term {
	name = msub
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Reg	argument(3)
		4: ALUOp3	make_variant(ALUOp3::MSub, [])
		5: Reg	constructor(alu_rrrr, [4, 0, 1, 2, 3], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2492
			constraints = [
			]
			prio = 0
			result = 5
			impure = [5]
		}
	]
}
term {
	name = umaddl
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp3	make_variant(ALUOp3::UMAddL, [])
		4: Type	const_prim(I32)
		5: Reg	constructor(alu_rrrr, [3, 4, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2496
			constraints = [
			]
			prio = 0
			result = 5
			impure = [5]
		}
	]
}
term {
	name = smaddl
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp3	make_variant(ALUOp3::SMAddL, [])
		4: Type	const_prim(I32)
		5: Reg	constructor(alu_rrrr, [3, 4, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2500
			constraints = [
			]
			prio = 0
			result = 5
			impure = [5]
		}
	]
}
term {
	name = uqadd
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Uqadd, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2504
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = sqadd
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Sqadd, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2508
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = uqsub
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Uqsub, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2512
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = sqsub
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Sqsub, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2516
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = umulh
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	make_variant(ALUOp::UMulH, [])
		4: Reg	constructor(alu_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2520
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = smulh
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	make_variant(ALUOp::SMulH, [])
		4: Reg	constructor(alu_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2524
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = mul
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Mul, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2528
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = neg
	bindings = [
		0: Reg	argument(0)
		1: VectorSize	argument(1)
		2: VecMisc2	make_variant(VecMisc2::Neg, [])
		3: Reg	constructor(vec_misc, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2532
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = rev16
	bindings = [
		0: Reg	argument(0)
		1: VectorSize	argument(1)
		2: VecMisc2	make_variant(VecMisc2::Rev16, [])
		3: Reg	constructor(vec_misc, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2536
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = rev32
	bindings = [
		0: Reg	argument(0)
		1: VectorSize	argument(1)
		2: VecMisc2	make_variant(VecMisc2::Rev32, [])
		3: Reg	constructor(vec_misc, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2540
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = rev64
	bindings = [
		0: Reg	argument(0)
		1: VectorSize	argument(1)
		2: VecMisc2	make_variant(VecMisc2::Rev64, [])
		3: Reg	constructor(vec_misc, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2544
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = xtn
	bindings = [
		0: Reg	argument(0)
		1: ScalarSize	argument(1)
		2: VecRRNarrowOp	make_variant(VecRRNarrowOp::Xtn, [])
		3: Reg	constructor(vec_rr_narrow_low, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2548
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = fcvtn
	bindings = [
		0: Reg	argument(0)
		1: ScalarSize	argument(1)
		2: VecRRNarrowOp	make_variant(VecRRNarrowOp::Fcvtn, [])
		3: Reg	constructor(vec_rr_narrow_low, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2552
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = sqxtn
	bindings = [
		0: Reg	argument(0)
		1: ScalarSize	argument(1)
		2: VecRRNarrowOp	make_variant(VecRRNarrowOp::Sqxtn, [])
		3: Reg	constructor(vec_rr_narrow_low, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2556
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = sqxtn2
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: ScalarSize	argument(2)
		3: VecRRNarrowOp	make_variant(VecRRNarrowOp::Sqxtn, [])
		4: Reg	constructor(vec_rr_narrow_high, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2560
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = sqxtun
	bindings = [
		0: Reg	argument(0)
		1: ScalarSize	argument(1)
		2: VecRRNarrowOp	make_variant(VecRRNarrowOp::Sqxtun, [])
		3: Reg	constructor(vec_rr_narrow_low, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2564
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = sqxtun2
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: ScalarSize	argument(2)
		3: VecRRNarrowOp	make_variant(VecRRNarrowOp::Sqxtun, [])
		4: Reg	constructor(vec_rr_narrow_high, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2568
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = uqxtn
	bindings = [
		0: Reg	argument(0)
		1: ScalarSize	argument(1)
		2: VecRRNarrowOp	make_variant(VecRRNarrowOp::Uqxtn, [])
		3: Reg	constructor(vec_rr_narrow_low, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2572
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = uqxtn2
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: ScalarSize	argument(2)
		3: VecRRNarrowOp	make_variant(VecRRNarrowOp::Uqxtn, [])
		4: Reg	constructor(vec_rr_narrow_high, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2576
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = aarch64_fence
	bindings = [
		0: MInst	make_variant(MInst::Fence, [])
		1: SideEffectNoResult	make_variant(SideEffectNoResult::Inst, [0])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2580
			constraints = [
			]
			prio = 0
			result = 1
		}
	]
}
term {
	name = csdb
	bindings = [
		0: MInst	make_variant(MInst::Csdb, [])
		1: SideEffectNoResult	make_variant(SideEffectNoResult::Inst, [0])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2585
			constraints = [
			]
			prio = 0
			result = 1
		}
	]
}
term {
	name = brk
	bindings = [
		0: MInst	make_variant(MInst::Brk, [])
		1: SideEffectNoResult	make_variant(SideEffectNoResult::Inst, [0])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2590
			constraints = [
			]
			prio = 0
			result = 1
		}
	]
}
term {
	name = addp
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Addp, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2595
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = zip1
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Zip1, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2599
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = vec_abs
	bindings = [
		0: Reg	argument(0)
		1: VectorSize	argument(1)
		2: VecMisc2	make_variant(VecMisc2::Abs, [])
		3: Reg	constructor(vec_misc, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2603
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = abs
	bindings = [
		0: OperandSize	argument(0)
		1: Reg	argument(1)
		2: u8	const_int(0, u8)
		3: Imm12	constructor(u8_into_imm12, [2], 1)
		4: ProducesFlags	constructor(cmp_imm, [0, 1, 3], 2)
		5: Cond	make_variant(Cond::Gt, [])
		6: ConsumesFlags	constructor(csneg, [5, 1, 1], 3)
		7: ValueRegs	constructor(with_flags, [4, 6], 4)
		8: usize	const_int(0, usize)
		9: Reg	constructor(value_regs_get, [7, 8], 5)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2608
			constraints = [
			]
			prio = 0
			result = 9
			impure = [3, 4, 6, 7, 9]
		}
	]
}
term {
	name = addv
	bindings = [
		0: Reg	argument(0)
		1: VectorSize	argument(1)
		2: VecLanesOp	make_variant(VecLanesOp::Addv, [])
		3: Reg	constructor(vec_lanes, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2614
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = shll32
	bindings = [
		0: Reg	argument(0)
		1: bool	argument(1)
		2: VecRRLongOp	make_variant(VecRRLongOp::Shll32, [])
		3: Reg	constructor(vec_rr_long, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2618
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = saddlp8
	bindings = [
		0: Reg	argument(0)
		1: VecRRPairLongOp	make_variant(VecRRPairLongOp::Saddlp8, [])
		2: Reg	constructor(vec_rr_pair_long, [1, 0], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2623
			constraints = [
			]
			prio = 0
			result = 2
			impure = [2]
		}
	]
}
term {
	name = saddlp16
	bindings = [
		0: Reg	argument(0)
		1: VecRRPairLongOp	make_variant(VecRRPairLongOp::Saddlp16, [])
		2: Reg	constructor(vec_rr_pair_long, [1, 0], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2626
			constraints = [
			]
			prio = 0
			result = 2
			impure = [2]
		}
	]
}
term {
	name = uaddlp8
	bindings = [
		0: Reg	argument(0)
		1: VecRRPairLongOp	make_variant(VecRRPairLongOp::Uaddlp8, [])
		2: Reg	constructor(vec_rr_pair_long, [1, 0], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2629
			constraints = [
			]
			prio = 0
			result = 2
			impure = [2]
		}
	]
}
term {
	name = uaddlp16
	bindings = [
		0: Reg	argument(0)
		1: VecRRPairLongOp	make_variant(VecRRPairLongOp::Uaddlp16, [])
		2: Reg	constructor(vec_rr_pair_long, [1, 0], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2632
			constraints = [
			]
			prio = 0
			result = 2
			impure = [2]
		}
	]
}
term {
	name = umlal32
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: bool	argument(3)
		4: VecRRRLongModOp	make_variant(VecRRRLongModOp::Umlal32, [])
		5: Reg	constructor(vec_rrrr_long, [4, 0, 1, 2, 3], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2636
			constraints = [
			]
			prio = 0
			result = 5
			impure = [5]
		}
	]
}
term {
	name = smull8
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: bool	argument(2)
		3: VecRRRLongOp	make_variant(VecRRRLongOp::Smull8, [])
		4: Reg	constructor(vec_rrr_long, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2640
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = umull8
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: bool	argument(2)
		3: VecRRRLongOp	make_variant(VecRRRLongOp::Umull8, [])
		4: Reg	constructor(vec_rrr_long, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2644
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = smull16
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: bool	argument(2)
		3: VecRRRLongOp	make_variant(VecRRRLongOp::Smull16, [])
		4: Reg	constructor(vec_rrr_long, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2648
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = umull16
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: bool	argument(2)
		3: VecRRRLongOp	make_variant(VecRRRLongOp::Umull16, [])
		4: Reg	constructor(vec_rrr_long, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2652
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = smull32
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: bool	argument(2)
		3: VecRRRLongOp	make_variant(VecRRRLongOp::Smull32, [])
		4: Reg	constructor(vec_rrr_long, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2656
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = umull32
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: bool	argument(2)
		3: VecRRRLongOp	make_variant(VecRRRLongOp::Umull32, [])
		4: Reg	constructor(vec_rrr_long, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2660
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = asr
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	make_variant(ALUOp::Asr, [])
		4: Reg	constructor(alu_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2664
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = asr_imm
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: ImmShift	argument(2)
		3: ALUOp	make_variant(ALUOp::Asr, [])
		4: Reg	constructor(alu_rr_imm_shift, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2667
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = lsr
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	make_variant(ALUOp::Lsr, [])
		4: Reg	constructor(alu_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2671
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = lsr_imm
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: ImmShift	argument(2)
		3: ALUOp	make_variant(ALUOp::Lsr, [])
		4: Reg	constructor(alu_rr_imm_shift, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2674
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = lsl
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	make_variant(ALUOp::Lsl, [])
		4: Reg	constructor(alu_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2678
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = lsl_imm
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: ImmShift	argument(2)
		3: ALUOp	make_variant(ALUOp::Lsl, [])
		4: Reg	constructor(alu_rr_imm_shift, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2681
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = a64_udiv
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	make_variant(ALUOp::UDiv, [])
		4: Reg	constructor(alu_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2685
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = a64_sdiv
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	make_variant(ALUOp::SDiv, [])
		4: Reg	constructor(alu_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2689
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = not
	bindings = [
		0: Reg	argument(0)
		1: VectorSize	argument(1)
		2: VecMisc2	make_variant(VecMisc2::Not, [])
		3: Reg	constructor(vec_misc, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2693
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = orr_not
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	make_variant(ALUOp::OrrNot, [])
		4: Reg	constructor(alu_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2698
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = orr_not_shift
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ShiftOpAndAmt	argument(3)
		4: ALUOp	make_variant(ALUOp::OrrNot, [])
		5: Reg	constructor(alu_rrr_shift, [4, 0, 1, 2, 3], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2701
			constraints = [
			]
			prio = 0
			result = 5
			impure = [5]
		}
	]
}
term {
	name = orr
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	make_variant(ALUOp::Orr, [])
		4: Reg	constructor(alu_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2706
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = orr_imm
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: ImmLogic	argument(2)
		3: ALUOp	make_variant(ALUOp::Orr, [])
		4: Reg	constructor(alu_rr_imm_logic, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2709
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = orr_shift
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ShiftOpAndAmt	argument(3)
		4: ALUOp	make_variant(ALUOp::Orr, [])
		5: Reg	constructor(alu_rrr_shift, [4, 0, 1, 2, 3], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2712
			constraints = [
			]
			prio = 0
			result = 5
			impure = [5]
		}
	]
}
term {
	name = orr_vec
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Orr, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2715
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = and_reg
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	make_variant(ALUOp::And, [])
		4: Reg	constructor(alu_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2720
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = and_imm
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: ImmLogic	argument(2)
		3: ALUOp	make_variant(ALUOp::And, [])
		4: Reg	constructor(alu_rr_imm_logic, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2723
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = and_vec
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::And, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2726
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = eor
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	make_variant(ALUOp::Eor, [])
		4: Reg	constructor(alu_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2730
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = eor_vec
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Eor, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2733
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = bic
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	make_variant(ALUOp::AndNot, [])
		4: Reg	constructor(alu_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2738
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = bic_vec
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Bic, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2741
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = sshl
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Sshl, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2745
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = ushl
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Ushl, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2749
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = ushl_vec_imm
	bindings = [
		0: Reg	argument(0)
		1: u8	argument(1)
		2: VectorSize	argument(2)
		3: VecShiftImmOp	make_variant(VecShiftImmOp::Shl, [])
		4: Reg	constructor(vec_shift_imm, [3, 1, 0, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2753
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = ushr_vec_imm
	bindings = [
		0: Reg	argument(0)
		1: u8	argument(1)
		2: VectorSize	argument(2)
		3: VecShiftImmOp	make_variant(VecShiftImmOp::Ushr, [])
		4: Reg	constructor(vec_shift_imm, [3, 1, 0, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2757
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = sshr_vec_imm
	bindings = [
		0: Reg	argument(0)
		1: u8	argument(1)
		2: VectorSize	argument(2)
		3: VecShiftImmOp	make_variant(VecShiftImmOp::Sshr, [])
		4: Reg	constructor(vec_shift_imm, [3, 1, 0, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2761
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = a64_rotr
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	make_variant(ALUOp::RotR, [])
		4: Reg	constructor(alu_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2766
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = a64_rotr_imm
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: ImmShift	argument(2)
		3: ALUOp	make_variant(ALUOp::RotR, [])
		4: Reg	constructor(alu_rr_imm_shift, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2769
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = rbit
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: BitOp	make_variant(BitOp::RBit, [])
		3: Reg	constructor(bit_rr, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2774
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = a64_clz
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: BitOp	make_variant(BitOp::Clz, [])
		3: Reg	constructor(bit_rr, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2779
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = a64_cls
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: BitOp	make_variant(BitOp::Cls, [])
		3: Reg	constructor(bit_rr, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2784
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = a64_rev16
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: BitOp	make_variant(BitOp::Rev16, [])
		3: Reg	constructor(bit_rr, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2789
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = a64_rev32
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: BitOp	make_variant(BitOp::Rev32, [])
		3: Reg	constructor(bit_rr, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2792
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = a64_rev64
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: BitOp	make_variant(BitOp::Rev64, [])
		3: Reg	constructor(bit_rr, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2795
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = eon
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	make_variant(ALUOp::EorNot, [])
		4: Reg	constructor(alu_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2800
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = vec_cnt
	bindings = [
		0: Reg	argument(0)
		1: VectorSize	argument(1)
		2: VecMisc2	make_variant(VecMisc2::Cnt, [])
		3: Reg	constructor(vec_misc, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2805
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = bsl
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Reg	argument(3)
		4: VecALUModOp	make_variant(VecALUModOp::Bsl, [])
		5: VectorSize	constructor(vector_size, [0], 1)
		6: Reg	constructor(vec_rrr_mod, [4, 1, 2, 3, 5], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2810
			constraints = [
			]
			prio = 0
			result = 6
			impure = [5, 6]
		}
	]
}
term {
	name = udf
	bindings = [
		0: TrapCode	argument(0)
		1: MInst	make_variant(MInst::Udf, [0])
		2: SideEffectNoResult	make_variant(SideEffectNoResult::Inst, [1])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2816
			constraints = [
			]
			prio = 0
			result = 2
		}
	]
}
term {
	name = aarch64_uload8
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Type	const_prim(I64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::ULoad8, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2822
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = aarch64_sload8
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Type	const_prim(I64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::SLoad8, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2827
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = aarch64_uload16
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Type	const_prim(I64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::ULoad16, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2832
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = aarch64_sload16
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Type	const_prim(I64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::SLoad16, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2837
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = aarch64_uload32
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Type	const_prim(I64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::ULoad32, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2842
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = aarch64_sload32
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Type	const_prim(I64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::SLoad32, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2847
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = aarch64_uload64
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Type	const_prim(I64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::ULoad64, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2852
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = aarch64_fpuload32
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Type	const_prim(F64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::FpuLoad32, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2857
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = aarch64_fpuload64
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Type	const_prim(F64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::FpuLoad64, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2862
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = aarch64_fpuload128
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Type	const_prim(F64X2)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::FpuLoad128, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2867
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = aarch64_loadp64
	bindings = [
		0: PairAMode	argument(0)
		1: MemFlags	argument(1)
		2: Type	const_prim(I64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: WritableReg	constructor(temp_writable_reg, [2], 2)
		5: MInst	make_variant(MInst::LoadP64, [3, 4, 0, 1])
		6: Unit	constructor(emit, [5], 3)
		7: Reg	constructor(writable_reg_to_reg, [3], 0)
		8: Reg	constructor(writable_reg_to_reg, [4], 0)
		9: ValueRegs	constructor(value_regs, [7, 8], 4)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2872
			constraints = [
			]
			prio = 0
			result = 9
			impure = [3, 4, 6, 9]
		}
	]
}
term {
	name = aarch64_store8
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Reg	argument(2)
		3: MInst	make_variant(MInst::Store8, [2, 0, 1])
		4: SideEffectNoResult	make_variant(SideEffectNoResult::Inst, [3])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2881
			constraints = [
			]
			prio = 0
			result = 4
		}
	]
}
term {
	name = aarch64_store16
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Reg	argument(2)
		3: MInst	make_variant(MInst::Store16, [2, 0, 1])
		4: SideEffectNoResult	make_variant(SideEffectNoResult::Inst, [3])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2884
			constraints = [
			]
			prio = 0
			result = 4
		}
	]
}
term {
	name = aarch64_store32
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Reg	argument(2)
		3: MInst	make_variant(MInst::Store32, [2, 0, 1])
		4: SideEffectNoResult	make_variant(SideEffectNoResult::Inst, [3])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2887
			constraints = [
			]
			prio = 0
			result = 4
		}
	]
}
term {
	name = aarch64_store64
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Reg	argument(2)
		3: MInst	make_variant(MInst::Store64, [2, 0, 1])
		4: SideEffectNoResult	make_variant(SideEffectNoResult::Inst, [3])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2890
			constraints = [
			]
			prio = 0
			result = 4
		}
	]
}
term {
	name = aarch64_fpustore32
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Reg	argument(2)
		3: MInst	make_variant(MInst::FpuStore32, [2, 0, 1])
		4: SideEffectNoResult	make_variant(SideEffectNoResult::Inst, [3])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2893
			constraints = [
			]
			prio = 0
			result = 4
		}
	]
}
term {
	name = aarch64_fpustore64
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Reg	argument(2)
		3: MInst	make_variant(MInst::FpuStore64, [2, 0, 1])
		4: SideEffectNoResult	make_variant(SideEffectNoResult::Inst, [3])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2896
			constraints = [
			]
			prio = 0
			result = 4
		}
	]
}
term {
	name = aarch64_fpustore128
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Reg	argument(2)
		3: MInst	make_variant(MInst::FpuStore128, [2, 0, 1])
		4: SideEffectNoResult	make_variant(SideEffectNoResult::Inst, [3])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2899
			constraints = [
			]
			prio = 0
			result = 4
		}
	]
}
term {
	name = aarch64_storep64
	bindings = [
		0: PairAMode	argument(0)
		1: MemFlags	argument(1)
		2: Reg	argument(2)
		3: Reg	argument(3)
		4: MInst	make_variant(MInst::StoreP64, [2, 3, 0, 1])
		5: SideEffectNoResult	make_variant(SideEffectNoResult::Inst, [4])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2902
			constraints = [
			]
			prio = 0
			result = 5
		}
	]
}
term {
	name = trap_if
	bindings = [
		0: ProducesFlags	argument(0)
		1: TrapCode	argument(1)
		2: Cond	argument(2)
		3: CondBrKind	constructor(cond_br_cond, [2], 1)
		4: MInst	make_variant(MInst::TrapIf, [3, 1])
		5: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsSideEffect, [4])
		6: SideEffectNoResult	constructor(with_flags_side_effect, [0, 5], 2)
		7: InstOutput	constructor(side_effect, [6], 3)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2908
			constraints = [
			]
			prio = 0
			result = 7
			impure = [3, 6, 7]
		}
	]
}
term {
	name = imm
	bindings = [
		0: Type	argument(0)
		1: Option(Type)	extractor(integral_ty, 0)
		2: Type	match_some(1)
		3: ImmExtend	argument(1)
		4: u64	argument(2)
		5: Option(MoveWideConst)	constructor(move_wide_const_from_u64, [2, 4], 0)
		6: MoveWideConst	match_some(5)
		7: OperandSize	constructor(operand_size, [2], 1)
		8: Reg	constructor(movz, [6, 7], 2)
		9: u16	const_int(64, u16)
		10: Reg	constructor(add_range_fact, [8, 9, 4, 4], 3)
		11: Option(Type)	extractor(ty_32_or_64, 2)
		12: Type	match_some(11)
		13: Option(MoveWideConst)	constructor(move_wide_const_from_inverted_u64, [12, 4], 0)
		14: MoveWideConst	match_some(13)
		15: OperandSize	constructor(operand_size, [12], 1)
		16: Reg	constructor(movn, [14, 15], 2)
		17: Reg	constructor(add_range_fact, [16, 9, 4, 4], 3)
		18: Option(ImmLogic)	constructor(imm_logic_from_u64, [2, 4], 0)
		19: ImmLogic	match_some(18)
		20: Option(u16)	constructor(imm_size_from_type, [2], 0)
		21: u16	match_some(20)
		22: Reg	constructor(zero_reg, [], 1)
		23: Reg	constructor(orr_imm, [2, 22, 19], 2)
		24: Reg	constructor(add_range_fact, [23, 21, 4, 4], 3)
		25: Reg	constructor(load_constant64_full, [2, 3, 4], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2936
			constraints = [
				1:	some
				3:	variant(ImmExtend::Zero)
				5:	some
			]
			prio = 3
			result = 10
			impure = [7, 8, 10]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2941
			constraints = [
				1:	some
				3:	variant(ImmExtend::Zero)
				11:	some
				13:	some
			]
			prio = 2
			result = 17
			impure = [15, 16, 17]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2949
			constraints = [
				1:	some
				3:	variant(ImmExtend::Zero)
				18:	some
				20:	some
			]
			prio = 1
			result = 24
			impure = [22, 23, 24]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2960
			constraints = [
				1:	some
			]
			prio = 0
			result = 25
			impure = [25]
		}
	]
}
term {
	name = put_in_reg_sext32
	bindings = [
		0: Value	argument(0)
		1: Type	extractor(value_type, 0)
		2: Option(Type)	extractor(fits_in_32, 1)
		3: Type	match_some(2)
		4: Reg	constructor(put_in_reg, [0], 1)
		5: bool	const_prim(true)
		6: u8	constructor(ty_bits, [3], 0)
		7: u8	const_int(32, u8)
		8: Reg	constructor(extend, [4, 5, 6, 7], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2967
			constraints = [
				2:	some
			]
			prio = -1
			result = 8
			impure = [4, 8]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2971
			constraints = [
				1:	const_prim(I32)
			]
			prio = 0
			result = 4
			impure = [4]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2972
			constraints = [
				1:	const_prim(I64)
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = put_in_reg_zext32
	bindings = [
		0: Value	argument(0)
		1: Type	extractor(value_type, 0)
		2: Option(Type)	extractor(fits_in_32, 1)
		3: Type	match_some(2)
		4: Reg	constructor(put_in_reg, [0], 1)
		5: bool	const_prim(false)
		6: u8	constructor(ty_bits, [3], 0)
		7: u8	const_int(32, u8)
		8: Reg	constructor(extend, [4, 5, 6, 7], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2976
			constraints = [
				2:	some
			]
			prio = -1
			result = 8
			impure = [4, 8]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2980
			constraints = [
				1:	const_prim(I32)
			]
			prio = 0
			result = 4
			impure = [4]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2981
			constraints = [
				1:	const_prim(I64)
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = put_in_reg_sext64
	bindings = [
		0: Value	argument(0)
		1: Type	extractor(value_type, 0)
		2: Option(Type)	extractor(fits_in_32, 1)
		3: Type	match_some(2)
		4: Reg	constructor(put_in_reg, [0], 1)
		5: bool	const_prim(true)
		6: u8	constructor(ty_bits, [3], 0)
		7: u8	const_int(64, u8)
		8: Reg	constructor(extend, [4, 5, 6, 7], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2985
			constraints = [
				2:	some
			]
			prio = 1
			result = 8
			impure = [4, 8]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2989
			constraints = [
				1:	const_prim(I64)
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = put_in_reg_zext64
	bindings = [
		0: Value	argument(0)
		1: Type	extractor(value_type, 0)
		2: Option(Type)	extractor(fits_in_32, 1)
		3: Type	match_some(2)
		4: Reg	constructor(put_in_reg, [0], 1)
		5: bool	const_prim(false)
		6: u8	constructor(ty_bits, [3], 0)
		7: u8	const_int(64, u8)
		8: Reg	constructor(extend, [4, 5, 6, 7], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2993
			constraints = [
				2:	some
			]
			prio = 1
			result = 8
			impure = [4, 8]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 2997
			constraints = [
				1:	const_prim(I64)
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = trap_if_zero_divisor
	bindings = [
		0: Reg	argument(0)
		1: CondBrKind	constructor(cond_br_zero, [0], 1)
		2: TrapCode	constructor(trap_code_division_by_zero, [], 0)
		3: MInst	make_variant(MInst::TrapIf, [1, 2])
		4: Unit	constructor(emit, [3], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3002
			constraints = [
			]
			prio = 0
			result = 0
			impure = [1, 4]
		}
	]
}
term {
	name = size_from_ty
	bindings = [
		0: Type	argument(0)
		1: Option(Type)	extractor(fits_in_32, 0)
		2: Type	match_some(1)
		3: OperandSize	make_variant(OperandSize::Size32, [])
		4: OperandSize	make_variant(OperandSize::Size64, [])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3007
			constraints = [
				1:	some
			]
			prio = 1
			result = 3
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3008
			constraints = [
				0:	const_prim(I64)
			]
			prio = 0
			result = 4
		}
	]
}
term {
	name = trap_if_div_overflow
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ALUOp	make_variant(ALUOp::AddS, [])
		4: OperandSize	constructor(operand_size, [0], 1)
		5: WritableReg	constructor(writable_zero_reg, [], 2)
		6: u8	const_int(1, u8)
		7: Imm12	constructor(u8_into_imm12, [6], 3)
		8: MInst	make_variant(MInst::AluRRImm12, [3, 4, 5, 2, 7])
		9: Unit	constructor(emit, [8], 4)
		10: OperandSize	constructor(size_from_ty, [0], 5)
		11: UImm5	constructor(u8_into_uimm5, [6], 6)
		12: bool	const_prim(false)
		13: NZCV	constructor(nzcv, [12, 12, 12, 12], 7)
		14: Cond	make_variant(Cond::Eq, [])
		15: MInst	make_variant(MInst::CCmpImm, [10, 1, 11, 13, 14])
		16: Unit	constructor(emit, [15], 8)
		17: Cond	make_variant(Cond::Vs, [])
		18: CondBrKind	constructor(cond_br_cond, [17], 9)
		19: TrapCode	constructor(trap_code_integer_overflow, [], 0)
		20: MInst	make_variant(MInst::TrapIf, [18, 19])
		21: Unit	constructor(emit, [20], 10)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3014
			constraints = [
			]
			prio = 0
			result = 1
			impure = [4, 5, 7, 9, 10, 11, 13, 16, 18, 21]
		}
	]
}
term {
	name = trap_if_overflow
	bindings = [
		0: ProducesFlags	argument(0)
		1: TrapCode	argument(1)
		2: Cond	make_variant(Cond::Hs, [])
		3: CondBrKind	constructor(cond_br_cond, [2], 1)
		4: MInst	make_variant(MInst::TrapIf, [3, 1])
		5: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsSideEffect, [4])
		6: Reg	constructor(with_flags_reg, [0, 5], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3033
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 6]
		}
	]
}
term {
	name = sink_atomic_load
	bindings = [
		0: Inst	argument(0)
		1: InstructionData	extractor(inst_data, 0)
		2: Opcode	match_variant(1, InstructionData::LoadNoOffset, opcode)
		3: Value	match_variant(1, InstructionData::LoadNoOffset, arg)
		4: MemFlags	match_variant(1, InstructionData::LoadNoOffset, flags)
		5: Unit	constructor(sink_inst, [0], 1)
		6: Reg	constructor(put_in_reg, [3], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3040
			constraints = [
				1:	variant(InstructionData::LoadNoOffset)
				2:	variant(Opcode::AtomicLoad)
			]
			prio = 0
			result = 6
			impure = [5, 6]
		}
	]
}
term {
	name = alu_rs_imm_logic_commutative
	bindings = [
		0: ALUOp	argument(0)
		1: Type	argument(1)
		2: Value	argument(2)
		3: Value	argument(3)
		4: Reg	constructor(put_in_reg, [2], 1)
		5: Reg	constructor(put_in_reg, [3], 2)
		6: Reg	constructor(alu_rrr, [0, 1, 4, 5], 3)
		7: Option(Inst)	extractor(def_inst, 3)
		8: Inst	match_some(7)
		9: InstructionData	extractor(inst_data, 8)
		10: Opcode	match_variant(9, InstructionData::UnaryImm, opcode)
		11: Imm64	match_variant(9, InstructionData::UnaryImm, imm)
		12: Option(ImmLogic)	constructor(imm_logic_from_imm64, [1, 11], 0)
		13: ImmLogic	match_some(12)
		14: Reg	constructor(alu_rr_imm_logic, [0, 1, 4, 13], 2)
		15: Option(Inst)	extractor(def_inst, 2)
		16: Inst	match_some(15)
		17: InstructionData	extractor(inst_data, 16)
		18: Opcode	match_variant(17, InstructionData::UnaryImm, opcode)
		19: Imm64	match_variant(17, InstructionData::UnaryImm, imm)
		20: Option(ImmLogic)	constructor(imm_logic_from_imm64, [1, 19], 0)
		21: ImmLogic	match_some(20)
		22: Reg	constructor(put_in_reg, [3], 1)
		23: Reg	constructor(alu_rr_imm_logic, [0, 1, 22, 21], 2)
		24: Opcode	match_variant(9, InstructionData::Binary, opcode)
		25: ValueArray2	match_variant(9, InstructionData::Binary, args)
		26: (Value, Value)	extractor(value_array_2, 25)
		27: Value	match_tuple(26, 0)
		28: Value	match_tuple(26, 1)
		29: Option(Inst)	extractor(def_inst, 28)
		30: Inst	match_some(29)
		31: InstructionData	extractor(inst_data, 30)
		32: Opcode	match_variant(31, InstructionData::UnaryImm, opcode)
		33: Imm64	match_variant(31, InstructionData::UnaryImm, imm)
		34: Option(ShiftOpAndAmt)	constructor(lshl_from_imm64, [1, 33], 0)
		35: ShiftOpAndAmt	match_some(34)
		36: Reg	constructor(put_in_reg, [27], 2)
		37: Reg	constructor(alu_rrr_shift, [0, 1, 4, 36, 35], 3)
		38: Opcode	match_variant(17, InstructionData::Binary, opcode)
		39: ValueArray2	match_variant(17, InstructionData::Binary, args)
		40: (Value, Value)	extractor(value_array_2, 39)
		41: Value	match_tuple(40, 0)
		42: Value	match_tuple(40, 1)
		43: Option(Inst)	extractor(def_inst, 42)
		44: Inst	match_some(43)
		45: InstructionData	extractor(inst_data, 44)
		46: Opcode	match_variant(45, InstructionData::UnaryImm, opcode)
		47: Imm64	match_variant(45, InstructionData::UnaryImm, imm)
		48: Option(ShiftOpAndAmt)	constructor(lshl_from_imm64, [1, 47], 0)
		49: ShiftOpAndAmt	match_some(48)
		50: Reg	constructor(put_in_reg, [41], 2)
		51: Reg	constructor(alu_rrr_shift, [0, 1, 22, 50, 49], 3)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3050
			constraints = [
			]
			prio = -1
			result = 6
			impure = [4, 5, 6]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3054
			constraints = [
				7:	some
				9:	variant(InstructionData::UnaryImm)
				10:	variant(Opcode::Iconst)
				12:	some
			]
			prio = 0
			result = 14
			impure = [4, 14]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3057
			constraints = [
				15:	some
				17:	variant(InstructionData::UnaryImm)
				18:	variant(Opcode::Iconst)
				20:	some
			]
			prio = 1
			result = 23
			impure = [22, 23]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3062
			constraints = [
				7:	some
				9:	variant(InstructionData::Binary)
				24:	variant(Opcode::Ishl)
				29:	some
				31:	variant(InstructionData::UnaryImm)
				32:	variant(Opcode::Iconst)
				34:	some
			]
			prio = 0
			result = 37
			impure = [4, 36, 37]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3065
			constraints = [
				15:	some
				17:	variant(InstructionData::Binary)
				38:	variant(Opcode::Ishl)
				43:	some
				45:	variant(InstructionData::UnaryImm)
				46:	variant(Opcode::Iconst)
				48:	some
			]
			prio = 1
			result = 51
			impure = [22, 50, 51]
		}
	]
}
term {
	name = alu_rs_imm_logic
	bindings = [
		0: ALUOp	argument(0)
		1: Type	argument(1)
		2: Value	argument(2)
		3: Value	argument(3)
		4: Reg	constructor(put_in_reg, [2], 1)
		5: Reg	constructor(put_in_reg, [3], 2)
		6: Reg	constructor(alu_rrr, [0, 1, 4, 5], 3)
		7: Option(Inst)	extractor(def_inst, 3)
		8: Inst	match_some(7)
		9: InstructionData	extractor(inst_data, 8)
		10: Opcode	match_variant(9, InstructionData::UnaryImm, opcode)
		11: Imm64	match_variant(9, InstructionData::UnaryImm, imm)
		12: Option(ImmLogic)	constructor(imm_logic_from_imm64, [1, 11], 0)
		13: ImmLogic	match_some(12)
		14: Reg	constructor(alu_rr_imm_logic, [0, 1, 4, 13], 2)
		15: Opcode	match_variant(9, InstructionData::Binary, opcode)
		16: ValueArray2	match_variant(9, InstructionData::Binary, args)
		17: (Value, Value)	extractor(value_array_2, 16)
		18: Value	match_tuple(17, 0)
		19: Value	match_tuple(17, 1)
		20: Option(Inst)	extractor(def_inst, 19)
		21: Inst	match_some(20)
		22: InstructionData	extractor(inst_data, 21)
		23: Opcode	match_variant(22, InstructionData::UnaryImm, opcode)
		24: Imm64	match_variant(22, InstructionData::UnaryImm, imm)
		25: Option(ShiftOpAndAmt)	constructor(lshl_from_imm64, [1, 24], 0)
		26: ShiftOpAndAmt	match_some(25)
		27: Reg	constructor(put_in_reg, [18], 2)
		28: Reg	constructor(alu_rrr_shift, [0, 1, 4, 27, 26], 3)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3072
			constraints = [
			]
			prio = -1
			result = 6
			impure = [4, 5, 6]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3074
			constraints = [
				7:	some
				9:	variant(InstructionData::UnaryImm)
				10:	variant(Opcode::Iconst)
				12:	some
			]
			prio = 0
			result = 14
			impure = [4, 14]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3077
			constraints = [
				7:	some
				9:	variant(InstructionData::Binary)
				15:	variant(Opcode::Ishl)
				20:	some
				22:	variant(InstructionData::UnaryImm)
				23:	variant(Opcode::Iconst)
				25:	some
			]
			prio = 0
			result = 28
			impure = [4, 27, 28]
		}
	]
}
term {
	name = i128_alu_bitop
	bindings = [
		0: ALUOp	argument(0)
		1: Type	argument(1)
		2: Value	argument(2)
		3: Value	argument(3)
		4: ValueRegs	constructor(put_in_regs, [2], 1)
		5: usize	const_int(0, usize)
		6: Reg	constructor(value_regs_get, [4, 5], 2)
		7: usize	const_int(1, usize)
		8: Reg	constructor(value_regs_get, [4, 7], 3)
		9: ValueRegs	constructor(put_in_regs, [3], 4)
		10: Reg	constructor(value_regs_get, [9, 5], 5)
		11: Reg	constructor(value_regs_get, [9, 7], 6)
		12: Reg	constructor(alu_rrr, [0, 1, 6, 10], 7)
		13: Reg	constructor(alu_rrr, [0, 1, 8, 11], 8)
		14: ValueRegs	constructor(value_regs, [12, 13], 9)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3086
			constraints = [
			]
			prio = 0
			result = 14
			impure = [4, 6, 8, 9, 10, 11, 12, 13, 14]
		}
	]
}
term {
	name = ld1r
	bindings = [
		0: Reg	argument(0)
		1: VectorSize	argument(1)
		2: MemFlags	argument(2)
		3: Type	const_prim(I8X16)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: MInst	make_variant(MInst::VecLoadReplicate, [4, 0, 1, 2])
		6: Unit	constructor(emit, [5], 2)
		7: Reg	constructor(writable_reg_to_reg, [4], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3101
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4, 6]
		}
	]
}
term {
	name = load_ext_name
	bindings = [
		0: BoxExternalName	argument(0)
		1: i64	argument(1)
		2: Type	const_prim(I64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::LoadExtName, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3108
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = amode
	bindings = [
		0: Type	argument(0)
		1: Value	argument(1)
		2: i32	argument(2)
		3: AMode	constructor(amode_no_more_iconst, [0, 1, 2], 1)
		4: Option(Inst)	extractor(def_inst, 1)
		5: Inst	match_some(4)
		6: InstructionData	extractor(inst_data, 5)
		7: Opcode	match_variant(6, InstructionData::Binary, opcode)
		8: ValueArray2	match_variant(6, InstructionData::Binary, args)
		9: (Value, Value)	extractor(value_array_2, 8)
		10: Value	match_tuple(9, 0)
		11: Value	match_tuple(9, 1)
		12: Option(Inst)	extractor(def_inst, 11)
		13: Inst	match_some(12)
		14: InstructionData	extractor(inst_data, 13)
		15: Opcode	match_variant(14, InstructionData::UnaryImm, opcode)
		16: Imm64	match_variant(14, InstructionData::UnaryImm, imm)
		17: Option(i32)	extractor(simm32, 16)
		18: i32	match_some(17)
		19: Option(i32)	constructor(s32_add_fallible, [18, 2], 0)
		20: i32	match_some(19)
		21: AMode	constructor(amode_no_more_iconst, [0, 10, 20], 1)
		22: Option(Inst)	extractor(def_inst, 10)
		23: Inst	match_some(22)
		24: InstructionData	extractor(inst_data, 23)
		25: Opcode	match_variant(24, InstructionData::UnaryImm, opcode)
		26: Imm64	match_variant(24, InstructionData::UnaryImm, imm)
		27: Option(i32)	extractor(simm32, 26)
		28: i32	match_some(27)
		29: Option(i32)	constructor(s32_add_fallible, [28, 2], 0)
		30: i32	match_some(29)
		31: AMode	constructor(amode_no_more_iconst, [0, 11, 30], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3128
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3130
			constraints = [
				4:	some
				6:	variant(InstructionData::Binary)
				7:	variant(Opcode::Iadd)
				12:	some
				14:	variant(InstructionData::UnaryImm)
				15:	variant(Opcode::Iconst)
				17:	some
				19:	some
			]
			prio = 1
			result = 21
			impure = [21]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3133
			constraints = [
				4:	some
				6:	variant(InstructionData::Binary)
				7:	variant(Opcode::Iadd)
				22:	some
				24:	variant(InstructionData::UnaryImm)
				25:	variant(Opcode::Iconst)
				27:	some
				29:	some
			]
			prio = 2
			result = 31
			impure = [31]
		}
	]
}
term {
	name = amode_no_more_iconst
	bindings = [
		0: Type	argument(0)
		1: Value	argument(1)
		2: i32	argument(2)
		3: Reg	constructor(put_in_reg, [1], 1)
		4: Type	const_prim(I64)
		5: ImmExtend	make_variant(ImmExtend::Zero, [])
		6: i64	constructor(i32_as_i64, [2], 0)
		7: u64	constructor(i64_as_u64, [6], 0)
		8: Reg	constructor(imm, [4, 5, 7], 2)
		9: AMode	make_variant(AMode::RegReg, [3, 8])
		10: Option(SImm9)	constructor(simm9_from_i64, [6], 0)
		11: SImm9	match_some(10)
		12: AMode	make_variant(AMode::Unscaled, [3, 11])
		13: Option(UImm12Scaled)	constructor(uimm12_scaled_from_i64, [6, 0], 0)
		14: UImm12Scaled	match_some(13)
		15: AMode	make_variant(AMode::UnsignedOffset, [3, 14])
		16: Option(Inst)	extractor(def_inst, 1)
		17: Inst	match_some(16)
		18: InstructionData	extractor(inst_data, 17)
		19: Opcode	match_variant(18, InstructionData::Binary, opcode)
		20: ValueArray2	match_variant(18, InstructionData::Binary, args)
		21: (Value, Value)	extractor(value_array_2, 20)
		22: Value	match_tuple(21, 0)
		23: Value	match_tuple(21, 1)
		24: Reg	constructor(put_in_reg, [22], 1)
		25: Reg	constructor(amode_add, [24, 2], 2)
		26: Reg	constructor(put_in_reg, [23], 3)
		27: AMode	make_variant(AMode::RegReg, [25, 26])
		28: Option(Inst)	extractor(def_inst, 23)
		29: Inst	match_some(28)
		30: InstructionData	extractor(inst_data, 29)
		31: Opcode	match_variant(30, InstructionData::Unary, opcode)
		32: Value	match_variant(30, InstructionData::Unary, arg)
		33: Type	extractor(value_type, 32)
		34: Reg	constructor(put_in_reg, [32], 3)
		35: ExtendOp	make_variant(ExtendOp::UXTW, [])
		36: AMode	make_variant(AMode::RegExtended, [25, 34, 35])
		37: ExtendOp	make_variant(ExtendOp::SXTW, [])
		38: AMode	make_variant(AMode::RegExtended, [25, 34, 37])
		39: Option(Inst)	extractor(def_inst, 22)
		40: Inst	match_some(39)
		41: InstructionData	extractor(inst_data, 40)
		42: Opcode	match_variant(41, InstructionData::Unary, opcode)
		43: Value	match_variant(41, InstructionData::Unary, arg)
		44: Type	extractor(value_type, 43)
		45: Reg	constructor(put_in_reg, [23], 1)
		46: Reg	constructor(amode_add, [45, 2], 2)
		47: Reg	constructor(put_in_reg, [43], 3)
		48: AMode	make_variant(AMode::RegExtended, [46, 47, 35])
		49: AMode	make_variant(AMode::RegExtended, [46, 47, 37])
		50: Opcode	match_variant(30, InstructionData::Binary, opcode)
		51: ValueArray2	match_variant(30, InstructionData::Binary, args)
		52: (Value, Value)	extractor(value_array_2, 51)
		53: Value	match_tuple(52, 0)
		54: Value	match_tuple(52, 1)
		55: Option(Inst)	extractor(def_inst, 54)
		56: Inst	match_some(55)
		57: InstructionData	extractor(inst_data, 56)
		58: Opcode	match_variant(57, InstructionData::UnaryImm, opcode)
		59: Imm64	match_variant(57, InstructionData::UnaryImm, imm)
		60: u64	extractor(u64_from_imm64, 59)
		61: u16	constructor(ty_bytes, [0], 0)
		62: u64	constructor(u16_as_u64, [61], 0)
		63: u64	const_int(1, u64)
		64: u64	constructor(u64_shl, [63, 60], 0)
		65: bool	constructor(u64_eq, [62, 64], 0)
		66: AMode	constructor(amode_reg_scaled, [25, 53], 3)
		67: Opcode	match_variant(41, InstructionData::Binary, opcode)
		68: ValueArray2	match_variant(41, InstructionData::Binary, args)
		69: (Value, Value)	extractor(value_array_2, 68)
		70: Value	match_tuple(69, 0)
		71: Value	match_tuple(69, 1)
		72: Option(Inst)	extractor(def_inst, 71)
		73: Inst	match_some(72)
		74: InstructionData	extractor(inst_data, 73)
		75: Opcode	match_variant(74, InstructionData::UnaryImm, opcode)
		76: Imm64	match_variant(74, InstructionData::UnaryImm, imm)
		77: u64	extractor(u64_from_imm64, 76)
		78: u64	constructor(u64_shl, [63, 77], 0)
		79: bool	constructor(u64_eq, [62, 78], 0)
		80: AMode	constructor(amode_reg_scaled, [46, 70], 3)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3140
			constraints = [
			]
			prio = 0
			result = 9
			impure = [3, 8]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3145
			constraints = [
				10:	some
			]
			prio = 1
			result = 12
			impure = [3]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3148
			constraints = [
				13:	some
			]
			prio = 2
			result = 15
			impure = [3]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3159
			constraints = [
				16:	some
				18:	variant(InstructionData::Binary)
				19:	variant(Opcode::Iadd)
			]
			prio = 3
			result = 27
			impure = [24, 25, 26]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3161
			constraints = [
				16:	some
				18:	variant(InstructionData::Binary)
				19:	variant(Opcode::Iadd)
				28:	some
				30:	variant(InstructionData::Unary)
				31:	variant(Opcode::Uextend)
				33:	const_prim(I32)
			]
			prio = 4
			result = 36
			impure = [24, 25, 34]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3163
			constraints = [
				16:	some
				18:	variant(InstructionData::Binary)
				19:	variant(Opcode::Iadd)
				28:	some
				30:	variant(InstructionData::Unary)
				31:	variant(Opcode::Sextend)
				33:	const_prim(I32)
			]
			prio = 4
			result = 38
			impure = [24, 25, 34]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3165
			constraints = [
				16:	some
				18:	variant(InstructionData::Binary)
				19:	variant(Opcode::Iadd)
				39:	some
				41:	variant(InstructionData::Unary)
				42:	variant(Opcode::Uextend)
				44:	const_prim(I32)
			]
			prio = 5
			result = 48
			impure = [45, 46, 47]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3167
			constraints = [
				16:	some
				18:	variant(InstructionData::Binary)
				19:	variant(Opcode::Iadd)
				39:	some
				41:	variant(InstructionData::Unary)
				42:	variant(Opcode::Sextend)
				44:	const_prim(I32)
			]
			prio = 5
			result = 49
			impure = [45, 46, 47]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3177
			constraints = [
				16:	some
				18:	variant(InstructionData::Binary)
				19:	variant(Opcode::Iadd)
				28:	some
				30:	variant(InstructionData::Binary)
				50:	variant(Opcode::Ishl)
				55:	some
				57:	variant(InstructionData::UnaryImm)
				58:	variant(Opcode::Iconst)
				65:	const_prim(true)
			]
			prio = 6
			result = 66
			impure = [24, 25, 66]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3180
			constraints = [
				16:	some
				18:	variant(InstructionData::Binary)
				19:	variant(Opcode::Iadd)
				39:	some
				41:	variant(InstructionData::Binary)
				67:	variant(Opcode::Ishl)
				72:	some
				74:	variant(InstructionData::UnaryImm)
				75:	variant(Opcode::Iconst)
				79:	const_prim(true)
			]
			prio = 7
			result = 80
			impure = [45, 46, 80]
		}
	]
}
term {
	name = amode_reg_scaled
	bindings = [
		0: Reg	argument(0)
		1: Value	argument(1)
		2: Reg	constructor(put_in_reg, [1], 1)
		3: AMode	make_variant(AMode::RegScaled, [0, 2])
		4: Option(Inst)	extractor(def_inst, 1)
		5: Inst	match_some(4)
		6: InstructionData	extractor(inst_data, 5)
		7: Opcode	match_variant(6, InstructionData::Unary, opcode)
		8: Value	match_variant(6, InstructionData::Unary, arg)
		9: Type	extractor(value_type, 8)
		10: Reg	constructor(put_in_reg, [8], 1)
		11: ExtendOp	make_variant(ExtendOp::UXTW, [])
		12: AMode	make_variant(AMode::RegScaledExtended, [0, 10, 11])
		13: ExtendOp	make_variant(ExtendOp::SXTW, [])
		14: AMode	make_variant(AMode::RegScaledExtended, [0, 10, 13])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3185
			constraints = [
			]
			prio = 0
			result = 3
			impure = [2]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3187
			constraints = [
				4:	some
				6:	variant(InstructionData::Unary)
				7:	variant(Opcode::Uextend)
				9:	const_prim(I32)
			]
			prio = 1
			result = 12
			impure = [10]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3189
			constraints = [
				4:	some
				6:	variant(InstructionData::Unary)
				7:	variant(Opcode::Sextend)
				9:	const_prim(I32)
			]
			prio = 1
			result = 14
			impure = [10]
		}
	]
}
term {
	name = amode_add
	bindings = [
		0: Reg	argument(0)
		1: i32	argument(1)
		2: Type	const_prim(I64)
		3: ImmExtend	make_variant(ImmExtend::Zero, [])
		4: i64	constructor(i32_as_i64, [1], 0)
		5: u64	constructor(i64_as_u64, [4], 0)
		6: Reg	constructor(imm, [2, 3, 5], 1)
		7: Reg	constructor(add, [2, 0, 6], 2)
		8: Option(Imm12)	extractor(imm12_from_u64, 5)
		9: Imm12	match_some(8)
		10: Reg	constructor(add_imm, [2, 0, 9], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3195
			constraints = [
			]
			prio = 0
			result = 7
			impure = [6, 7]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3197
			constraints = [
				8:	some
			]
			prio = 1
			result = 10
			impure = [10]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3200
			constraints = [
				1:	const_int(0)
			]
			prio = 2
			result = 0
		}
	]
}
term {
	name = pair_amode
	bindings = [
		0: Value	argument(0)
		1: i32	argument(1)
		2: i64	const_int(0, i64)
		3: Type	const_prim(I64)
		4: Option(SImm7Scaled)	constructor(simm7_scaled_from_i64, [2, 3], 0)
		5: SImm7Scaled	match_some(4)
		6: Reg	constructor(put_in_reg, [0], 1)
		7: Reg	constructor(amode_add, [6, 1], 2)
		8: PairAMode	make_variant(PairAMode::SignedOffset, [7, 5])
		9: i64	constructor(i32_as_i64, [1], 0)
		10: Option(SImm7Scaled)	constructor(simm7_scaled_from_i64, [9, 3], 0)
		11: SImm7Scaled	match_some(10)
		12: PairAMode	make_variant(PairAMode::SignedOffset, [6, 11])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3207
			constraints = [
				4:	some
			]
			prio = 0
			result = 8
			impure = [6, 7]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3212
			constraints = [
				10:	some
			]
			prio = 1
			result = 12
			impure = [6]
		}
	]
}
term {
	name = sink_load_into_addr
	bindings = [
		0: Type	argument(0)
		1: Inst	argument(1)
		2: InstructionData	extractor(inst_data, 1)
		3: Opcode	match_variant(2, InstructionData::Load, opcode)
		4: Value	match_variant(2, InstructionData::Load, arg)
		5: MemFlags	match_variant(2, InstructionData::Load, flags)
		6: Offset32	match_variant(2, InstructionData::Load, offset)
		7: i32	extractor(offset32, 6)
		8: Unit	constructor(sink_inst, [1], 1)
		9: Reg	constructor(put_in_reg, [4], 2)
		10: i64	constructor(i32_as_i64, [7], 0)
		11: u64	constructor(i64_as_u64, [10], 0)
		12: Reg	constructor(add_imm_to_addr, [9, 11], 3)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3227
			constraints = [
				2:	variant(InstructionData::Load)
				3:	variant(Opcode::Load)
			]
			prio = 0
			result = 12
			impure = [8, 9, 12]
		}
	]
}
term {
	name = add_imm_to_addr
	bindings = [
		0: Reg	argument(0)
		1: u64	argument(1)
		2: Option(Imm12)	extractor(imm12_from_u64, 1)
		3: Imm12	match_some(2)
		4: Type	const_prim(I64)
		5: Reg	constructor(add_imm, [4, 0, 3], 1)
		6: ImmExtend	make_variant(ImmExtend::Zero, [])
		7: Reg	constructor(imm, [4, 6, 1], 1)
		8: Reg	constructor(add, [4, 0, 7], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3232
			constraints = [
				1:	const_int(0)
			]
			prio = 2
			result = 0
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3233
			constraints = [
				2:	some
			]
			prio = 1
			result = 5
			impure = [5]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3234
			constraints = [
			]
			prio = 0
			result = 8
			impure = [7, 8]
		}
	]
}
term {
	name = constant_f32
	bindings = [
		0: u32	argument(0)
		1: ScalarSize	make_variant(ScalarSize::Size32, [])
		2: ASIMDMovModImm	constructor(asimd_mov_mod_imm_zero, [1], 1)
		3: bool	const_prim(false)
		4: VectorSize	make_variant(VectorSize::Size32x2, [])
		5: Reg	constructor(vec_dup_imm, [2, 3, 4], 2)
		6: u64	constructor(u32_as_u64, [0], 0)
		7: Option(ASIMDFPModImm)	constructor(asimd_fp_mod_imm_from_u64, [6, 1], 0)
		8: ASIMDFPModImm	match_some(7)
		9: Reg	constructor(fpu_move_fp_imm, [8, 1], 1)
		10: Type	const_prim(I32)
		11: ImmExtend	make_variant(ImmExtend::Zero, [])
		12: Reg	constructor(imm, [10, 11, 6], 1)
		13: Reg	constructor(mov_to_fpu, [12, 1], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3242
			constraints = [
				0:	const_int(0)
			]
			prio = 2
			result = 5
			impure = [2, 5]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3246
			constraints = [
				7:	some
			]
			prio = 1
			result = 9
			impure = [9]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3249
			constraints = [
			]
			prio = 0
			result = 13
			impure = [12, 13]
		}
	]
}
term {
	name = constant_f64
	bindings = [
		0: u64	argument(0)
		1: ScalarSize	make_variant(ScalarSize::Size32, [])
		2: ASIMDMovModImm	constructor(asimd_mov_mod_imm_zero, [1], 1)
		3: bool	const_prim(false)
		4: VectorSize	make_variant(VectorSize::Size32x2, [])
		5: Reg	constructor(vec_dup_imm, [2, 3, 4], 2)
		6: ScalarSize	make_variant(ScalarSize::Size64, [])
		7: Option(ASIMDFPModImm)	constructor(asimd_fp_mod_imm_from_u64, [0, 6], 0)
		8: ASIMDFPModImm	match_some(7)
		9: Reg	constructor(fpu_move_fp_imm, [8, 6], 1)
		10: Option(u32)	extractor(u64_as_u32, 0)
		11: u32	match_some(10)
		12: Reg	constructor(constant_f32, [11], 1)
		13: Option(u64)	extractor(u64_low32_bits_unset, 0)
		14: u64	match_some(13)
		15: Type	const_prim(I64)
		16: ImmExtend	make_variant(ImmExtend::Zero, [])
		17: Reg	constructor(imm, [15, 16, 14], 1)
		18: Reg	constructor(mov_to_fpu, [17, 6], 2)
		19: VCodeConstant	constructor(emit_u64_le_const, [0], 1)
		20: AMode	make_variant(AMode::Const, [19])
		21: MemFlags	constructor(mem_flags_trusted, [], 0)
		22: Reg	constructor(fpu_load64, [20, 21], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3260
			constraints = [
				0:	const_int(0)
			]
			prio = 4
			result = 5
			impure = [2, 5]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3264
			constraints = [
				7:	some
			]
			prio = 3
			result = 9
			impure = [9]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3267
			constraints = [
				10:	some
			]
			prio = 2
			result = 12
			impure = [12]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3269
			constraints = [
				13:	some
			]
			prio = 1
			result = 18
			impure = [17, 18]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3271
			constraints = [
			]
			prio = 0
			result = 22
			impure = [19, 22]
		}
	]
}
term {
	name = constant_f128
	bindings = [
		0: u128	argument(0)
		1: ScalarSize	make_variant(ScalarSize::Size8, [])
		2: ASIMDMovModImm	constructor(asimd_mov_mod_imm_zero, [1], 1)
		3: bool	const_prim(false)
		4: VectorSize	make_variant(VectorSize::Size8x16, [])
		5: Reg	constructor(vec_dup_imm, [2, 3, 4], 2)
		6: Option(u64)	extractor(u128_as_u64, 0)
		7: u64	match_some(6)
		8: Reg	constructor(constant_f64, [7], 1)
		9: Option(u64)	extractor(u128_replicated_u64, 0)
		10: u64	match_some(9)
		11: VectorSize	make_variant(VectorSize::Size64x2, [])
		12: Reg	constructor(splat_const, [10, 11], 1)
		13: VCodeConstant	constructor(emit_u128_le_const, [0], 1)
		14: AMode	make_variant(AMode::Const, [13])
		15: MemFlags	constructor(mem_flags_trusted, [], 0)
		16: Reg	constructor(fpu_load128, [14, 15], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3280
			constraints = [
				0:	const_int(0)
			]
			prio = 3
			result = 5
			impure = [2, 5]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3286
			constraints = [
				6:	some
			]
			prio = 2
			result = 8
			impure = [8]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3290
			constraints = [
				9:	some
			]
			prio = 1
			result = 12
			impure = [12]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3294
			constraints = [
			]
			prio = 0
			result = 16
			impure = [13, 16]
		}
	]
}
term {
	name = splat_const
	bindings = [
		0: u64	argument(0)
		1: Option(u64)	extractor(u64_replicated_u32, 0)
		2: u64	match_some(1)
		3: VectorSize	argument(1)
		4: VectorSize	make_variant(VectorSize::Size32x4, [])
		5: Reg	constructor(splat_const, [2, 4], 1)
		6: Option(u64)	extractor(u32_replicated_u16, 0)
		7: u64	match_some(6)
		8: VectorSize	make_variant(VectorSize::Size16x8, [])
		9: Reg	constructor(splat_const, [7, 8], 1)
		10: VectorSize	make_variant(VectorSize::Size16x4, [])
		11: Reg	constructor(splat_const, [7, 10], 1)
		12: Option(u8)	extractor(u16_replicated_u8, 0)
		13: u8	match_some(12)
		14: u64	constructor(u8_as_u64, [13], 0)
		15: VectorSize	make_variant(VectorSize::Size8x16, [])
		16: Reg	constructor(splat_const, [14, 15], 1)
		17: VectorSize	make_variant(VectorSize::Size8x8, [])
		18: Reg	constructor(splat_const, [14, 17], 1)
		19: ScalarSize	constructor(vector_lane_size, [3], 0)
		20: Option(ASIMDMovModImm)	constructor(asimd_mov_mod_imm_from_u64, [0, 19], 0)
		21: ASIMDMovModImm	match_some(20)
		22: bool	const_prim(false)
		23: Reg	constructor(vec_dup_imm, [21, 22, 3], 1)
		24: u64	constructor(u64_not, [0], 0)
		25: Option(ASIMDMovModImm)	constructor(asimd_mov_mod_imm_from_u64, [24, 19], 0)
		26: ASIMDMovModImm	match_some(25)
		27: bool	const_prim(true)
		28: Reg	constructor(vec_dup_imm, [26, 27, 3], 1)
		29: u64	const_int(32, u64)
		30: u64	constructor(u64_shl, [0, 29], 0)
		31: u64	constructor(u64_or, [0, 30], 0)
		32: ScalarSize	make_variant(ScalarSize::Size64, [])
		33: Option(ASIMDMovModImm)	constructor(asimd_mov_mod_imm_from_u64, [31, 32], 0)
		34: ASIMDMovModImm	match_some(33)
		35: VectorSize	make_variant(VectorSize::Size64x2, [])
		36: Reg	constructor(vec_dup_imm, [34, 22, 35], 1)
		37: Reg	constructor(fpu_extend, [36, 32], 2)
		38: Option(ASIMDFPModImm)	constructor(asimd_fp_mod_imm_from_u64, [0, 19], 0)
		39: ASIMDFPModImm	match_some(38)
		40: Reg	constructor(vec_dup_fp_imm, [39, 3], 1)
		41: Type	const_prim(I64)
		42: ImmExtend	make_variant(ImmExtend::Zero, [])
		43: Reg	constructor(imm, [41, 42, 0], 1)
		44: Reg	constructor(vec_dup, [43, 3], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3305
			constraints = [
				1:	some
				3:	variant(VectorSize::Size64x2)
			]
			prio = 5
			result = 5
			impure = [5]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3307
			constraints = [
				3:	variant(VectorSize::Size32x4)
				6:	some
			]
			prio = 5
			result = 9
			impure = [9]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3309
			constraints = [
				3:	variant(VectorSize::Size32x2)
				6:	some
			]
			prio = 5
			result = 11
			impure = [11]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3311
			constraints = [
				3:	variant(VectorSize::Size16x8)
				12:	some
			]
			prio = 5
			result = 16
			impure = [16]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3313
			constraints = [
				3:	variant(VectorSize::Size16x4)
				12:	some
			]
			prio = 5
			result = 18
			impure = [18]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3318
			constraints = [
				20:	some
			]
			prio = 4
			result = 23
			impure = [23]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3321
			constraints = [
				25:	some
			]
			prio = 3
			result = 28
			impure = [28]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3327
			constraints = [
				3:	variant(VectorSize::Size32x4)
				33:	some
			]
			prio = 2
			result = 36
			impure = [36]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3330
			constraints = [
				3:	variant(VectorSize::Size32x2)
				33:	some
			]
			prio = 2
			result = 37
			impure = [36, 37]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3334
			constraints = [
				38:	some
			]
			prio = 1
			result = 40
			impure = [40]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3340
			constraints = [
			]
			prio = 0
			result = 44
			impure = [43, 44]
		}
	]
}
term {
	name = float_cmp_zero
	bindings = [
		0: FloatCC	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecMisc2	constructor(float_cc_cmp_zero_to_vec_misc_op, [0], 1)
		4: Reg	constructor(vec_misc, [3, 1, 2], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3375
			constraints = [
			]
			prio = 0
			result = 4
			impure = [3, 4]
		}
	]
}
term {
	name = float_cmp_zero_swap
	bindings = [
		0: FloatCC	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecMisc2	constructor(float_cc_cmp_zero_to_vec_misc_op_swap, [0], 1)
		4: Reg	constructor(vec_misc, [3, 1, 2], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3380
			constraints = [
			]
			prio = 0
			result = 4
			impure = [3, 4]
		}
	]
}
term {
	name = fcmeq0
	bindings = [
		0: Reg	argument(0)
		1: VectorSize	argument(1)
		2: VecMisc2	make_variant(VecMisc2::Fcmeq0, [])
		3: Reg	constructor(vec_misc, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3385
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = int_cmp_zero
	bindings = [
		0: IntCC	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecMisc2	constructor(int_cc_cmp_zero_to_vec_misc_op, [0], 1)
		4: Reg	constructor(vec_misc, [3, 1, 2], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3405
			constraints = [
			]
			prio = 0
			result = 4
			impure = [3, 4]
		}
	]
}
term {
	name = int_cmp_zero_swap
	bindings = [
		0: IntCC	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecMisc2	constructor(int_cc_cmp_zero_to_vec_misc_op_swap, [0], 1)
		4: Reg	constructor(vec_misc, [3, 1, 2], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3410
			constraints = [
			]
			prio = 0
			result = 4
			impure = [3, 4]
		}
	]
}
term {
	name = cmeq0
	bindings = [
		0: Reg	argument(0)
		1: VectorSize	argument(1)
		2: VecMisc2	make_variant(VecMisc2::Cmeq0, [])
		3: Reg	constructor(vec_misc, [2, 0, 1], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3415
			constraints = [
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = lse_atomic_rmw
	bindings = [
		0: AtomicRMWOp	argument(0)
		1: Value	argument(1)
		2: Reg	argument(2)
		3: Type	argument(3)
		4: MemFlags	argument(4)
		5: Reg	constructor(put_in_reg, [1], 1)
		6: WritableReg	constructor(temp_writable_reg, [3], 2)
		7: MInst	make_variant(MInst::AtomicRMW, [0, 2, 6, 5, 3, 4])
		8: Unit	constructor(emit, [7], 3)
		9: Reg	constructor(writable_reg_to_reg, [6], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3420
			constraints = [
			]
			prio = 0
			result = 9
			impure = [5, 6, 8]
		}
	]
}
term {
	name = lse_atomic_cas
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Type	argument(3)
		4: MemFlags	argument(4)
		5: WritableReg	constructor(temp_writable_reg, [3], 1)
		6: MInst	make_variant(MInst::AtomicCAS, [5, 1, 2, 0, 3, 4])
		7: Unit	constructor(emit, [6], 2)
		8: Reg	constructor(writable_reg_to_reg, [5], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3430
			constraints = [
			]
			prio = 0
			result = 8
			impure = [5, 7]
		}
	]
}
term {
	name = atomic_rmw_loop
	bindings = [
		0: AtomicRMWLoopOp	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Type	argument(3)
		4: MemFlags	argument(4)
		5: Type	const_prim(I64)
		6: WritableReg	constructor(temp_writable_reg, [5], 1)
		7: WritableReg	constructor(temp_writable_reg, [5], 2)
		8: WritableReg	constructor(temp_writable_reg, [5], 3)
		9: MInst	make_variant(MInst::AtomicRMWLoop, [3, 0, 4, 1, 2, 6, 7, 8])
		10: Unit	constructor(emit, [9], 4)
		11: Reg	constructor(writable_reg_to_reg, [6], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3444
			constraints = [
			]
			prio = 0
			result = 11
			impure = [6, 7, 8, 10]
		}
	]
}
term {
	name = atomic_cas_loop
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Type	argument(3)
		4: MemFlags	argument(4)
		5: Type	const_prim(I64)
		6: WritableReg	constructor(temp_writable_reg, [5], 1)
		7: WritableReg	constructor(temp_writable_reg, [5], 2)
		8: MInst	make_variant(MInst::AtomicCASLoop, [3, 4, 0, 1, 2, 6, 7])
		9: Unit	constructor(emit, [8], 3)
		10: Reg	constructor(writable_reg_to_reg, [6], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3458
			constraints = [
			]
			prio = 0
			result = 10
			impure = [6, 7, 9]
		}
	]
}
term {
	name = copy_reg
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Type	const_prim(I32)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: OperandSize	make_variant(OperandSize::Size32, [])
		5: MInst	make_variant(MInst::Mov, [4, 3, 1])
		6: Unit	constructor(emit, [5], 2)
		7: Reg	constructor(writable_reg_to_reg, [3], 0)
		8: Type	const_prim(I64)
		9: WritableReg	constructor(temp_writable_reg, [8], 1)
		10: OperandSize	make_variant(OperandSize::Size64, [])
		11: MInst	make_variant(MInst::Mov, [10, 9, 1])
		12: Unit	constructor(emit, [11], 2)
		13: Reg	constructor(writable_reg_to_reg, [9], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3471
			constraints = [
				0:	const_prim(I32)
			]
			prio = 0
			result = 7
			impure = [3, 6]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3477
			constraints = [
				0:	const_prim(I64)
			]
			prio = 0
			result = 13
			impure = [9, 12]
		}
	]
}
term {
	name = mov_from_preg
	bindings = [
		0: PReg	argument(0)
		1: Type	const_prim(I64)
		2: WritableReg	constructor(temp_writable_reg, [1], 1)
		3: MInst	make_variant(MInst::MovFromPReg, [2, 0])
		4: Unit	constructor(emit, [3], 2)
		5: Reg	constructor(writable_reg_to_reg, [2], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3487
			constraints = [
			]
			prio = 0
			result = 5
			impure = [2, 4]
		}
	]
}
term {
	name = mov_to_preg
	bindings = [
		0: PReg	argument(0)
		1: Reg	argument(1)
		2: MInst	make_variant(MInst::MovToPReg, [0, 1])
		3: SideEffectNoResult	make_variant(SideEffectNoResult::Inst, [2])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3493
			constraints = [
			]
			prio = 0
			result = 3
		}
	]
}
term {
	name = aarch64_sp
	bindings = [
		0: PReg	constructor(preg_sp, [], 1)
		1: Reg	constructor(mov_from_preg, [0], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3509
			constraints = [
			]
			prio = 0
			result = 1
			impure = [0, 1]
		}
	]
}
term {
	name = aarch64_fp
	bindings = [
		0: PReg	constructor(preg_fp, [], 1)
		1: Reg	constructor(mov_from_preg, [0], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3513
			constraints = [
			]
			prio = 0
			result = 1
			impure = [0, 1]
		}
	]
}
term {
	name = aarch64_link
	bindings = [
		0: Option(Unit)	constructor(preserve_frame_pointers, [], 0)
		1: Unit	match_some(0)
		2: Option(Unit)	constructor(sign_return_address_disabled, [], 0)
		3: Unit	match_some(2)
		4: Type	const_prim(I64)
		5: WritableReg	constructor(temp_writable_reg, [4], 1)
		6: i64	const_int(8, i64)
		7: AMode	make_variant(AMode::FPOffset, [6])
		8: MemFlags	constructor(mem_flags_trusted, [], 0)
		9: MInst	make_variant(MInst::ULoad64, [5, 7, 8])
		10: Unit	constructor(emit, [9], 2)
		11: Reg	constructor(writable_reg_to_reg, [5], 0)
		12: WritableReg	constructor(writable_link_reg, [], 1)
		13: MInst	make_variant(MInst::ULoad64, [12, 7, 8])
		14: Unit	constructor(emit, [13], 2)
		15: MInst	make_variant(MInst::Xpaclri, [])
		16: Unit	constructor(emit, [15], 3)
		17: PReg	constructor(preg_link, [], 4)
		18: Reg	constructor(mov_from_preg, [17], 5)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3517
			constraints = [
				0:	some
				2:	some
			]
			prio = 1
			result = 11
			impure = [5, 10]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3533
			constraints = [
				0:	some
			]
			prio = 0
			result = 18
			impure = [12, 14, 16, 17, 18]
		}
	]
}
term {
	name = max_shift
	bindings = [
		0: Type	argument(0)
		1: u8	const_int(63, u8)
		2: u8	const_int(31, u8)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3548
			constraints = [
				0:	const_prim(F64)
			]
			prio = 0
			result = 1
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3549
			constraints = [
				0:	const_prim(F32)
			]
			prio = 0
			result = 2
		}
	]
}
term {
	name = fcopy_sign
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: Type	argument(2)
		3: Option(Type)	extractor(ty_scalar_float, 2)
		4: Type	match_some(3)
		5: Type	const_prim(F64)
		6: WritableReg	constructor(temp_writable_reg, [5], 1)
		7: u8	constructor(ty_bits, [4], 0)
		8: u8	constructor(max_shift, [4], 2)
		9: FPUOpRI	constructor(fpu_op_ri_ushr, [7, 8], 3)
		10: Reg	constructor(fpu_rri, [9, 1], 4)
		11: u8	constructor(max_shift, [4], 5)
		12: FPUOpRIMod	constructor(fpu_op_ri_sli, [7, 11], 6)
		13: MInst	make_variant(MInst::FpuRRIMod, [12, 6, 0, 10])
		14: Unit	constructor(emit, [13], 7)
		15: Reg	constructor(writable_reg_to_reg, [6], 0)
		16: Option((u32, u32))	extractor(multi_lane, 2)
		17: (u32, u32)	match_some(16)
		18: u32	match_tuple(17, 0)
		19: u32	match_tuple(17, 1)
		20: Type	const_prim(I8X16)
		21: WritableReg	constructor(temp_writable_reg, [20], 1)
		22: Type	constructor(lane_type, [2], 0)
		23: u8	constructor(max_shift, [22], 2)
		24: VectorSize	constructor(vector_size, [2], 3)
		25: Reg	constructor(ushr_vec_imm, [1, 23, 24], 4)
		26: VecShiftImmModOp	make_variant(VecShiftImmModOp::Sli, [])
		27: VectorSize	constructor(vector_size, [2], 5)
		28: u8	constructor(max_shift, [22], 6)
		29: MInst	make_variant(MInst::VecShiftImmMod, [26, 21, 0, 25, 27, 28])
		30: Unit	constructor(emit, [29], 7)
		31: Reg	constructor(writable_reg_to_reg, [21], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3554
			constraints = [
				3:	some
			]
			prio = 1
			result = 15
			impure = [6, 8, 9, 10, 11, 12, 14]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3559
			constraints = [
				16:	some
			]
			prio = 0
			result = 31
			impure = [21, 23, 24, 25, 27, 28, 30]
		}
	]
}
term {
	name = fpu_to_int_nan_check
	bindings = [
		0: ScalarSize	argument(0)
		1: Reg	argument(1)
		2: ProducesFlags	constructor(fpu_cmp, [0, 1, 1], 1)
		3: Cond	make_variant(Cond::Vs, [])
		4: CondBrKind	constructor(cond_br_cond, [3], 2)
		5: TrapCode	constructor(trap_code_bad_conversion_to_integer, [], 0)
		6: MInst	make_variant(MInst::TrapIf, [4, 5])
		7: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsReturnsReg, [6, 1])
		8: ValueRegs	constructor(with_flags, [2, 7], 3)
		9: usize	const_int(0, usize)
		10: Reg	constructor(value_regs_get, [8, 9], 4)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3568
			constraints = [
			]
			prio = 0
			result = 10
			impure = [2, 4, 8, 10]
		}
	]
}
term {
	name = fpu_to_int_underflow_check
	bindings = [
		0: bool	argument(0)
		1: Type	argument(1)
		2: Type	argument(2)
		3: Option(Type)	extractor(fits_in_16, 2)
		4: Type	match_some(3)
		5: Reg	argument(3)
		6: Reg	argument(4)
		7: ScalarSize	make_variant(ScalarSize::Size32, [])
		8: ProducesFlags	constructor(fpu_cmp, [7, 5, 6], 1)
		9: Cond	make_variant(Cond::Le, [])
		10: CondBrKind	constructor(cond_br_cond, [9], 2)
		11: TrapCode	constructor(trap_code_integer_overflow, [], 0)
		12: MInst	make_variant(MInst::TrapIf, [10, 11])
		13: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsReturnsReg, [12, 5])
		14: ValueRegs	constructor(with_flags, [8, 13], 3)
		15: usize	const_int(0, usize)
		16: Reg	constructor(value_regs_get, [14, 15], 4)
		17: Option(Type)	extractor(fits_in_32, 2)
		18: Type	match_some(17)
		19: ScalarSize	make_variant(ScalarSize::Size64, [])
		20: ProducesFlags	constructor(fpu_cmp, [19, 5, 6], 1)
		21: ValueRegs	constructor(with_flags, [20, 13], 3)
		22: Reg	constructor(value_regs_get, [21, 15], 4)
		23: ScalarSize	constructor(scalar_size, [1], 1)
		24: ProducesFlags	constructor(fpu_cmp, [23, 5, 6], 2)
		25: Cond	make_variant(Cond::Lt, [])
		26: CondBrKind	constructor(cond_br_cond, [25], 3)
		27: MInst	make_variant(MInst::TrapIf, [26, 11])
		28: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsReturnsReg, [27, 5])
		29: ValueRegs	constructor(with_flags, [24, 28], 4)
		30: Reg	constructor(value_regs_get, [29, 15], 5)
		31: CondBrKind	constructor(cond_br_cond, [9], 3)
		32: MInst	make_variant(MInst::TrapIf, [31, 11])
		33: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsReturnsReg, [32, 5])
		34: ValueRegs	constructor(with_flags, [24, 33], 4)
		35: Reg	constructor(value_regs_get, [34, 15], 5)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3581
			constraints = [
				0:	const_prim(true)
				1:	const_prim(F32)
				3:	some
			]
			prio = 0
			result = 16
			impure = [8, 10, 14, 16]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3589
			constraints = [
				0:	const_prim(true)
				1:	const_prim(F64)
				17:	some
			]
			prio = 0
			result = 22
			impure = [20, 10, 21, 22]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3597
			constraints = [
				0:	const_prim(true)
			]
			prio = -1
			result = 30
			impure = [23, 24, 26, 29, 30]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3605
			constraints = [
				0:	const_prim(false)
			]
			prio = 0
			result = 35
			impure = [23, 24, 31, 34, 35]
		}
	]
}
term {
	name = fpu_to_int_overflow_check
	bindings = [
		0: ScalarSize	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: ProducesFlags	constructor(fpu_cmp, [0, 1, 2], 1)
		4: Cond	make_variant(Cond::Ge, [])
		5: CondBrKind	constructor(cond_br_cond, [4], 2)
		6: TrapCode	constructor(trap_code_integer_overflow, [], 0)
		7: MInst	make_variant(MInst::TrapIf, [5, 6])
		8: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsReturnsReg, [7, 1])
		9: ValueRegs	constructor(with_flags, [3, 8], 3)
		10: usize	const_int(0, usize)
		11: Reg	constructor(value_regs_get, [9, 10], 4)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3615
			constraints = [
			]
			prio = 0
			result = 11
			impure = [3, 5, 9, 11]
		}
	]
}
term {
	name = fpu_to_int_cvt
	bindings = [
		0: FpuToIntOp	argument(0)
		1: Reg	argument(1)
		2: bool	argument(2)
		3: Type	argument(3)
		4: Type	argument(4)
		5: ScalarSize	constructor(scalar_size, [3], 1)
		6: u8	constructor(ty_bits, [3], 0)
		7: u8	constructor(ty_bits, [4], 0)
		8: Reg	constructor(fpu_to_int_nan_check, [5, 1], 2)
		9: Reg	constructor(min_fp_value, [2, 6, 7], 3)
		10: Reg	constructor(fpu_to_int_underflow_check, [2, 3, 4, 8, 9], 4)
		11: Reg	constructor(max_fp_value, [2, 6, 7], 5)
		12: Reg	constructor(fpu_to_int_overflow_check, [5, 10, 11], 6)
		13: Reg	constructor(fpu_to_int, [0, 12], 7)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3631
			constraints = [
			]
			prio = 0
			result = 13
			impure = [5, 8, 9, 10, 11, 12, 13]
		}
	]
}
term {
	name = fpu_to_int_cvt_sat
	bindings = [
		0: FpuToIntOp	argument(0)
		1: Reg	argument(1)
		2: bool	argument(2)
		3: Type	argument(3)
		4: Reg	constructor(fpu_to_int, [0, 1], 1)
		5: Option(Type)	extractor(fits_in_16, 3)
		6: Type	match_some(5)
		7: ImmExtend	make_variant(ImmExtend::Zero, [])
		8: u64	constructor(ty_mask, [6], 0)
		9: Reg	constructor(imm, [6, 7, 8], 2)
		10: OperandSize	make_variant(OperandSize::Size32, [])
		11: ProducesFlags	constructor(cmp, [10, 4, 9], 3)
		12: Cond	make_variant(Cond::Hi, [])
		13: ConsumesFlags	constructor(csel, [12, 9, 4], 4)
		14: Reg	constructor(with_flags_reg, [11, 13], 5)
		15: Reg	constructor(signed_max, [6], 2)
		16: Reg	constructor(signed_min, [6], 3)
		17: OperandSize	constructor(operand_size, [6], 4)
		18: ProducesFlags	constructor(cmp, [17, 4, 15], 5)
		19: Cond	make_variant(Cond::Gt, [])
		20: ConsumesFlags	constructor(csel, [19, 15, 4], 6)
		21: Reg	constructor(with_flags_reg, [18, 20], 7)
		22: OperandSize	constructor(operand_size, [6], 8)
		23: ProducesFlags	constructor(cmp, [22, 21, 16], 9)
		24: Cond	make_variant(Cond::Lt, [])
		25: ConsumesFlags	constructor(csel, [24, 16, 21], 10)
		26: Reg	constructor(with_flags_reg, [23, 25], 11)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3648
			constraints = [
				3:	const_prim(I64)
			]
			prio = 1
			result = 4
			impure = [4]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3650
			constraints = [
				3:	const_prim(I32)
			]
			prio = 1
			result = 4
			impure = [4]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3652
			constraints = [
				2:	const_prim(false)
				5:	some
			]
			prio = 0
			result = 14
			impure = [4, 9, 11, 13, 14]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3658
			constraints = [
				2:	const_prim(true)
				5:	some
			]
			prio = 0
			result = 26
			impure = [4, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26]
		}
	]
}
term {
	name = signed_min
	bindings = [
		0: Type	argument(0)
		1: Type	const_prim(I8)
		2: ImmExtend	make_variant(ImmExtend::Sign, [])
		3: u64	const_int(128, u64)
		4: Reg	constructor(imm, [1, 2, 3], 1)
		5: Type	const_prim(I16)
		6: u64	const_int(32768, u64)
		7: Reg	constructor(imm, [5, 2, 6], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3671
			constraints = [
				0:	const_prim(I8)
			]
			prio = 0
			result = 4
			impure = [4]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3672
			constraints = [
				0:	const_prim(I16)
			]
			prio = 0
			result = 7
			impure = [7]
		}
	]
}
term {
	name = signed_max
	bindings = [
		0: Type	argument(0)
		1: Type	const_prim(I8)
		2: ImmExtend	make_variant(ImmExtend::Sign, [])
		3: u64	const_int(127, u64)
		4: Reg	constructor(imm, [1, 2, 3], 1)
		5: Type	const_prim(I16)
		6: u64	const_int(32767, u64)
		7: Reg	constructor(imm, [5, 2, 6], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3675
			constraints = [
				0:	const_prim(I8)
			]
			prio = 0
			result = 4
			impure = [4]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3676
			constraints = [
				0:	const_prim(I16)
			]
			prio = 0
			result = 7
			impure = [7]
		}
	]
}
term {
	name = fpu_to_int
	bindings = [
		0: FpuToIntOp	argument(0)
		1: Reg	argument(1)
		2: Type	const_prim(I64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::FpuToInt, [0, 3, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3679
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = int_to_fpu
	bindings = [
		0: IntToFpuOp	argument(0)
		1: Reg	argument(1)
		2: Type	const_prim(I8X16)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::IntToFpu, [0, 3, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3687
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = write_pinned_reg
	bindings = [
		0: Reg	argument(0)
		1: PReg	constructor(preg_pinned, [], 1)
		2: SideEffectNoResult	constructor(mov_to_preg, [1, 0], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3703
			constraints = [
			]
			prio = 0
			result = 2
			impure = [1, 2]
		}
	]
}
term {
	name = compute_stack_addr
	bindings = [
		0: StackSlot	argument(0)
		1: Offset32	argument(1)
		2: Type	const_prim(I64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	constructor(abi_stackslot_addr, [3, 0, 1], 2)
		5: Unit	constructor(emit, [4], 3)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3709
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 4, 5]
		}
	]
}
term {
	name = vec_cmp_vc
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Fcmeq, [])
		4: Reg	constructor(vec_rrr, [3, 0, 0, 2], 1)
		5: Reg	constructor(vec_rrr, [3, 1, 1, 2], 2)
		6: VecALUOp	make_variant(VecALUOp::And, [])
		7: Reg	constructor(vec_rrr, [6, 4, 5, 2], 3)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3717
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4, 5, 7]
		}
	]
}
term {
	name = vec_cmp
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: Type	argument(2)
		3: Cond	argument(3)
		4: Option(Type)	constructor(ty_vector_float, [2], 0)
		5: Type	match_some(4)
		6: VectorSize	constructor(vector_size, [2], 1)
		7: Reg	constructor(vec_cmp_vc, [0, 1, 6], 2)
		8: VecMisc2	make_variant(VecMisc2::Not, [])
		9: VectorSize	constructor(vector_size, [2], 3)
		10: Reg	constructor(vec_misc, [8, 7, 9], 4)
		11: VecALUOp	make_variant(VecALUOp::Fcmeq, [])
		12: Reg	constructor(vec_rrr, [11, 0, 1, 6], 2)
		13: Reg	constructor(vec_misc, [8, 12, 9], 4)
		14: VecALUOp	make_variant(VecALUOp::Fcmge, [])
		15: Reg	constructor(vec_rrr, [14, 0, 1, 6], 2)
		16: VecALUOp	make_variant(VecALUOp::Fcmgt, [])
		17: Reg	constructor(vec_rrr, [16, 0, 1, 6], 2)
		18: Reg	constructor(vec_rrr, [16, 1, 0, 6], 2)
		19: Reg	constructor(vec_rrr, [14, 1, 0, 6], 2)
		20: Option(Type)	constructor(ty_vector_not_float, [2], 0)
		21: Type	match_some(20)
		22: VecALUOp	make_variant(VecALUOp::Cmeq, [])
		23: Reg	constructor(vec_rrr, [22, 0, 1, 6], 2)
		24: Reg	constructor(vec_misc, [8, 23, 9], 4)
		25: VecALUOp	make_variant(VecALUOp::Cmge, [])
		26: Reg	constructor(vec_rrr, [25, 0, 1, 6], 2)
		27: VecALUOp	make_variant(VecALUOp::Cmgt, [])
		28: Reg	constructor(vec_rrr, [27, 0, 1, 6], 2)
		29: VecALUOp	make_variant(VecALUOp::Cmhs, [])
		30: Reg	constructor(vec_rrr, [29, 0, 1, 6], 2)
		31: VecALUOp	make_variant(VecALUOp::Cmhi, [])
		32: Reg	constructor(vec_rrr, [31, 0, 1, 6], 2)
		33: Reg	constructor(vec_rrr, [25, 1, 0, 6], 2)
		34: Reg	constructor(vec_rrr, [27, 1, 0, 6], 2)
		35: Reg	constructor(vec_rrr, [29, 1, 0, 6], 2)
		36: Reg	constructor(vec_rrr, [31, 1, 0, 6], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3726
			constraints = [
				3:	variant(Cond::Vc)
				4:	some
			]
			prio = 0
			result = 7
			impure = [6, 7]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3729
			constraints = [
				3:	variant(Cond::Vs)
				4:	some
			]
			prio = 0
			result = 10
			impure = [6, 7, 9, 10]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3739
			constraints = [
				3:	variant(Cond::Eq)
				4:	some
			]
			prio = 0
			result = 12
			impure = [6, 12]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3742
			constraints = [
				3:	variant(Cond::Ne)
				4:	some
			]
			prio = 0
			result = 13
			impure = [6, 12, 9, 13]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3746
			constraints = [
				3:	variant(Cond::Ge)
				4:	some
			]
			prio = 0
			result = 15
			impure = [6, 15]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3749
			constraints = [
				3:	variant(Cond::Gt)
				4:	some
			]
			prio = 0
			result = 17
			impure = [6, 17]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3753
			constraints = [
				3:	variant(Cond::Mi)
				4:	some
			]
			prio = 0
			result = 18
			impure = [6, 18]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3756
			constraints = [
				3:	variant(Cond::Ls)
				4:	some
			]
			prio = 0
			result = 19
			impure = [6, 19]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3761
			constraints = [
				3:	variant(Cond::Eq)
				20:	some
			]
			prio = 1
			result = 23
			impure = [6, 23]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3764
			constraints = [
				3:	variant(Cond::Ne)
				20:	some
			]
			prio = 1
			result = 24
			impure = [6, 23, 9, 24]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3768
			constraints = [
				3:	variant(Cond::Ge)
				20:	some
			]
			prio = 1
			result = 26
			impure = [6, 26]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3771
			constraints = [
				3:	variant(Cond::Gt)
				20:	some
			]
			prio = 1
			result = 28
			impure = [6, 28]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3774
			constraints = [
				3:	variant(Cond::Hs)
				20:	some
			]
			prio = 0
			result = 30
			impure = [6, 30]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3777
			constraints = [
				3:	variant(Cond::Hi)
				20:	some
			]
			prio = 0
			result = 32
			impure = [6, 32]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3781
			constraints = [
				3:	variant(Cond::Le)
				20:	some
			]
			prio = 0
			result = 33
			impure = [6, 33]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3784
			constraints = [
				3:	variant(Cond::Lt)
				20:	some
			]
			prio = 0
			result = 34
			impure = [6, 34]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3787
			constraints = [
				3:	variant(Cond::Ls)
				20:	some
			]
			prio = 1
			result = 35
			impure = [6, 35]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3790
			constraints = [
				3:	variant(Cond::Lo)
				20:	some
			]
			prio = 0
			result = 36
			impure = [6, 36]
		}
	]
}
term {
	name = vanytrue
	bindings = [
		0: Reg	argument(0)
		1: Type	argument(1)
		2: Option(Type)	extractor(ty_vec128, 1)
		3: Type	match_some(2)
		4: VecALUOp	make_variant(VecALUOp::Umaxp, [])
		5: VectorSize	make_variant(VectorSize::Size32x4, [])
		6: Reg	constructor(vec_rrr, [4, 0, 0, 5], 1)
		7: u8	const_int(0, u8)
		8: ScalarSize	make_variant(ScalarSize::Size64, [])
		9: Reg	constructor(mov_from_vec, [6, 7, 8], 2)
		10: OperandSize	make_variant(OperandSize::Size64, [])
		11: Imm12	constructor(u8_into_imm12, [7], 3)
		12: ProducesFlags	constructor(cmp_imm, [10, 9, 11], 4)
		13: Option(Type)	constructor(ty_vec64, [1], 0)
		14: Type	match_some(13)
		15: Reg	constructor(mov_from_vec, [0, 7, 8], 1)
		16: Imm12	constructor(u8_into_imm12, [7], 2)
		17: ProducesFlags	constructor(cmp_imm, [10, 15, 16], 3)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3802
			constraints = [
				2:	some
			]
			prio = 1
			result = 12
			impure = [6, 9, 11, 12]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3806
			constraints = [
				13:	some
			]
			prio = 0
			result = 17
			impure = [15, 16, 17]
		}
	]
}
term {
	name = elf_tls_get_addr
	bindings = [
		0: ExternalName	argument(0)
		1: Type	const_prim(I64)
		2: WritableReg	constructor(temp_writable_reg, [1], 1)
		3: WritableReg	constructor(temp_writable_reg, [1], 2)
		4: BoxExternalName	constructor(box_external_name, [0], 3)
		5: MInst	make_variant(MInst::ElfTlsGetAddr, [4, 2, 3])
		6: Unit	constructor(emit, [5], 4)
		7: Reg	constructor(writable_reg_to_reg, [2], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3815
			constraints = [
			]
			prio = 0
			result = 7
			impure = [2, 3, 4, 6]
		}
	]
}
term {
	name = macho_tls_get_addr
	bindings = [
		0: ExternalName	argument(0)
		1: Type	const_prim(I64)
		2: WritableReg	constructor(temp_writable_reg, [1], 1)
		3: MInst	make_variant(MInst::MachOTlsGetAddr, [0, 2])
		4: Unit	constructor(emit, [3], 2)
		5: Reg	constructor(writable_reg_to_reg, [2], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3822
			constraints = [
			]
			prio = 0
			result = 5
			impure = [2, 4]
		}
	]
}
term {
	name = flags_and_cc
	bindings = [
		0: ProducesFlags	argument(0)
		1: IntCC	argument(1)
		2: FlagsAndCC	make_variant(FlagsAndCC::FlagsAndCC, [0, 1])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3833
			constraints = [
			]
			prio = 0
			result = 2
		}
	]
}
term {
	name = flags_and_cc_to_bool
	bindings = [
		0: FlagsAndCC	argument(0)
		1: ProducesFlags	match_variant(0, FlagsAndCC::FlagsAndCC, flags)
		2: IntCC	match_variant(0, FlagsAndCC::FlagsAndCC, cc)
		3: Cond	constructor(cond_code, [2], 1)
		4: ConsumesFlags	constructor(materialize_bool_result, [3], 2)
		5: ValueRegs	constructor(with_flags, [1, 4], 3)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3837
			constraints = [
				0:	variant(FlagsAndCC::FlagsAndCC)
			]
			prio = 0
			result = 5
			impure = [3, 4, 5]
		}
	]
}
term {
	name = flags_and_cc_flags
	bindings = [
		0: FlagsAndCC	argument(0)
		1: ProducesFlags	match_variant(0, FlagsAndCC::FlagsAndCC, flags)
		2: IntCC	match_variant(0, FlagsAndCC::FlagsAndCC, cc)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3842
			constraints = [
				0:	variant(FlagsAndCC::FlagsAndCC)
			]
			prio = 0
			result = 1
		}
	]
}
term {
	name = flags_and_cc_cc
	bindings = [
		0: FlagsAndCC	argument(0)
		1: ProducesFlags	match_variant(0, FlagsAndCC::FlagsAndCC, flags)
		2: IntCC	match_variant(0, FlagsAndCC::FlagsAndCC, cc)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3846
			constraints = [
				0:	variant(FlagsAndCC::FlagsAndCC)
			]
			prio = 0
			result = 2
		}
	]
}
term {
	name = lower_icmp
	bindings = [
		0: IntCC	argument(0)
		1: Value	argument(1)
		2: Value	argument(2)
		3: Type	argument(3)
		4: Option(Type)	extractor(fits_in_16, 3)
		5: Type	match_some(4)
		6: Option(IntCC)	constructor(signed_cond_code, [0], 0)
		7: IntCC	match_some(6)
		8: Reg	constructor(put_in_reg_sext32, [1], 1)
		9: OperandSize	constructor(operand_size, [5], 2)
		10: Reg	constructor(put_in_reg, [2], 3)
		11: ArgumentExtension	make_variant(ArgumentExtension::Sext, [])
		12: ExtendOp	constructor(lower_extend_op, [5, 11], 4)
		13: ProducesFlags	constructor(cmp_extend, [9, 8, 10, 12], 5)
		14: FlagsAndCC	constructor(flags_and_cc, [13, 0], 6)
		15: Option(Inst)	extractor(def_inst, 2)
		16: Inst	match_some(15)
		17: InstructionData	extractor(inst_data, 16)
		18: Opcode	match_variant(17, InstructionData::UnaryImm, opcode)
		19: Imm64	match_variant(17, InstructionData::UnaryImm, imm)
		20: u64	extractor(u64_from_imm64, 19)
		21: Option(Imm12)	extractor(imm12_from_u64, 20)
		22: Imm12	match_some(21)
		23: Reg	constructor(put_in_reg_zext32, [1], 1)
		24: ProducesFlags	constructor(cmp_imm, [9, 23, 22], 3)
		25: FlagsAndCC	constructor(flags_and_cc, [24, 0], 4)
		26: ArgumentExtension	make_variant(ArgumentExtension::Uext, [])
		27: ExtendOp	constructor(lower_extend_op, [5, 26], 4)
		28: ProducesFlags	constructor(cmp_extend, [9, 23, 10, 27], 5)
		29: FlagsAndCC	constructor(flags_and_cc, [28, 0], 6)
		30: Option(Type)	constructor(ty_int_ref_scalar_64, [3], 0)
		31: Type	match_some(30)
		32: FlagsAndCC	constructor(lower_icmp_const, [0, 1, 20, 3], 1)
		33: OperandSize	constructor(operand_size, [3], 1)
		34: Reg	constructor(put_in_reg, [1], 2)
		35: ProducesFlags	constructor(cmp, [33, 34, 10], 4)
		36: FlagsAndCC	constructor(flags_and_cc, [35, 0], 5)
		37: ProducesFlags	constructor(lower_icmp_i128_eq_ne, [1, 2], 1)
		38: IntCC	make_variant(IntCC::Equal, [])
		39: FlagsAndCC	constructor(flags_and_cc, [37, 38], 2)
		40: IntCC	make_variant(IntCC::NotEqual, [])
		41: FlagsAndCC	constructor(flags_and_cc, [37, 40], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3880
			constraints = [
				4:	some
				6:	some
			]
			prio = 1
			result = 14
			impure = [8, 9, 10, 12, 13, 14]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3884
			constraints = [
				4:	some
				15:	some
				17:	variant(InstructionData::UnaryImm)
				18:	variant(Opcode::Iconst)
				21:	some
			]
			prio = -1
			result = 25
			impure = [23, 9, 24, 25]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3887
			constraints = [
				4:	some
			]
			prio = -2
			result = 29
			impure = [23, 9, 10, 27, 28, 29]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3890
			constraints = [
				15:	some
				17:	variant(InstructionData::UnaryImm)
				18:	variant(Opcode::Iconst)
				30:	some
			]
			prio = -3
			result = 32
			impure = [32]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3893
			constraints = [
				30:	some
			]
			prio = -4
			result = 36
			impure = [33, 34, 10, 35, 36]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3946
			constraints = [
				0:	variant(IntCC::Equal)
				3:	const_prim(I128)
			]
			prio = 0
			result = 39
			impure = [37, 39]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3948
			constraints = [
				0:	variant(IntCC::NotEqual)
				3:	const_prim(I128)
			]
			prio = 0
			result = 41
			impure = [37, 41]
		}
	]
}
term {
	name = lower_icmp_into_reg
	bindings = [
		0: IntCC	argument(0)
		1: Value	argument(1)
		2: Value	argument(2)
		3: Type	argument(3)
		4: Option((u32, u32))	extractor(multi_lane, 3)
		5: (u32, u32)	match_some(4)
		6: u32	match_tuple(5, 0)
		7: u32	match_tuple(5, 1)
		8: Type	argument(4)
		9: Cond	constructor(cond_code, [0], 1)
		10: Reg	constructor(put_in_reg, [1], 2)
		11: Reg	constructor(put_in_reg, [2], 3)
		12: Reg	constructor(vec_cmp, [10, 11, 3, 9], 4)
		13: ValueRegs	constructor(value_reg, [12], 5)
		14: Option(Type)	constructor(ty_int_ref_scalar_64, [3], 0)
		15: Type	match_some(14)
		16: FlagsAndCC	constructor(lower_icmp, [0, 1, 2, 3], 2)
		17: ValueRegs	constructor(flags_and_cc_to_bool, [16], 3)
		18: Type	const_prim(I128)
		19: FlagsAndCC	constructor(lower_icmp, [0, 1, 2, 18], 2)
		20: ValueRegs	constructor(flags_and_cc_to_bool, [19], 3)
		21: IntCC	constructor(intcc_unsigned, [0], 0)
		22: Cond	constructor(cond_code, [21], 1)
		23: Cond	constructor(cond_code, [0], 2)
		24: ValueRegs	constructor(put_in_regs, [1], 3)
		25: ValueRegs	constructor(put_in_regs, [2], 4)
		26: usize	const_int(0, usize)
		27: Reg	constructor(value_regs_get, [24, 26], 5)
		28: usize	const_int(1, usize)
		29: Reg	constructor(value_regs_get, [24, 28], 6)
		30: Reg	constructor(value_regs_get, [25, 26], 7)
		31: Reg	constructor(value_regs_get, [25, 28], 8)
		32: OperandSize	make_variant(OperandSize::Size64, [])
		33: ProducesFlags	constructor(cmp, [32, 27, 30], 9)
		34: ConsumesFlags	constructor(materialize_bool_result, [22], 10)
		35: Reg	constructor(with_flags_reg, [33, 34], 11)
		36: ProducesFlags	constructor(cmp, [32, 29, 31], 12)
		37: ConsumesFlags	constructor(lower_icmp_i128_consumer, [23, 35], 13)
		38: ValueRegs	constructor(with_flags, [36, 37], 14)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3861
			constraints = [
				4:	some
			]
			prio = 1
			result = 13
			impure = [9, 10, 11, 12, 13]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3875
			constraints = [
				14:	some
			]
			prio = -2
			result = 17
			impure = [9, 16, 17]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3923
			constraints = [
				0:	variant(IntCC::Equal)
				3:	const_prim(I128)
				8:	const_prim(I8)
			]
			prio = 0
			result = 20
			impure = [9, 19, 20]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3927
			constraints = [
				0:	variant(IntCC::NotEqual)
				3:	const_prim(I128)
				8:	const_prim(I8)
			]
			prio = 0
			result = 20
			impure = [9, 19, 20]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3956
			constraints = [
				3:	const_prim(I128)
				8:	const_prim(I8)
			]
			prio = -1
			result = 38
			impure = [22, 23, 24, 25, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38]
		}
	]
}
term {
	name = lower_icmp_into_flags
	bindings = [
		0: IntCC	argument(0)
		1: Value	argument(1)
		2: Value	argument(2)
		3: Type	argument(3)
		4: FlagsAndCC	constructor(lower_icmp, [0, 1, 2, 3], 1)
		5: Type	const_prim(I128)
		6: Type	const_prim(I8)
		7: ValueRegs	constructor(lower_icmp_into_reg, [0, 1, 2, 5, 6], 1)
		8: usize	const_int(0, usize)
		9: Reg	constructor(value_regs_get, [7, 8], 2)
		10: Type	const_prim(I64)
		11: ImmExtend	make_variant(ImmExtend::Sign, [])
		12: u64	const_int(1, u64)
		13: Reg	constructor(imm, [10, 11, 12], 3)
		14: OperandSize	make_variant(OperandSize::Size64, [])
		15: ProducesFlags	constructor(cmp, [14, 9, 13], 4)
		16: FlagsAndCC	constructor(flags_and_cc, [15, 0], 5)
		17: ImmExtend	make_variant(ImmExtend::Zero, [])
		18: Reg	constructor(imm, [10, 17, 12], 3)
		19: ProducesFlags	constructor(cmp, [14, 9, 18], 4)
		20: FlagsAndCC	constructor(flags_and_cc, [19, 0], 5)
		21: ProducesFlags	constructor(cmp, [14, 13, 9], 4)
		22: FlagsAndCC	constructor(flags_and_cc, [21, 0], 5)
		23: ProducesFlags	constructor(cmp, [14, 18, 9], 4)
		24: FlagsAndCC	constructor(flags_and_cc, [23, 0], 5)
		25: Reg	constructor(zero_reg, [], 3)
		26: ProducesFlags	constructor(cmp, [14, 9, 25], 4)
		27: FlagsAndCC	constructor(flags_and_cc, [26, 0], 5)
		28: ProducesFlags	constructor(cmp, [14, 25, 9], 4)
		29: FlagsAndCC	constructor(flags_and_cc, [28, 0], 5)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3857
			constraints = [
			]
			prio = -1
			result = 4
			impure = [4]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4030
			constraints = [
				0:	variant(IntCC::SignedGreaterThanOrEqual)
				3:	const_prim(I128)
			]
			prio = 0
			result = 16
			impure = [7, 9, 13, 15, 16]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4035
			constraints = [
				0:	variant(IntCC::UnsignedGreaterThanOrEqual)
				3:	const_prim(I128)
			]
			prio = 0
			result = 20
			impure = [7, 9, 18, 19, 20]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4040
			constraints = [
				0:	variant(IntCC::SignedLessThanOrEqual)
				3:	const_prim(I128)
			]
			prio = 0
			result = 22
			impure = [7, 9, 13, 21, 22]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4045
			constraints = [
				0:	variant(IntCC::UnsignedLessThanOrEqual)
				3:	const_prim(I128)
			]
			prio = 0
			result = 24
			impure = [7, 9, 18, 23, 24]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4051
			constraints = [
				0:	variant(IntCC::SignedGreaterThan)
				3:	const_prim(I128)
			]
			prio = 0
			result = 27
			impure = [7, 9, 25, 26, 27]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4055
			constraints = [
				0:	variant(IntCC::UnsignedGreaterThan)
				3:	const_prim(I128)
			]
			prio = 0
			result = 27
			impure = [7, 9, 25, 26, 27]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4059
			constraints = [
				0:	variant(IntCC::SignedLessThan)
				3:	const_prim(I128)
			]
			prio = 0
			result = 29
			impure = [7, 9, 25, 28, 29]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4063
			constraints = [
				0:	variant(IntCC::UnsignedLessThan)
				3:	const_prim(I128)
			]
			prio = 0
			result = 29
			impure = [7, 9, 25, 28, 29]
		}
	]
}
term {
	name = lower_icmp_const
	bindings = [
		0: IntCC	argument(0)
		1: Value	argument(1)
		2: u64	argument(2)
		3: Type	argument(3)
		4: Option(Type)	constructor(ty_int_ref_scalar_64, [3], 0)
		5: Type	match_some(4)
		6: bool	constructor(u64_is_odd, [2], 0)
		7: u64	const_int(1, u64)
		8: u64	constructor(u64_sub, [2, 7], 0)
		9: Option(Imm12)	extractor(imm12_from_u64, 8)
		10: Imm12	match_some(9)
		11: OperandSize	constructor(operand_size, [3], 1)
		12: Reg	constructor(put_in_reg, [1], 2)
		13: ProducesFlags	constructor(cmp_imm, [11, 12, 10], 3)
		14: IntCC	make_variant(IntCC::UnsignedGreaterThan, [])
		15: FlagsAndCC	constructor(flags_and_cc, [13, 14], 4)
		16: IntCC	make_variant(IntCC::SignedGreaterThan, [])
		17: FlagsAndCC	constructor(flags_and_cc, [13, 16], 4)
		18: Option(Imm12)	extractor(imm12_from_u64, 2)
		19: Imm12	match_some(18)
		20: ProducesFlags	constructor(cmp_imm, [11, 12, 19], 3)
		21: FlagsAndCC	constructor(flags_and_cc, [20, 0], 4)
		22: ImmExtend	make_variant(ImmExtend::Zero, [])
		23: Reg	constructor(imm, [3, 22, 2], 3)
		24: ProducesFlags	constructor(cmp, [11, 12, 23], 4)
		25: FlagsAndCC	constructor(flags_and_cc, [24, 0], 5)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3903
			constraints = [
				0:	variant(IntCC::UnsignedGreaterThanOrEqual)
				4:	some
				6:	const_prim(true)
				9:	some
			]
			prio = 0
			result = 15
			impure = [11, 12, 13, 15]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3908
			constraints = [
				0:	variant(IntCC::SignedGreaterThanOrEqual)
				4:	some
				6:	const_prim(true)
				9:	some
			]
			prio = 0
			result = 17
			impure = [11, 12, 13, 17]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3914
			constraints = [
				4:	some
				18:	some
			]
			prio = -1
			result = 21
			impure = [11, 12, 20, 21]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3917
			constraints = [
				4:	some
			]
			prio = -2
			result = 25
			impure = [11, 12, 23, 24, 25]
		}
	]
}
term {
	name = lower_extend_op
	bindings = [
		0: Type	argument(0)
		1: ArgumentExtension	argument(1)
		2: ExtendOp	make_variant(ExtendOp::SXTB, [])
		3: ExtendOp	make_variant(ExtendOp::SXTH, [])
		4: ExtendOp	make_variant(ExtendOp::UXTB, [])
		5: ExtendOp	make_variant(ExtendOp::UXTH, [])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3869
			constraints = [
				0:	const_prim(I8)
				1:	variant(ArgumentExtension::Sext)
			]
			prio = 0
			result = 2
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3870
			constraints = [
				0:	const_prim(I16)
				1:	variant(ArgumentExtension::Sext)
			]
			prio = 0
			result = 3
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3871
			constraints = [
				0:	const_prim(I8)
				1:	variant(ArgumentExtension::Uext)
			]
			prio = 0
			result = 4
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3872
			constraints = [
				0:	const_prim(I16)
				1:	variant(ArgumentExtension::Uext)
			]
			prio = 0
			result = 5
		}
	]
}
term {
	name = lower_icmp_i128_eq_ne
	bindings = [
		0: Value	argument(0)
		1: Value	argument(1)
		2: ValueRegs	constructor(put_in_regs, [0], 1)
		3: ValueRegs	constructor(put_in_regs, [1], 2)
		4: usize	const_int(0, usize)
		5: Reg	constructor(value_regs_get, [2, 4], 3)
		6: usize	const_int(1, usize)
		7: Reg	constructor(value_regs_get, [2, 6], 4)
		8: Reg	constructor(value_regs_get, [3, 4], 5)
		9: Reg	constructor(value_regs_get, [3, 6], 6)
		10: OperandSize	make_variant(OperandSize::Size64, [])
		11: ProducesFlags	constructor(cmp, [10, 5, 8], 7)
		12: bool	const_prim(false)
		13: NZCV	constructor(nzcv, [12, 12, 12, 12], 8)
		14: Cond	make_variant(Cond::Eq, [])
		15: ProducesFlags	constructor(ccmp, [10, 7, 9, 13, 14, 11], 9)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3935
			constraints = [
			]
			prio = 0
			result = 15
			impure = [2, 3, 5, 7, 8, 9, 11, 13, 15]
		}
	]
}
term {
	name = lower_icmp_i128_consumer
	bindings = [
		0: Cond	argument(0)
		1: Reg	argument(1)
		2: Type	const_prim(I64)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: WritableReg	constructor(temp_writable_reg, [2], 2)
		5: MInst	make_variant(MInst::CSet, [3, 0])
		6: Cond	make_variant(Cond::Eq, [])
		7: Reg	constructor(writable_reg_to_reg, [3], 0)
		8: MInst	make_variant(MInst::CSel, [4, 6, 1, 7])
		9: Reg	constructor(writable_reg_to_reg, [4], 0)
		10: ValueRegs	constructor(value_reg, [9], 3)
		11: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs, [5, 8, 10])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3971
			constraints = [
			]
			prio = 0
			result = 11
			impure = [3, 4, 10]
		}
	]
}
term {
	name = lower_bmask
	bindings = [
		0: Type	argument(0)
		1: Option(Type)	extractor(fits_in_64, 0)
		2: Type	match_some(1)
		3: Type	argument(1)
		4: Option(Type)	extractor(ty_32_or_64, 3)
		5: Type	match_some(4)
		6: ValueRegs	argument(2)
		7: OperandSize	constructor(operand_size, [5], 1)
		8: usize	const_int(0, usize)
		9: Reg	constructor(value_regs_get, [6, 8], 2)
		10: u8	const_int(0, u8)
		11: Imm12	constructor(u8_into_imm12, [10], 3)
		12: ProducesFlags	constructor(cmp_imm, [7, 9, 11], 4)
		13: Cond	make_variant(Cond::Ne, [])
		14: ConsumesFlags	constructor(csetm, [13], 5)
		15: Reg	constructor(with_flags_reg, [12, 14], 6)
		16: ValueRegs	constructor(value_reg, [15], 7)
		17: Reg	constructor(value_regs_get, [6, 8], 1)
		18: usize	const_int(1, usize)
		19: Reg	constructor(value_regs_get, [6, 18], 2)
		20: Type	const_prim(I64)
		21: Reg	constructor(orr, [20, 17, 19], 3)
		22: ValueRegs	constructor(value_reg, [21], 4)
		23: ValueRegs	constructor(lower_bmask, [2, 20, 22], 5)
		24: ValueRegs	constructor(lower_bmask, [20, 3, 6], 1)
		25: Reg	constructor(value_regs_get, [24, 8], 2)
		26: ValueRegs	constructor(value_regs, [25, 25], 3)
		27: Option(Type)	extractor(fits_in_16, 3)
		28: Type	match_some(27)
		29: Type	const_prim(I32)
		30: u64	constructor(ty_mask, [28], 0)
		31: Option(ImmLogic)	constructor(imm_logic_from_u64, [29, 30], 0)
		32: ImmLogic	match_some(31)
		33: Reg	constructor(and_imm, [29, 17, 32], 2)
		34: ValueRegs	constructor(value_reg, [33], 3)
		35: ValueRegs	constructor(lower_bmask, [0, 29, 34], 4)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3986
			constraints = [
				1:	some
				4:	some
			]
			prio = 0
			result = 16
			impure = [7, 9, 11, 12, 14, 15, 16]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 3999
			constraints = [
				1:	some
				3:	const_prim(I128)
			]
			prio = 1
			result = 23
			impure = [17, 19, 21, 22, 23]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4008
			constraints = [
				0:	const_prim(I128)
			]
			prio = 2
			result = 26
			impure = [24, 25, 26]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4020
			constraints = [
				27:	some
				31:	some
			]
			prio = 3
			result = 35
			impure = [17, 33, 34, 35]
		}
	]
}
term {
	name = lower_select
	bindings = [
		0: ProducesFlags	argument(0)
		1: Cond	argument(1)
		2: Type	argument(2)
		3: Option(Type)	extractor(ty_scalar_float, 2)
		4: Type	match_some(3)
		5: Value	argument(3)
		6: Value	argument(4)
		7: Reg	constructor(put_in_reg, [5], 1)
		8: Reg	constructor(put_in_reg, [6], 2)
		9: ConsumesFlags	constructor(fpu_csel, [4, 1, 7, 8], 3)
		10: ValueRegs	constructor(with_flags, [0, 9], 4)
		11: Option(Type)	extractor(ty_vec128, 2)
		12: Type	match_some(11)
		13: ConsumesFlags	constructor(vec_csel, [1, 7, 8], 3)
		14: ValueRegs	constructor(with_flags, [0, 13], 4)
		15: Option(Type)	constructor(ty_vec64, [2], 0)
		16: Type	match_some(15)
		17: Type	const_prim(F64)
		18: ConsumesFlags	constructor(fpu_csel, [17, 1, 7, 8], 3)
		19: ValueRegs	constructor(with_flags, [0, 18], 4)
		20: Type	const_prim(I64)
		21: WritableReg	constructor(temp_writable_reg, [20], 1)
		22: WritableReg	constructor(temp_writable_reg, [20], 2)
		23: ValueRegs	constructor(put_in_regs, [5], 3)
		24: ValueRegs	constructor(put_in_regs, [6], 4)
		25: usize	const_int(0, usize)
		26: Reg	constructor(value_regs_get, [23, 25], 5)
		27: usize	const_int(1, usize)
		28: Reg	constructor(value_regs_get, [23, 27], 6)
		29: Reg	constructor(value_regs_get, [24, 25], 7)
		30: Reg	constructor(value_regs_get, [24, 27], 8)
		31: MInst	make_variant(MInst::CSel, [21, 1, 26, 29])
		32: MInst	make_variant(MInst::CSel, [22, 1, 28, 30])
		33: Reg	constructor(writable_reg_to_reg, [21], 0)
		34: Reg	constructor(writable_reg_to_reg, [22], 0)
		35: ValueRegs	constructor(value_regs, [33, 34], 9)
		36: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs, [31, 32, 35])
		37: ValueRegs	constructor(with_flags, [0, 36], 10)
		38: Option(Type)	constructor(ty_int_ref_scalar_64, [2], 0)
		39: Type	match_some(38)
		40: ConsumesFlags	constructor(csel, [1, 7, 8], 3)
		41: ValueRegs	constructor(with_flags, [0, 40], 4)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4070
			constraints = [
				3:	some
			]
			prio = 2
			result = 10
			impure = [7, 8, 9, 10]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4072
			constraints = [
				11:	some
			]
			prio = 3
			result = 14
			impure = [7, 8, 13, 14]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4074
			constraints = [
				15:	some
			]
			prio = 0
			result = 19
			impure = [7, 8, 18, 19]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4077
			constraints = [
				2:	const_prim(I128)
			]
			prio = 4
			result = 37
			impure = [21, 22, 23, 24, 26, 28, 29, 30, 35, 37]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4091
			constraints = [
				38:	some
			]
			prio = 1
			result = 41
			impure = [7, 8, 40, 41]
		}
	]
}
term {
	name = aarch64_jump
	bindings = [
		0: BranchTarget	argument(0)
		1: MInst	make_variant(MInst::Jump, [0])
		2: SideEffectNoResult	make_variant(SideEffectNoResult::Inst, [1])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4097
			constraints = [
			]
			prio = 0
			result = 2
		}
	]
}
term {
	name = jt_sequence
	bindings = [
		0: Reg	argument(0)
		1: MachLabel	argument(1)
		2: BoxVecMachLabel	argument(2)
		3: Type	const_prim(I64)
		4: WritableReg	constructor(temp_writable_reg, [3], 1)
		5: WritableReg	constructor(temp_writable_reg, [3], 2)
		6: MInst	make_variant(MInst::JTSequence, [1, 2, 0, 4, 5])
		7: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsSideEffect, [6])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4119
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4, 5]
		}
	]
}
term {
	name = cond_br
	bindings = [
		0: BranchTarget	argument(0)
		1: BranchTarget	argument(1)
		2: CondBrKind	argument(2)
		3: MInst	make_variant(MInst::CondBr, [0, 1, 2])
		4: ConsumesFlags	make_variant(ConsumesFlags::ConsumesFlagsSideEffect, [3])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4127
			constraints = [
			]
			prio = 0
			result = 4
		}
	]
}
term {
	name = test_branch
	bindings = [
		0: TestBitAndBranchKind	argument(0)
		1: BranchTarget	argument(1)
		2: BranchTarget	argument(2)
		3: Reg	argument(3)
		4: u8	argument(4)
		5: MInst	make_variant(MInst::TestBitAndBranch, [0, 1, 2, 3, 4])
		6: SideEffectNoResult	make_variant(SideEffectNoResult::Inst, [5])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4133
			constraints = [
			]
			prio = 0
			result = 6
		}
	]
}
term {
	name = tbnz
	bindings = [
		0: BranchTarget	argument(0)
		1: BranchTarget	argument(1)
		2: Reg	argument(2)
		3: u8	argument(3)
		4: TestBitAndBranchKind	make_variant(TestBitAndBranchKind::NZ, [])
		5: SideEffectNoResult	constructor(test_branch, [4, 0, 1, 2, 3], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4138
			constraints = [
			]
			prio = 0
			result = 5
			impure = [5]
		}
	]
}
term {
	name = tbz
	bindings = [
		0: BranchTarget	argument(0)
		1: BranchTarget	argument(1)
		2: Reg	argument(2)
		3: u8	argument(3)
		4: TestBitAndBranchKind	make_variant(TestBitAndBranchKind::Z, [])
		5: SideEffectNoResult	constructor(test_branch, [4, 0, 1, 2, 3], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4143
			constraints = [
			]
			prio = 0
			result = 5
			impure = [5]
		}
	]
}
term {
	name = mov_to_nzcv
	bindings = [
		0: Reg	argument(0)
		1: MInst	make_variant(MInst::MovToNZCV, [0])
		2: ProducesFlags	make_variant(ProducesFlags::ProducesFlagsSideEffect, [1])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4148
			constraints = [
			]
			prio = 0
			result = 2
		}
	]
}
term {
	name = emit_island
	bindings = [
		0: CodeOffset	argument(0)
		1: MInst	make_variant(MInst::EmitIsland, [0])
		2: SideEffectNoResult	make_variant(SideEffectNoResult::Inst, [1])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4154
			constraints = [
			]
			prio = 0
			result = 2
		}
	]
}
term {
	name = br_table_impl
	bindings = [
		0: u64	argument(0)
		1: Option(Imm12)	extractor(imm12_from_u64, 0)
		2: Imm12	match_some(1)
		3: Reg	argument(1)
		4: MachLabel	argument(2)
		5: BoxVecMachLabel	argument(3)
		6: OperandSize	make_variant(OperandSize::Size32, [])
		7: ProducesFlags	constructor(cmp_imm, [6, 3, 2], 1)
		8: ConsumesFlags	constructor(jt_sequence, [3, 4, 5], 2)
		9: SideEffectNoResult	constructor(with_flags_side_effect, [7, 8], 3)
		10: Unit	constructor(emit_side_effect, [9], 4)
		11: Type	const_prim(I64)
		12: ImmExtend	make_variant(ImmExtend::Zero, [])
		13: Reg	constructor(imm, [11, 12, 0], 1)
		14: ProducesFlags	constructor(cmp, [6, 3, 13], 2)
		15: ConsumesFlags	constructor(jt_sequence, [3, 4, 5], 3)
		16: SideEffectNoResult	constructor(with_flags_side_effect, [14, 15], 4)
		17: Unit	constructor(emit_side_effect, [16], 5)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4160
			constraints = [
				1:	some
			]
			prio = 0
			result = 10
			impure = [7, 8, 9, 10]
		}
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4164
			constraints = [
			]
			prio = -1
			result = 17
			impure = [13, 14, 15, 16, 17]
		}
	]
}
term {
	name = vec_uzp1
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Uzp1, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4172
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = vec_uzp2
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Uzp2, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4176
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = vec_zip1
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Zip1, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4180
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = vec_zip2
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Zip2, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4184
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = vec_trn1
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Trn1, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4188
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = vec_trn2
	bindings = [
		0: Reg	argument(0)
		1: Reg	argument(1)
		2: VectorSize	argument(2)
		3: VecALUOp	make_variant(VecALUOp::Trn2, [])
		4: Reg	constructor(vec_rrr, [3, 0, 1, 2], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4192
			constraints = [
			]
			prio = 0
			result = 4
			impure = [4]
		}
	]
}
term {
	name = vec_dup_fp_imm
	bindings = [
		0: ASIMDFPModImm	argument(0)
		1: VectorSize	argument(1)
		2: Type	const_prim(I8X16)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::VecDupFPImm, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4208
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = fpu_load64
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Type	const_prim(I8X16)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::FpuLoad64, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4215
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = fpu_load128
	bindings = [
		0: AMode	argument(0)
		1: MemFlags	argument(1)
		2: Type	const_prim(I8X16)
		3: WritableReg	constructor(temp_writable_reg, [2], 1)
		4: MInst	make_variant(MInst::FpuLoad128, [3, 0, 1])
		5: Unit	constructor(emit, [4], 2)
		6: Reg	constructor(writable_reg_to_reg, [3], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst.isle line 4222
			constraints = [
			]
			prio = 0
			result = 6
			impure = [3, 5]
		}
	]
}
term {
	name = fpu_move_128
	bindings = [
		0: Reg	argument(0)
		1: Type	const_prim(I8X16)
		2: WritableReg	constructor(temp_writable_reg, [1], 1)
		3: MInst	make_variant(MInst::FpuMove128, [2, 0])
		4: Unit	constructor(emit, [3], 2)
		5: Reg	constructor(writable_reg_to_reg, [2], 0)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/inst_neon.isle line 4
			constraints = [
			]
			prio = 0
			result = 5
			impure = [2, 4]
		}
	]
}
term {
	name = lower
	bindings = [
		0: Inst	argument(0)
		1: Option(Value)	extractor(first_result, 0)
		2: Value	match_some(1)
		3: Type	extractor(value_type, 2)
		4: InstructionData	extractor(inst_data, 0)
		5: Opcode	match_variant(4, InstructionData::UnaryImm, opcode)
		6: Imm64	match_variant(4, InstructionData::UnaryImm, imm)
		7: u64	extractor(u64_from_imm64, 6)
		8: ImmExtend	make_variant(ImmExtend::Zero, [])
		9: Reg	constructor(imm, [3, 8, 7], 1)
		10: InstOutput	constructor(output_reg, [9], 2)
		11: Opcode	match_variant(4, InstructionData::NullAry, opcode)
		12: u64	const_int(0, u64)
		13: Reg	constructor(imm, [3, 8, 12], 1)
		14: InstOutput	constructor(output_reg, [13], 2)
		15: Opcode	match_variant(4, InstructionData::UnaryIeee32, opcode)
		16: Ieee32	match_variant(4, InstructionData::UnaryIeee32, imm)
		17: u32	extractor(u32_from_ieee32, 16)
		18: Reg	constructor(constant_f32, [17], 1)
		19: InstOutput	constructor(output_reg, [18], 2)
		20: Opcode	match_variant(4, InstructionData::UnaryIeee64, opcode)
		21: Ieee64	match_variant(4, InstructionData::UnaryIeee64, imm)
		22: u64	extractor(u64_from_ieee64, 21)
		23: Reg	constructor(constant_f64, [22], 1)
		24: InstOutput	constructor(output_reg, [23], 2)
		25: Reg	constructor(invalid_reg, [], 1)
		26: InstOutput	constructor(output_reg, [25], 2)
		27: Option(Type)	extractor(fits_in_64, 3)
		28: Type	match_some(27)
		29: Opcode	match_variant(4, InstructionData::Binary, opcode)
		30: ValueArray2	match_variant(4, InstructionData::Binary, args)
		31: (Value, Value)	extractor(value_array_2, 30)
		32: Value	match_tuple(31, 0)
		33: Value	match_tuple(31, 1)
		34: Reg	constructor(put_in_reg, [32], 1)
		35: Reg	constructor(put_in_reg, [33], 2)
		36: Reg	constructor(add, [28, 34, 35], 3)
		37: InstOutput	constructor(output_reg, [36], 4)
		38: Option(Inst)	extractor(def_inst, 33)
		39: Inst	match_some(38)
		40: InstructionData	extractor(inst_data, 39)
		41: Opcode	match_variant(40, InstructionData::UnaryImm, opcode)
		42: Imm64	match_variant(40, InstructionData::UnaryImm, imm)
		43: u64	extractor(u64_from_imm64, 42)
		44: Option(Imm12)	extractor(imm12_from_u64, 43)
		45: Imm12	match_some(44)
		46: Reg	constructor(add_imm, [28, 34, 45], 2)
		47: InstOutput	constructor(output_reg, [46], 3)
		48: Option(Inst)	extractor(def_inst, 32)
		49: Inst	match_some(48)
		50: InstructionData	extractor(inst_data, 49)
		51: Opcode	match_variant(50, InstructionData::UnaryImm, opcode)
		52: Imm64	match_variant(50, InstructionData::UnaryImm, imm)
		53: u64	extractor(u64_from_imm64, 52)
		54: Option(Imm12)	extractor(imm12_from_u64, 53)
		55: Imm12	match_some(54)
		56: Reg	constructor(put_in_reg, [33], 1)
		57: Reg	constructor(add_imm, [28, 56, 55], 2)
		58: InstOutput	constructor(output_reg, [57], 3)
		59: Option(Imm12)	constructor(imm12_from_negated_value, [33], 0)
		60: Imm12	match_some(59)
		61: Reg	constructor(sub_imm, [28, 34, 60], 2)
		62: InstOutput	constructor(output_reg, [61], 3)
		63: Option(Imm12)	constructor(imm12_from_negated_value, [32], 0)
		64: Imm12	match_some(63)
		65: Reg	constructor(sub_imm, [28, 56, 64], 2)
		66: InstOutput	constructor(output_reg, [65], 3)
		67: Option(ExtendedValue)	extractor(extended_value_from_value, 33)
		68: ExtendedValue	match_some(67)
		69: Reg	constructor(add_extend, [28, 34, 68], 2)
		70: InstOutput	constructor(output_reg, [69], 3)
		71: Option(ExtendedValue)	extractor(extended_value_from_value, 32)
		72: ExtendedValue	match_some(71)
		73: Reg	constructor(add_extend, [28, 56, 72], 2)
		74: InstOutput	constructor(output_reg, [73], 3)
		75: Opcode	match_variant(40, InstructionData::Binary, opcode)
		76: ValueArray2	match_variant(40, InstructionData::Binary, args)
		77: (Value, Value)	extractor(value_array_2, 76)
		78: Value	match_tuple(77, 0)
		79: Value	match_tuple(77, 1)
		80: Option(Inst)	extractor(def_inst, 79)
		81: Inst	match_some(80)
		82: InstructionData	extractor(inst_data, 81)
		83: Opcode	match_variant(82, InstructionData::UnaryImm, opcode)
		84: Imm64	match_variant(82, InstructionData::UnaryImm, imm)
		85: Option(ShiftOpAndAmt)	constructor(lshl_from_imm64, [28, 84], 0)
		86: ShiftOpAndAmt	match_some(85)
		87: Reg	constructor(put_in_reg, [78], 2)
		88: Reg	constructor(add_shift, [28, 34, 87, 86], 3)
		89: InstOutput	constructor(output_reg, [88], 4)
		90: Opcode	match_variant(50, InstructionData::Binary, opcode)
		91: ValueArray2	match_variant(50, InstructionData::Binary, args)
		92: (Value, Value)	extractor(value_array_2, 91)
		93: Value	match_tuple(92, 0)
		94: Value	match_tuple(92, 1)
		95: Option(Inst)	extractor(def_inst, 94)
		96: Inst	match_some(95)
		97: InstructionData	extractor(inst_data, 96)
		98: Opcode	match_variant(97, InstructionData::UnaryImm, opcode)
		99: Imm64	match_variant(97, InstructionData::UnaryImm, imm)
		100: Option(ShiftOpAndAmt)	constructor(lshl_from_imm64, [28, 99], 0)
		101: ShiftOpAndAmt	match_some(100)
		102: Reg	constructor(put_in_reg, [93], 2)
		103: Reg	constructor(add_shift, [28, 56, 102, 101], 3)
		104: InstOutput	constructor(output_reg, [103], 4)
		105: Reg	constructor(put_in_reg, [78], 1)
		106: Reg	constructor(put_in_reg, [79], 2)
		107: Reg	constructor(put_in_reg, [32], 3)
		108: Reg	constructor(madd, [28, 105, 106, 107], 4)
		109: InstOutput	constructor(output_reg, [108], 5)
		110: Reg	constructor(put_in_reg, [93], 1)
		111: Reg	constructor(put_in_reg, [94], 2)
		112: Reg	constructor(put_in_reg, [33], 3)
		113: Reg	constructor(madd, [28, 110, 111, 112], 4)
		114: InstOutput	constructor(output_reg, [113], 5)
		115: Reg	constructor(msub, [28, 105, 106, 107], 4)
		116: InstOutput	constructor(output_reg, [115], 5)
		117: Option((u32, u32))	extractor(multi_lane, 3)
		118: (u32, u32)	match_some(117)
		119: u32	match_tuple(118, 0)
		120: u32	match_tuple(118, 1)
		121: VectorSize	constructor(vector_size, [3], 3)
		122: Reg	constructor(add_vec, [34, 35, 121], 4)
		123: InstOutput	constructor(output_reg, [122], 5)
		124: ValueRegs	constructor(put_in_regs, [32], 1)
		125: usize	const_int(0, usize)
		126: Reg	constructor(value_regs_get, [124, 125], 2)
		127: usize	const_int(1, usize)
		128: Reg	constructor(value_regs_get, [124, 127], 3)
		129: ValueRegs	constructor(put_in_regs, [33], 4)
		130: Reg	constructor(value_regs_get, [129, 125], 5)
		131: Reg	constructor(value_regs_get, [129, 127], 6)
		132: Type	const_prim(I64)
		133: ProducesFlags	constructor(add_with_flags_paired, [132, 126, 130], 7)
		134: ConsumesFlags	constructor(adc_paired, [132, 128, 131], 8)
		135: ValueRegs	constructor(with_flags, [133, 134], 9)
		136: InstOutput	constructor(output, [135], 10)
		137: Opcode	match_variant(4, InstructionData::Shuffle, opcode)
		138: ValueArray2	match_variant(4, InstructionData::Shuffle, args)
		139: Immediate	match_variant(4, InstructionData::Shuffle, imm)
		140: (Value, Value)	extractor(value_array_2, 138)
		141: Value	match_tuple(140, 0)
		142: Value	match_tuple(140, 1)
		143: Option(u8)	extractor(shuffle_dup8_from_imm, 139)
		144: u8	match_some(143)
		145: Reg	constructor(put_in_reg, [141], 1)
		146: VectorSize	make_variant(VectorSize::Size8x16, [])
		147: Reg	constructor(vec_dup_from_fpu, [145, 146, 144], 2)
		148: InstOutput	constructor(output_reg, [147], 3)
		149: Option(u8)	extractor(shuffle_dup16_from_imm, 139)
		150: u8	match_some(149)
		151: VectorSize	make_variant(VectorSize::Size16x8, [])
		152: Reg	constructor(vec_dup_from_fpu, [145, 151, 150], 2)
		153: InstOutput	constructor(output_reg, [152], 3)
		154: Option(u8)	extractor(shuffle_dup32_from_imm, 139)
		155: u8	match_some(154)
		156: VectorSize	make_variant(VectorSize::Size32x4, [])
		157: Reg	constructor(vec_dup_from_fpu, [145, 156, 155], 2)
		158: InstOutput	constructor(output_reg, [157], 3)
		159: Option(u8)	extractor(shuffle_dup64_from_imm, 139)
		160: u8	match_some(159)
		161: VectorSize	make_variant(VectorSize::Size64x2, [])
		162: Reg	constructor(vec_dup_from_fpu, [145, 161, 160], 2)
		163: InstOutput	constructor(output_reg, [162], 3)
		164: Option(u8)	extractor(vec_extract_imm4_from_immediate, 139)
		165: u8	match_some(164)
		166: Reg	constructor(put_in_reg, [142], 2)
		167: Reg	constructor(vec_extract, [145, 166, 165], 3)
		168: InstOutput	constructor(output_reg, [167], 4)
		169: Option(u128)	extractor(u128_from_immediate, 139)
		170: u128	match_some(169)
		171: Reg	constructor(vec_uzp1, [145, 166, 146], 3)
		172: InstOutput	constructor(output_reg, [171], 4)
		173: Reg	constructor(vec_uzp2, [145, 166, 146], 3)
		174: InstOutput	constructor(output_reg, [173], 4)
		175: Reg	constructor(vec_uzp1, [145, 166, 151], 3)
		176: InstOutput	constructor(output_reg, [175], 4)
		177: Reg	constructor(vec_uzp2, [145, 166, 151], 3)
		178: InstOutput	constructor(output_reg, [177], 4)
		179: Reg	constructor(vec_uzp1, [145, 166, 156], 3)
		180: InstOutput	constructor(output_reg, [179], 4)
		181: Reg	constructor(vec_uzp2, [145, 166, 156], 3)
		182: InstOutput	constructor(output_reg, [181], 4)
		183: Reg	constructor(vec_uzp1, [145, 166, 161], 3)
		184: InstOutput	constructor(output_reg, [183], 4)
		185: Reg	constructor(vec_uzp2, [145, 166, 161], 3)
		186: InstOutput	constructor(output_reg, [185], 4)
		187: Reg	constructor(vec_zip1, [145, 166, 146], 3)
		188: InstOutput	constructor(output_reg, [187], 4)
		189: Reg	constructor(vec_zip2, [145, 166, 146], 3)
		190: InstOutput	constructor(output_reg, [189], 4)
		191: Reg	constructor(vec_zip1, [145, 166, 151], 3)
		192: InstOutput	constructor(output_reg, [191], 4)
		193: Reg	constructor(vec_zip2, [145, 166, 151], 3)
		194: InstOutput	constructor(output_reg, [193], 4)
		195: Reg	constructor(vec_zip1, [145, 166, 156], 3)
		196: InstOutput	constructor(output_reg, [195], 4)
		197: Reg	constructor(vec_zip2, [145, 166, 156], 3)
		198: InstOutput	constructor(output_reg, [197], 4)
		199: Reg	constructor(vec_trn1, [145, 166, 146], 3)
		200: InstOutput	constructor(output_reg, [199], 4)
		201: Reg	constructor(vec_trn2, [145, 166, 146], 3)
		202: InstOutput	constructor(output_reg, [201], 4)
		203: Reg	constructor(vec_trn1, [145, 166, 151], 3)
		204: InstOutput	constructor(output_reg, [203], 4)
		205: Reg	constructor(vec_trn2, [145, 166, 151], 3)
		206: InstOutput	constructor(output_reg, [205], 4)
		207: Reg	constructor(vec_trn1, [145, 166, 156], 3)
		208: InstOutput	constructor(output_reg, [207], 4)
		209: Reg	constructor(vec_trn2, [145, 166, 156], 3)
		210: InstOutput	constructor(output_reg, [209], 4)
		211: Reg	constructor(rev16, [145, 146], 2)
		212: InstOutput	constructor(output_reg, [211], 3)
		213: Reg	constructor(rev32, [145, 146], 2)
		214: InstOutput	constructor(output_reg, [213], 3)
		215: Reg	constructor(rev32, [145, 151], 2)
		216: InstOutput	constructor(output_reg, [215], 3)
		217: Reg	constructor(rev64, [145, 146], 2)
		218: InstOutput	constructor(output_reg, [217], 3)
		219: Reg	constructor(rev64, [145, 151], 2)
		220: InstOutput	constructor(output_reg, [219], 3)
		221: Reg	constructor(rev64, [145, 156], 2)
		222: InstOutput	constructor(output_reg, [221], 3)
		223: Reg	constructor(constant_f128, [170], 1)
		224: Reg	constructor(put_in_reg, [141], 2)
		225: Reg	constructor(put_in_reg, [142], 3)
		226: Reg	constructor(vec_tbl2, [224, 225, 223, 3], 4)
		227: InstOutput	constructor(output_reg, [226], 5)
		228: Reg	constructor(vec_tbl, [34, 35], 3)
		229: InstOutput	constructor(output_reg, [228], 4)
		230: Opcode	match_variant(4, InstructionData::Unary, opcode)
		231: Value	match_variant(4, InstructionData::Unary, arg)
		232: Type	extractor(value_type, 231)
		233: ValueRegs	constructor(put_in_regs, [231], 1)
		234: Reg	constructor(value_regs_get, [233, 125], 2)
		235: ValueRegs	constructor(value_reg, [234], 3)
		236: Reg	constructor(value_regs_get, [233, 127], 4)
		237: ValueRegs	constructor(value_reg, [236], 5)
		238: InstOutput	constructor(output_pair, [235, 237], 6)
		239: ValueRegs	constructor(value_regs, [34, 35], 3)
		240: InstOutput	constructor(output, [239], 4)
		241: Reg	constructor(put_in_reg, [231], 1)
		242: ScalarSize	make_variant(ScalarSize::Size32, [])
		243: Reg	constructor(fpu_extend, [241, 242], 2)
		244: InstOutput	constructor(output_reg, [243], 3)
		245: ScalarSize	make_variant(ScalarSize::Size64, [])
		246: Reg	constructor(fpu_extend, [241, 245], 2)
		247: InstOutput	constructor(output_reg, [246], 3)
		248: Reg	constructor(mov_to_fpu, [241, 245], 2)
		249: InstOutput	constructor(output_reg, [248], 3)
		250: Option(Type)	extractor(int_fits_in_32, 232)
		251: Type	match_some(250)
		252: Reg	constructor(put_in_reg_zext32, [231], 1)
		253: Reg	constructor(mov_to_fpu, [252, 242], 2)
		254: InstOutput	constructor(output_reg, [253], 3)
		255: Option((u32, u32))	extractor(multi_lane, 232)
		256: (u32, u32)	match_some(255)
		257: u32	match_tuple(256, 0)
		258: u32	match_tuple(256, 1)
		259: Reg	constructor(cmeq0, [241, 161], 2)
		260: Reg	constructor(addp, [259, 259, 161], 3)
		261: ProducesFlags	constructor(fpu_cmp, [245, 260, 260], 4)
		262: Cond	make_variant(Cond::Eq, [])
		263: ConsumesFlags	constructor(materialize_bool_result, [262], 5)
		264: ValueRegs	constructor(with_flags, [261, 263], 6)
		265: InstOutput	constructor(output, [264], 7)
		266: u8	const_int(0, u8)
		267: Reg	constructor(mov_from_vec, [241, 266, 245], 2)
		268: OperandSize	make_variant(OperandSize::Size64, [])
		269: Reg	constructor(zero_reg, [], 3)
		270: u64	const_int(32, u64)
		271: ProducesFlags	constructor(cmp_rr_shift, [268, 269, 267, 270], 4)
		272: OperandSize	make_variant(OperandSize::Size32, [])
		273: UImm5	constructor(u8_into_uimm5, [266], 5)
		274: bool	const_prim(false)
		275: bool	const_prim(true)
		276: NZCV	constructor(nzcv, [274, 275, 274, 274], 6)
		277: Cond	make_variant(Cond::Ne, [])
		278: ConsumesFlags	constructor(ccmp_imm, [272, 267, 273, 276, 277], 7)
		279: ValueRegs	constructor(with_flags, [271, 278], 8)
		280: InstOutput	constructor(output, [279], 9)
		281: Option(Type)	extractor(lane_fits_in_32, 232)
		282: Type	match_some(281)
		283: Option(Type)	constructor(not_vec32x2, [282], 0)
		284: Type	match_some(283)
		285: VecLanesOp	make_variant(VecLanesOp::Uminv, [])
		286: VectorSize	constructor(vector_size, [282], 2)
		287: Reg	constructor(vec_lanes, [285, 241, 286], 3)
		288: Reg	constructor(mov_from_vec, [287, 266, 245], 4)
		289: Imm12	constructor(u8_into_imm12, [266], 5)
		290: ProducesFlags	constructor(cmp_imm, [268, 288, 289], 6)
		291: ConsumesFlags	constructor(materialize_bool_result, [277], 7)
		292: ValueRegs	constructor(with_flags, [290, 291], 8)
		293: InstOutput	constructor(output, [292], 9)
		294: ProducesFlags	constructor(vanytrue, [241, 232], 2)
		295: ConsumesFlags	constructor(materialize_bool_result, [277], 3)
		296: ValueRegs	constructor(with_flags, [294, 295], 4)
		297: InstOutput	constructor(output, [296], 5)
		298: Opcode	match_variant(50, InstructionData::Unary, opcode)
		299: Value	match_variant(50, InstructionData::Unary, arg)
		300: Opcode	match_variant(40, InstructionData::Unary, opcode)
		301: Value	match_variant(40, InstructionData::Unary, arg)
		302: Reg	constructor(put_in_reg, [299], 1)
		303: Reg	constructor(saddlp8, [302], 2)
		304: InstOutput	constructor(output_reg, [303], 3)
		305: Reg	constructor(saddlp16, [302], 2)
		306: InstOutput	constructor(output_reg, [305], 3)
		307: Reg	constructor(uaddlp8, [302], 2)
		308: InstOutput	constructor(output_reg, [307], 3)
		309: Reg	constructor(uaddlp16, [302], 2)
		310: InstOutput	constructor(output_reg, [309], 3)
		311: Reg	constructor(addp, [34, 35, 121], 4)
		312: InstOutput	constructor(output_reg, [311], 5)
		313: VectorSize	constructor(vector_size, [3], 2)
		314: Reg	constructor(vec_abs, [241, 313], 3)
		315: InstOutput	constructor(output_reg, [314], 4)
		316: Reg	constructor(abs, [268, 241], 2)
		317: InstOutput	constructor(output_reg, [316], 3)
		318: Option(Type)	extractor(fits_in_32, 3)
		319: Type	match_some(318)
		320: Reg	constructor(put_in_reg_sext32, [231], 1)
		321: Reg	constructor(abs, [272, 320], 2)
		322: InstOutput	constructor(output_reg, [321], 3)
		323: Reg	constructor(value_regs_get, [233, 127], 3)
		324: u8	const_int(63, u8)
		325: ImmShift	constructor(imm_shift_from_u8, [324], 4)
		326: Reg	constructor(asr_imm, [132, 323, 325], 5)
		327: Reg	constructor(eor, [132, 323, 326], 6)
		328: Reg	constructor(eor, [132, 234, 326], 7)
		329: ProducesFlags	constructor(sub_with_flags_paired, [132, 328, 326], 8)
		330: ConsumesFlags	constructor(sbc_paired, [132, 327, 326], 9)
		331: ValueRegs	constructor(with_flags, [329, 330], 10)
		332: InstOutput	constructor(output, [331], 11)
		333: u64	const_int(1, u64)
		334: Reg	constructor(splat_const, [333, 161], 1)
		335: Reg	constructor(put_in_reg, [32], 2)
		336: Reg	constructor(orr_vec, [335, 112, 161], 4)
		337: Reg	constructor(and_vec, [336, 334, 161], 5)
		338: Reg	constructor(put_in_reg, [32], 6)
		339: u8	const_int(1, u8)
		340: Reg	constructor(ushr_vec_imm, [338, 339, 161], 7)
		341: Reg	constructor(put_in_reg, [33], 8)
		342: Reg	constructor(ushr_vec_imm, [341, 339, 161], 9)
		343: Reg	constructor(add_vec, [340, 342, 161], 10)
		344: Reg	constructor(add_vec, [337, 343, 161], 11)
		345: InstOutput	constructor(output_reg, [344], 12)
		346: Option(Type)	extractor(lane_fits_in_32, 3)
		347: Type	match_some(346)
		348: VecALUOp	make_variant(VecALUOp::Urhadd, [])
		349: VectorSize	constructor(vector_size, [347], 3)
		350: Reg	constructor(vec_rrr, [348, 34, 35, 349], 4)
		351: InstOutput	constructor(output_reg, [350], 5)
		352: VecALUOp	make_variant(VecALUOp::Sqrdmulh, [])
		353: Reg	constructor(vec_rrr, [352, 34, 35, 121], 4)
		354: InstOutput	constructor(output_reg, [353], 5)
		355: VecALUOp	make_variant(VecALUOp::Fadd, [])
		356: Reg	constructor(vec_rrr, [355, 34, 35, 121], 4)
		357: InstOutput	constructor(output_reg, [356], 5)
		358: Option(Type)	extractor(ty_scalar_float, 3)
		359: Type	match_some(358)
		360: FPUOp2	make_variant(FPUOp2::Add, [])
		361: ScalarSize	constructor(scalar_size, [359], 3)
		362: Reg	constructor(fpu_rrr, [360, 34, 35, 361], 4)
		363: InstOutput	constructor(output_reg, [362], 5)
		364: VecALUOp	make_variant(VecALUOp::Fsub, [])
		365: Reg	constructor(vec_rrr, [364, 34, 35, 121], 4)
		366: InstOutput	constructor(output_reg, [365], 5)
		367: FPUOp2	make_variant(FPUOp2::Sub, [])
		368: Reg	constructor(fpu_rrr, [367, 34, 35, 361], 4)
		369: InstOutput	constructor(output_reg, [368], 5)
		370: VecALUOp	make_variant(VecALUOp::Fmul, [])
		371: Reg	constructor(vec_rrr, [370, 34, 35, 121], 4)
		372: InstOutput	constructor(output_reg, [371], 5)
		373: FPUOp2	make_variant(FPUOp2::Mul, [])
		374: Reg	constructor(fpu_rrr, [373, 34, 35, 361], 4)
		375: InstOutput	constructor(output_reg, [374], 5)
		376: VecALUOp	make_variant(VecALUOp::Fdiv, [])
		377: Reg	constructor(vec_rrr, [376, 34, 35, 121], 4)
		378: InstOutput	constructor(output_reg, [377], 5)
		379: FPUOp2	make_variant(FPUOp2::Div, [])
		380: Reg	constructor(fpu_rrr, [379, 34, 35, 361], 4)
		381: InstOutput	constructor(output_reg, [380], 5)
		382: VecALUOp	make_variant(VecALUOp::Fmin, [])
		383: Reg	constructor(vec_rrr, [382, 34, 35, 121], 4)
		384: InstOutput	constructor(output_reg, [383], 5)
		385: FPUOp2	make_variant(FPUOp2::Min, [])
		386: Reg	constructor(fpu_rrr, [385, 34, 35, 361], 4)
		387: InstOutput	constructor(output_reg, [386], 5)
		388: VecALUOp	make_variant(VecALUOp::Fmax, [])
		389: Reg	constructor(vec_rrr, [388, 34, 35, 121], 4)
		390: InstOutput	constructor(output_reg, [389], 5)
		391: FPUOp2	make_variant(FPUOp2::Max, [])
		392: Reg	constructor(fpu_rrr, [391, 34, 35, 361], 4)
		393: InstOutput	constructor(output_reg, [392], 5)
		394: VecMisc2	make_variant(VecMisc2::Fsqrt, [])
		395: Reg	constructor(vec_misc, [394, 241, 313], 3)
		396: InstOutput	constructor(output_reg, [395], 4)
		397: FPUOp1	make_variant(FPUOp1::Sqrt, [])
		398: ScalarSize	constructor(scalar_size, [359], 2)
		399: Reg	constructor(fpu_rr, [397, 241, 398], 3)
		400: InstOutput	constructor(output_reg, [399], 4)
		401: VecMisc2	make_variant(VecMisc2::Fneg, [])
		402: Reg	constructor(vec_misc, [401, 241, 313], 3)
		403: InstOutput	constructor(output_reg, [402], 4)
		404: FPUOp1	make_variant(FPUOp1::Neg, [])
		405: Reg	constructor(fpu_rr, [404, 241, 398], 3)
		406: InstOutput	constructor(output_reg, [405], 4)
		407: VecMisc2	make_variant(VecMisc2::Fabs, [])
		408: Reg	constructor(vec_misc, [407, 241, 313], 3)
		409: InstOutput	constructor(output_reg, [408], 4)
		410: FPUOp1	make_variant(FPUOp1::Abs, [])
		411: Reg	constructor(fpu_rr, [410, 241, 398], 3)
		412: InstOutput	constructor(output_reg, [411], 4)
		413: FPUOp1	make_variant(FPUOp1::Cvt32To64, [])
		414: Reg	constructor(fpu_rr, [413, 241, 242], 2)
		415: InstOutput	constructor(output_reg, [414], 3)
		416: FPUOp1	make_variant(FPUOp1::Cvt64To32, [])
		417: Reg	constructor(fpu_rr, [416, 241, 245], 2)
		418: InstOutput	constructor(output_reg, [417], 3)
		419: VecMisc2	make_variant(VecMisc2::Frintp, [])
		420: Reg	constructor(vec_misc, [419, 241, 313], 3)
		421: InstOutput	constructor(output_reg, [420], 4)
		422: FpuRoundMode	make_variant(FpuRoundMode::Plus32, [])
		423: Reg	constructor(fpu_round, [422, 241], 2)
		424: InstOutput	constructor(output_reg, [423], 3)
		425: FpuRoundMode	make_variant(FpuRoundMode::Plus64, [])
		426: Reg	constructor(fpu_round, [425, 241], 2)
		427: InstOutput	constructor(output_reg, [426], 3)
		428: VecMisc2	make_variant(VecMisc2::Frintm, [])
		429: Reg	constructor(vec_misc, [428, 241, 313], 3)
		430: InstOutput	constructor(output_reg, [429], 4)
		431: FpuRoundMode	make_variant(FpuRoundMode::Minus32, [])
		432: Reg	constructor(fpu_round, [431, 241], 2)
		433: InstOutput	constructor(output_reg, [432], 3)
		434: FpuRoundMode	make_variant(FpuRoundMode::Minus64, [])
		435: Reg	constructor(fpu_round, [434, 241], 2)
		436: InstOutput	constructor(output_reg, [435], 3)
		437: VecMisc2	make_variant(VecMisc2::Frintz, [])
		438: Reg	constructor(vec_misc, [437, 241, 313], 3)
		439: InstOutput	constructor(output_reg, [438], 4)
		440: FpuRoundMode	make_variant(FpuRoundMode::Zero32, [])
		441: Reg	constructor(fpu_round, [440, 241], 2)
		442: InstOutput	constructor(output_reg, [441], 3)
		443: FpuRoundMode	make_variant(FpuRoundMode::Zero64, [])
		444: Reg	constructor(fpu_round, [443, 241], 2)
		445: InstOutput	constructor(output_reg, [444], 3)
		446: VecMisc2	make_variant(VecMisc2::Frintn, [])
		447: Reg	constructor(vec_misc, [446, 241, 313], 3)
		448: InstOutput	constructor(output_reg, [447], 4)
		449: FpuRoundMode	make_variant(FpuRoundMode::Nearest32, [])
		450: Reg	constructor(fpu_round, [449, 241], 2)
		451: InstOutput	constructor(output_reg, [450], 3)
		452: FpuRoundMode	make_variant(FpuRoundMode::Nearest64, [])
		453: Reg	constructor(fpu_round, [452, 241], 2)
		454: InstOutput	constructor(output_reg, [453], 3)
		455: Opcode	match_variant(4, InstructionData::Ternary, opcode)
		456: ValueArray3	match_variant(4, InstructionData::Ternary, args)
		457: (Value, Value, Value)	extractor(value_array_3, 456)
		458: Value	match_tuple(457, 0)
		459: Value	match_tuple(457, 1)
		460: Value	match_tuple(457, 2)
		461: FPUOp3	make_variant(FPUOp3::MAdd, [])
		462: ScalarSize	constructor(scalar_size, [359], 1)
		463: Reg	constructor(put_in_reg, [458], 2)
		464: Reg	constructor(put_in_reg, [459], 3)
		465: Reg	constructor(put_in_reg, [460], 4)
		466: Reg	constructor(fpu_rrrr, [461, 462, 463, 464, 465], 5)
		467: InstOutput	constructor(output_reg, [466], 6)
		468: VecALUModOp	make_variant(VecALUModOp::Fmla, [])
		469: VectorSize	constructor(vector_size, [3], 1)
		470: Reg	constructor(lower_fmla, [468, 458, 459, 460, 469], 2)
		471: InstOutput	constructor(output_reg, [470], 3)
		472: Reg	constructor(fcopy_sign, [34, 35, 3], 3)
		473: InstOutput	constructor(output_reg, [472], 4)
		474: FpuToIntOp	make_variant(FpuToIntOp::F32ToU32, [])
		475: Type	const_prim(F32)
		476: Reg	constructor(fpu_to_int_cvt, [474, 241, 274, 475, 319], 2)
		477: InstOutput	constructor(output_reg, [476], 3)
		478: FpuToIntOp	make_variant(FpuToIntOp::F32ToU64, [])
		479: Reg	constructor(fpu_to_int_cvt, [478, 241, 274, 475, 132], 2)
		480: InstOutput	constructor(output_reg, [479], 3)
		481: FpuToIntOp	make_variant(FpuToIntOp::F64ToU32, [])
		482: Type	const_prim(F64)
		483: Reg	constructor(fpu_to_int_cvt, [481, 241, 274, 482, 319], 2)
		484: InstOutput	constructor(output_reg, [483], 3)
		485: FpuToIntOp	make_variant(FpuToIntOp::F64ToU64, [])
		486: Reg	constructor(fpu_to_int_cvt, [485, 241, 274, 482, 132], 2)
		487: InstOutput	constructor(output_reg, [486], 3)
		488: FpuToIntOp	make_variant(FpuToIntOp::F32ToI32, [])
		489: Reg	constructor(fpu_to_int_cvt, [488, 241, 275, 475, 319], 2)
		490: InstOutput	constructor(output_reg, [489], 3)
		491: FpuToIntOp	make_variant(FpuToIntOp::F32ToI64, [])
		492: Reg	constructor(fpu_to_int_cvt, [491, 241, 275, 475, 132], 2)
		493: InstOutput	constructor(output_reg, [492], 3)
		494: FpuToIntOp	make_variant(FpuToIntOp::F64ToI32, [])
		495: Reg	constructor(fpu_to_int_cvt, [494, 241, 275, 482, 319], 2)
		496: InstOutput	constructor(output_reg, [495], 3)
		497: FpuToIntOp	make_variant(FpuToIntOp::F64ToI64, [])
		498: Reg	constructor(fpu_to_int_cvt, [497, 241, 275, 482, 132], 2)
		499: InstOutput	constructor(output_reg, [498], 3)
		500: VecMisc2	make_variant(VecMisc2::Ucvtf, [])
		501: Reg	constructor(vec_misc, [500, 241, 313], 3)
		502: InstOutput	constructor(output_reg, [501], 4)
		503: Option(Type)	extractor(fits_in_32, 232)
		504: Type	match_some(503)
		505: IntToFpuOp	make_variant(IntToFpuOp::U32ToF32, [])
		506: Reg	constructor(int_to_fpu, [505, 252], 2)
		507: InstOutput	constructor(output_reg, [506], 3)
		508: IntToFpuOp	make_variant(IntToFpuOp::U32ToF64, [])
		509: Reg	constructor(int_to_fpu, [508, 252], 2)
		510: InstOutput	constructor(output_reg, [509], 3)
		511: IntToFpuOp	make_variant(IntToFpuOp::U64ToF32, [])
		512: Reg	constructor(int_to_fpu, [511, 241], 2)
		513: InstOutput	constructor(output_reg, [512], 3)
		514: IntToFpuOp	make_variant(IntToFpuOp::U64ToF64, [])
		515: Reg	constructor(int_to_fpu, [514, 241], 2)
		516: InstOutput	constructor(output_reg, [515], 3)
		517: VecMisc2	make_variant(VecMisc2::Scvtf, [])
		518: Reg	constructor(vec_misc, [517, 241, 313], 3)
		519: InstOutput	constructor(output_reg, [518], 4)
		520: IntToFpuOp	make_variant(IntToFpuOp::I32ToF32, [])
		521: Reg	constructor(int_to_fpu, [520, 320], 2)
		522: InstOutput	constructor(output_reg, [521], 3)
		523: IntToFpuOp	make_variant(IntToFpuOp::I32ToF64, [])
		524: Reg	constructor(int_to_fpu, [523, 320], 2)
		525: InstOutput	constructor(output_reg, [524], 3)
		526: IntToFpuOp	make_variant(IntToFpuOp::I64ToF32, [])
		527: Reg	constructor(int_to_fpu, [526, 241], 2)
		528: InstOutput	constructor(output_reg, [527], 3)
		529: IntToFpuOp	make_variant(IntToFpuOp::I64ToF64, [])
		530: Reg	constructor(int_to_fpu, [529, 241], 2)
		531: InstOutput	constructor(output_reg, [530], 3)
		532: VecMisc2	make_variant(VecMisc2::Fcvtzu, [])
		533: Reg	constructor(vec_misc, [532, 241, 313], 3)
		534: InstOutput	constructor(output_reg, [533], 4)
		535: Reg	constructor(fpu_to_int_cvt_sat, [474, 241, 274, 319], 2)
		536: InstOutput	constructor(output_reg, [535], 3)
		537: Reg	constructor(fpu_to_int_cvt_sat, [478, 241, 274, 132], 2)
		538: InstOutput	constructor(output_reg, [537], 3)
		539: Reg	constructor(fpu_to_int_cvt_sat, [481, 241, 274, 319], 2)
		540: InstOutput	constructor(output_reg, [539], 3)
		541: Reg	constructor(fpu_to_int_cvt_sat, [485, 241, 274, 132], 2)
		542: InstOutput	constructor(output_reg, [541], 3)
		543: VecMisc2	make_variant(VecMisc2::Fcvtzs, [])
		544: Reg	constructor(vec_misc, [543, 241, 313], 3)
		545: InstOutput	constructor(output_reg, [544], 4)
		546: Reg	constructor(fpu_to_int_cvt_sat, [488, 241, 275, 319], 2)
		547: InstOutput	constructor(output_reg, [546], 3)
		548: Reg	constructor(fpu_to_int_cvt_sat, [491, 241, 275, 132], 2)
		549: InstOutput	constructor(output_reg, [548], 3)
		550: Reg	constructor(fpu_to_int_cvt_sat, [494, 241, 275, 319], 2)
		551: InstOutput	constructor(output_reg, [550], 3)
		552: Reg	constructor(fpu_to_int_cvt_sat, [497, 241, 275, 132], 2)
		553: InstOutput	constructor(output_reg, [552], 3)
		554: Reg	constructor(sub, [28, 34, 35], 3)
		555: InstOutput	constructor(output_reg, [554], 4)
		556: Reg	constructor(sub_imm, [28, 34, 45], 2)
		557: InstOutput	constructor(output_reg, [556], 3)
		558: Reg	constructor(add_imm, [28, 34, 60], 2)
		559: InstOutput	constructor(output_reg, [558], 3)
		560: Reg	constructor(sub_extend, [28, 34, 68], 2)
		561: InstOutput	constructor(output_reg, [560], 3)
		562: Reg	constructor(sub_shift, [28, 34, 87, 86], 3)
		563: InstOutput	constructor(output_reg, [562], 4)
		564: Reg	constructor(sub_vec, [34, 35, 121], 4)
		565: InstOutput	constructor(output_reg, [564], 5)
		566: ValueRegs	constructor(put_in_regs, [33], 2)
		567: ValueRegs	constructor(sub_i128, [124, 566], 3)
		568: InstOutput	constructor(output, [567], 4)
		569: Option(Type)	extractor(ty_vec128, 3)
		570: Type	match_some(569)
		571: VectorSize	constructor(vector_size, [570], 3)
		572: Reg	constructor(uqadd, [34, 35, 571], 4)
		573: InstOutput	constructor(output_reg, [572], 5)
		574: Reg	constructor(sqadd, [34, 35, 571], 4)
		575: InstOutput	constructor(output_reg, [574], 5)
		576: Reg	constructor(uqsub, [34, 35, 571], 4)
		577: InstOutput	constructor(output_reg, [576], 5)
		578: Reg	constructor(sqsub, [34, 35, 571], 4)
		579: InstOutput	constructor(output_reg, [578], 5)
		580: Reg	constructor(zero_reg, [], 1)
		581: Reg	constructor(put_in_reg, [231], 2)
		582: Reg	constructor(sub, [28, 580, 581], 3)
		583: InstOutput	constructor(output_reg, [582], 4)
		584: ValueRegs	constructor(value_regs_zero, [], 1)
		585: ValueRegs	constructor(put_in_regs, [231], 2)
		586: ValueRegs	constructor(sub_i128, [584, 585], 3)
		587: InstOutput	constructor(output, [586], 4)
		588: VectorSize	constructor(vector_size, [570], 2)
		589: Reg	constructor(neg, [241, 588], 3)
		590: InstOutput	constructor(output_reg, [589], 4)
		591: Reg	constructor(madd, [28, 34, 35, 269], 4)
		592: InstOutput	constructor(output_reg, [591], 5)
		593: Reg	constructor(umulh, [132, 126, 130], 7)
		594: Reg	constructor(madd, [132, 126, 131, 593], 8)
		595: Reg	constructor(madd, [132, 128, 130, 594], 9)
		596: Reg	constructor(zero_reg, [], 10)
		597: Reg	constructor(madd, [132, 126, 130, 596], 11)
		598: ValueRegs	constructor(value_regs, [597, 595], 12)
		599: InstOutput	constructor(output, [598], 13)
		600: Option(())	extractor(not_i64x2, 570)
		601: ()	match_some(600)
		602: Reg	constructor(mul, [34, 35, 571], 4)
		603: InstOutput	constructor(output_reg, [602], 5)
		604: Reg	constructor(rev64, [35, 156], 3)
		605: Reg	constructor(mul, [604, 34, 156], 4)
		606: Reg	constructor(xtn, [34, 242], 5)
		607: Reg	constructor(addp, [605, 605, 156], 6)
		608: Reg	constructor(xtn, [35, 242], 7)
		609: Reg	constructor(shll32, [607, 274], 8)
		610: Reg	constructor(umlal32, [609, 608, 606, 274], 9)
		611: InstOutput	constructor(output_reg, [610], 10)
		612: Type	extractor(value_type, 299)
		613: Type	extractor(value_type, 301)
		614: Reg	constructor(put_in_reg, [301], 2)
		615: Reg	constructor(smull8, [302, 614, 274], 3)
		616: InstOutput	constructor(output_reg, [615], 4)
		617: Reg	constructor(smull8, [302, 614, 275], 3)
		618: InstOutput	constructor(output_reg, [617], 4)
		619: Reg	constructor(umull8, [302, 614, 274], 3)
		620: InstOutput	constructor(output_reg, [619], 4)
		621: Reg	constructor(umull8, [302, 614, 275], 3)
		622: InstOutput	constructor(output_reg, [621], 4)
		623: Reg	constructor(smull16, [302, 614, 274], 3)
		624: InstOutput	constructor(output_reg, [623], 4)
		625: Reg	constructor(smull16, [302, 614, 275], 3)
		626: InstOutput	constructor(output_reg, [625], 4)
		627: Reg	constructor(umull16, [302, 614, 274], 3)
		628: InstOutput	constructor(output_reg, [627], 4)
		629: Reg	constructor(umull16, [302, 614, 275], 3)
		630: InstOutput	constructor(output_reg, [629], 4)
		631: Reg	constructor(smull32, [302, 614, 274], 3)
		632: InstOutput	constructor(output_reg, [631], 4)
		633: Reg	constructor(smull32, [302, 614, 275], 3)
		634: InstOutput	constructor(output_reg, [633], 4)
		635: Reg	constructor(umull32, [302, 614, 274], 3)
		636: InstOutput	constructor(output_reg, [635], 4)
		637: Reg	constructor(umull32, [302, 614, 275], 3)
		638: InstOutput	constructor(output_reg, [637], 4)
		639: Reg	constructor(smulh, [132, 34, 35], 3)
		640: InstOutput	constructor(output_reg, [639], 4)
		641: Reg	constructor(put_in_reg_sext64, [32], 1)
		642: Reg	constructor(put_in_reg_sext64, [33], 2)
		643: Reg	constructor(madd, [132, 641, 642, 269], 4)
		644: u8	constructor(ty_bits, [319], 0)
		645: ImmShift	constructor(imm_shift_from_u8, [644], 5)
		646: Reg	constructor(asr_imm, [132, 643, 645], 6)
		647: InstOutput	constructor(output_reg, [646], 7)
		648: Reg	constructor(umulh, [132, 34, 35], 3)
		649: InstOutput	constructor(output_reg, [648], 4)
		650: Reg	constructor(put_in_reg_zext64, [32], 1)
		651: Reg	constructor(put_in_reg_zext64, [33], 2)
		652: Reg	constructor(madd, [132, 650, 651, 269], 4)
		653: Reg	constructor(lsr_imm, [132, 652, 645], 6)
		654: ValueRegs	constructor(value_reg, [653], 7)
		655: InstOutput	constructor(output, [654], 8)
		656: Reg	constructor(put_nonzero_in_reg_zext64, [33], 2)
		657: Reg	constructor(a64_udiv, [132, 650, 656], 3)
		658: InstOutput	constructor(output_reg, [657], 4)
		659: Reg	constructor(put_nonzero_in_reg_sext64, [33], 2)
		660: Reg	constructor(trap_if_div_overflow, [28, 641, 659], 3)
		661: Reg	constructor(a64_sdiv, [132, 660, 659], 4)
		662: InstOutput	constructor(output_reg, [661], 5)
		663: Option(u64)	constructor(safe_divisor_from_imm64, [28, 42], 0)
		664: u64	match_some(663)
		665: ImmExtend	make_variant(ImmExtend::Sign, [])
		666: Reg	constructor(imm, [28, 665, 664], 2)
		667: Reg	constructor(a64_sdiv, [132, 641, 666], 3)
		668: InstOutput	constructor(output_reg, [667], 4)
		669: Reg	constructor(msub, [132, 657, 656, 650], 4)
		670: InstOutput	constructor(output_reg, [669], 5)
		671: Reg	constructor(a64_sdiv, [132, 641, 659], 3)
		672: Reg	constructor(msub, [132, 671, 659, 641], 4)
		673: InstOutput	constructor(output_reg, [672], 5)
		674: Option(Type)	extractor(ty_int, 3)
		675: Type	match_some(674)
		676: Cond	make_variant(Cond::Lo, [])
		677: ValueRegs	constructor(cmp_and_choose, [28, 676, 274, 32, 33], 1)
		678: InstOutput	constructor(output, [677], 2)
		679: Cond	make_variant(Cond::Lt, [])
		680: ValueRegs	constructor(cmp_and_choose, [28, 679, 275, 32, 33], 1)
		681: InstOutput	constructor(output, [680], 2)
		682: Cond	make_variant(Cond::Hi, [])
		683: ValueRegs	constructor(cmp_and_choose, [28, 682, 274, 32, 33], 1)
		684: InstOutput	constructor(output, [683], 2)
		685: Cond	make_variant(Cond::Gt, [])
		686: ValueRegs	constructor(cmp_and_choose, [28, 685, 275, 32, 33], 1)
		687: InstOutput	constructor(output, [686], 2)
		688: Option(())	extractor(not_i64x2, 3)
		689: ()	match_some(688)
		690: VecALUOp	make_variant(VecALUOp::Smin, [])
		691: Reg	constructor(vec_rrr, [690, 34, 35, 121], 4)
		692: InstOutput	constructor(output_reg, [691], 5)
		693: Type	const_prim(I64X2)
		694: VecALUOp	make_variant(VecALUOp::Cmgt, [])
		695: Reg	constructor(vec_rrr, [694, 56, 335, 161], 3)
		696: Reg	constructor(put_in_reg, [32], 4)
		697: Reg	constructor(put_in_reg, [33], 5)
		698: Reg	constructor(bsl, [693, 695, 696, 697], 6)
		699: InstOutput	constructor(output_reg, [698], 7)
		700: VecALUOp	make_variant(VecALUOp::Umin, [])
		701: Reg	constructor(vec_rrr, [700, 34, 35, 121], 4)
		702: InstOutput	constructor(output_reg, [701], 5)
		703: VecALUOp	make_variant(VecALUOp::Cmhi, [])
		704: Reg	constructor(vec_rrr, [703, 56, 335, 161], 3)
		705: Reg	constructor(bsl, [693, 704, 696, 697], 6)
		706: InstOutput	constructor(output_reg, [705], 7)
		707: VecALUOp	make_variant(VecALUOp::Smax, [])
		708: Reg	constructor(vec_rrr, [707, 34, 35, 121], 4)
		709: InstOutput	constructor(output_reg, [708], 5)
		710: Reg	constructor(vec_rrr, [694, 34, 35, 161], 3)
		711: Reg	constructor(bsl, [693, 710, 696, 697], 6)
		712: InstOutput	constructor(output_reg, [711], 7)
		713: VecALUOp	make_variant(VecALUOp::Umax, [])
		714: Reg	constructor(vec_rrr, [713, 34, 35, 121], 4)
		715: InstOutput	constructor(output_reg, [714], 5)
		716: Reg	constructor(vec_rrr, [703, 34, 35, 161], 3)
		717: Reg	constructor(bsl, [693, 716, 696, 697], 6)
		718: InstOutput	constructor(output_reg, [717], 7)
		719: u8	constructor(ty_bits, [232], 0)
		720: u8	constructor(ty_bits, [28], 0)
		721: Reg	constructor(extend, [241, 274, 719, 720], 2)
		722: InstOutput	constructor(output_reg, [721], 3)
		723: Option(Inst)	extractor(def_inst, 231)
		724: Inst	match_some(723)
		725: InstructionData	extractor(inst_data, 724)
		726: Opcode	match_variant(725, InstructionData::BinaryImm8, opcode)
		727: Value	match_variant(725, InstructionData::BinaryImm8, arg)
		728: Uimm8	match_variant(725, InstructionData::BinaryImm8, imm)
		729: Type	extractor(value_type, 727)
		730: u8	extractor(u8_from_uimm8, 728)
		731: Reg	constructor(put_in_reg, [727], 1)
		732: ScalarSize	constructor(lane_size, [729], 2)
		733: Reg	constructor(mov_from_vec, [731, 730, 732], 3)
		734: InstOutput	constructor(output_reg, [733], 4)
		735: Opcode	match_variant(725, InstructionData::LoadNoOffset, opcode)
		736: Value	match_variant(725, InstructionData::LoadNoOffset, arg)
		737: MemFlags	match_variant(725, InstructionData::LoadNoOffset, flags)
		738: Option(Inst)	constructor(is_sinkable_inst, [231], 0)
		739: Inst	match_some(738)
		740: Reg	constructor(sink_atomic_load, [739], 1)
		741: Reg	constructor(load_acquire, [232, 737, 740], 2)
		742: InstOutput	constructor(output_reg, [741], 3)
		743: Reg	constructor(put_in_reg_zext64, [231], 1)
		744: Reg	constructor(imm, [132, 8, 12], 2)
		745: ValueRegs	constructor(value_regs, [743, 744], 3)
		746: InstOutput	constructor(output, [745], 4)
		747: Reg	constructor(imm, [132, 8, 12], 4)
		748: ValueRegs	constructor(value_regs, [733, 747], 5)
		749: InstOutput	constructor(output, [748], 6)
		750: Reg	constructor(extend, [241, 275, 719, 720], 2)
		751: InstOutput	constructor(output_reg, [750], 3)
		752: VectorSize	constructor(vector_size, [729], 2)
		753: OperandSize	constructor(size_from_ty, [28], 3)
		754: Reg	constructor(mov_from_vec_signed, [731, 730, 752, 753], 4)
		755: InstOutput	constructor(output_reg, [754], 5)
		756: Reg	constructor(put_in_reg_sext64, [231], 1)
		757: ImmShift	constructor(imm_shift_from_u8, [324], 2)
		758: Reg	constructor(asr_imm, [132, 756, 757], 3)
		759: ValueRegs	constructor(value_regs, [756, 758], 4)
		760: InstOutput	constructor(output, [759], 5)
		761: Option(())	extractor(not_i64x2, 729)
		762: ()	match_some(761)
		763: OperandSize	constructor(size_from_ty, [132], 3)
		764: Reg	constructor(mov_from_vec_signed, [731, 730, 752, 763], 4)
		765: ImmShift	constructor(imm_shift_from_u8, [324], 5)
		766: Reg	constructor(asr_imm, [132, 764, 765], 6)
		767: ValueRegs	constructor(value_regs, [764, 766], 7)
		768: InstOutput	constructor(output, [767], 8)
		769: Reg	constructor(mov_from_vec, [731, 730, 245], 2)
		770: ImmShift	constructor(imm_shift_from_u8, [324], 3)
		771: Reg	constructor(asr_imm, [132, 769, 770], 4)
		772: ValueRegs	constructor(value_regs, [769, 771], 5)
		773: InstOutput	constructor(output, [772], 6)
		774: Reg	constructor(orr_not, [28, 580, 581], 3)
		775: InstOutput	constructor(output_reg, [774], 4)
		776: Opcode	match_variant(725, InstructionData::Binary, opcode)
		777: ValueArray2	match_variant(725, InstructionData::Binary, args)
		778: (Value, Value)	extractor(value_array_2, 777)
		779: Value	match_tuple(778, 0)
		780: Value	match_tuple(778, 1)
		781: Option(Inst)	extractor(def_inst, 780)
		782: Inst	match_some(781)
		783: InstructionData	extractor(inst_data, 782)
		784: Opcode	match_variant(783, InstructionData::UnaryImm, opcode)
		785: Imm64	match_variant(783, InstructionData::UnaryImm, imm)
		786: Option(ShiftOpAndAmt)	constructor(lshl_from_imm64, [28, 785], 0)
		787: ShiftOpAndAmt	match_some(786)
		788: Reg	constructor(put_in_reg, [779], 2)
		789: Reg	constructor(orr_not_shift, [28, 580, 788, 787], 3)
		790: InstOutput	constructor(output_reg, [789], 4)
		791: Reg	constructor(zero_reg, [], 4)
		792: Reg	constructor(orr_not, [132, 791, 234], 5)
		793: Reg	constructor(zero_reg, [], 6)
		794: Reg	constructor(orr_not, [132, 793, 323], 7)
		795: ValueRegs	constructor(value_regs, [792, 794], 8)
		796: InstOutput	constructor(output, [795], 9)
		797: Reg	constructor(not, [241, 588], 3)
		798: InstOutput	constructor(output_reg, [797], 4)
		799: ALUOp	make_variant(ALUOp::EorNot, [])
		800: Reg	constructor(alu_rs_imm_logic, [799, 28, 779, 780], 1)
		801: InstOutput	constructor(output_reg, [800], 2)
		802: ValueRegs	constructor(i128_alu_bitop, [799, 132, 779, 780], 1)
		803: InstOutput	constructor(output, [802], 2)
		804: ALUOp	make_variant(ALUOp::And, [])
		805: Reg	constructor(alu_rs_imm_logic_commutative, [804, 28, 32, 33], 1)
		806: InstOutput	constructor(output_reg, [805], 2)
		807: ValueRegs	constructor(i128_alu_bitop, [804, 132, 32, 33], 1)
		808: InstOutput	constructor(output, [807], 2)
		809: Reg	constructor(and_vec, [34, 35, 571], 4)
		810: InstOutput	constructor(output_reg, [809], 5)
		811: ALUOp	make_variant(ALUOp::AndNot, [])
		812: Reg	constructor(alu_rs_imm_logic, [811, 28, 32, 301], 1)
		813: InstOutput	constructor(output_reg, [812], 2)
		814: Reg	constructor(alu_rs_imm_logic, [811, 28, 33, 299], 1)
		815: InstOutput	constructor(output_reg, [814], 2)
		816: ValueRegs	constructor(i128_alu_bitop, [811, 132, 32, 301], 1)
		817: InstOutput	constructor(output, [816], 2)
		818: ValueRegs	constructor(i128_alu_bitop, [811, 132, 33, 299], 1)
		819: InstOutput	constructor(output, [818], 2)
		820: Reg	constructor(bic_vec, [34, 614, 571], 4)
		821: InstOutput	constructor(output_reg, [820], 5)
		822: Reg	constructor(put_in_reg, [299], 2)
		823: Reg	constructor(bic_vec, [56, 822, 571], 4)
		824: InstOutput	constructor(output_reg, [823], 5)
		825: ALUOp	make_variant(ALUOp::Orr, [])
		826: Reg	constructor(alu_rs_imm_logic_commutative, [825, 28, 32, 33], 1)
		827: InstOutput	constructor(output_reg, [826], 2)
		828: ValueRegs	constructor(i128_alu_bitop, [825, 132, 32, 33], 1)
		829: InstOutput	constructor(output, [828], 2)
		830: Reg	constructor(orr_vec, [34, 35, 571], 4)
		831: InstOutput	constructor(output_reg, [830], 5)
		832: ALUOp	make_variant(ALUOp::OrrNot, [])
		833: Reg	constructor(alu_rs_imm_logic, [832, 28, 32, 301], 1)
		834: InstOutput	constructor(output_reg, [833], 2)
		835: Reg	constructor(alu_rs_imm_logic, [832, 28, 33, 299], 1)
		836: InstOutput	constructor(output_reg, [835], 2)
		837: ValueRegs	constructor(i128_alu_bitop, [832, 132, 32, 301], 1)
		838: InstOutput	constructor(output, [837], 2)
		839: ValueRegs	constructor(i128_alu_bitop, [832, 132, 33, 299], 1)
		840: InstOutput	constructor(output, [839], 2)
		841: ALUOp	make_variant(ALUOp::Eor, [])
		842: Reg	constructor(alu_rs_imm_logic_commutative, [841, 28, 32, 33], 1)
		843: InstOutput	constructor(output_reg, [842], 2)
		844: ValueRegs	constructor(i128_alu_bitop, [841, 132, 32, 33], 1)
		845: InstOutput	constructor(output, [844], 2)
		846: Reg	constructor(eor_vec, [34, 35, 571], 4)
		847: InstOutput	constructor(output_reg, [846], 5)
		848: Reg	constructor(alu_rs_imm_logic, [799, 28, 32, 301], 1)
		849: InstOutput	constructor(output_reg, [848], 2)
		850: Reg	constructor(alu_rs_imm_logic, [799, 28, 33, 299], 1)
		851: InstOutput	constructor(output_reg, [850], 2)
		852: ValueRegs	constructor(i128_alu_bitop, [799, 132, 32, 301], 1)
		853: InstOutput	constructor(output, [852], 2)
		854: ValueRegs	constructor(i128_alu_bitop, [799, 132, 33, 299], 1)
		855: InstOutput	constructor(output, [854], 2)
		856: ALUOp	make_variant(ALUOp::Lsl, [])
		857: Reg	constructor(do_shift, [856, 319, 34, 33], 2)
		858: InstOutput	constructor(output_reg, [857], 3)
		859: Reg	constructor(do_shift, [856, 132, 34, 33], 2)
		860: InstOutput	constructor(output_reg, [859], 3)
		861: Reg	constructor(value_regs_get, [566, 125], 3)
		862: ValueRegs	constructor(lower_shl128, [124, 861], 4)
		863: InstOutput	constructor(output, [862], 5)
		864: VectorSize	constructor(vector_size, [570], 1)
		865: Type	const_prim(I32)
		866: ImmLogic	constructor(shift_mask, [570], 3)
		867: Reg	constructor(and_imm, [865, 35, 866], 4)
		868: Reg	constructor(vec_dup, [867, 864], 5)
		869: Reg	constructor(sshl, [338, 868, 864], 7)
		870: InstOutput	constructor(output_reg, [869], 8)
		871: u8	constructor(shift_masked_imm, [570, 43], 0)
		872: Reg	constructor(ushl_vec_imm, [34, 871, 588], 3)
		873: InstOutput	constructor(output_reg, [872], 4)
		874: ALUOp	make_variant(ALUOp::Lsr, [])
		875: Reg	constructor(put_in_reg_zext32, [32], 1)
		876: Reg	constructor(do_shift, [874, 319, 875, 33], 2)
		877: InstOutput	constructor(output_reg, [876], 3)
		878: Reg	constructor(do_shift, [874, 132, 650, 33], 2)
		879: InstOutput	constructor(output_reg, [878], 3)
		880: ValueRegs	constructor(lower_ushr128, [124, 861], 4)
		881: InstOutput	constructor(output, [880], 5)
		882: Reg	constructor(zero_reg, [], 5)
		883: Reg	constructor(sub, [132, 882, 867], 6)
		884: Reg	constructor(vec_dup, [883, 864], 7)
		885: Reg	constructor(put_in_reg, [32], 8)
		886: Reg	constructor(ushl, [885, 884, 864], 9)
		887: InstOutput	constructor(output_reg, [886], 10)
		888: Reg	constructor(ushr_vec_imm, [34, 871, 588], 3)
		889: InstOutput	constructor(output_reg, [888], 4)
		890: InstOutput	constructor(output_value, [32], 1)
		891: ALUOp	make_variant(ALUOp::Asr, [])
		892: Reg	constructor(put_in_reg_sext32, [32], 1)
		893: Reg	constructor(do_shift, [891, 319, 892, 33], 2)
		894: InstOutput	constructor(output_reg, [893], 3)
		895: Reg	constructor(do_shift, [891, 132, 641, 33], 2)
		896: InstOutput	constructor(output_reg, [895], 3)
		897: ValueRegs	constructor(lower_sshr128, [124, 861], 4)
		898: InstOutput	constructor(output, [897], 5)
		899: Reg	constructor(sshl, [885, 884, 864], 9)
		900: InstOutput	constructor(output_reg, [899], 10)
		901: Reg	constructor(sshr_vec_imm, [34, 871, 588], 3)
		902: InstOutput	constructor(output_reg, [901], 4)
		903: Option(Type)	extractor(fits_in_16, 3)
		904: Type	match_some(903)
		905: ValueRegs	constructor(put_in_regs, [33], 1)
		906: Reg	constructor(value_regs_get, [905, 125], 2)
		907: Reg	constructor(sub, [865, 269, 906], 4)
		908: Reg	constructor(put_in_reg_zext32, [32], 5)
		909: Reg	constructor(small_rotr, [904, 908, 907], 6)
		910: InstOutput	constructor(output_reg, [909], 7)
		911: Option(ImmShift)	constructor(imm_shift_from_imm64, [904, 42], 0)
		912: ImmShift	match_some(911)
		913: ImmShift	constructor(negate_imm_shift, [904, 912], 2)
		914: Reg	constructor(small_rotr_imm, [904, 875, 913], 3)
		915: InstOutput	constructor(output_reg, [914], 4)
		916: Reg	constructor(put_in_reg, [32], 5)
		917: Reg	constructor(a64_rotr, [865, 916, 907], 6)
		918: InstOutput	constructor(output_reg, [917], 7)
		919: Reg	constructor(sub, [132, 269, 906], 4)
		920: Reg	constructor(a64_rotr, [132, 916, 919], 6)
		921: InstOutput	constructor(output_reg, [920], 7)
		922: Option(ImmShift)	constructor(imm_shift_from_imm64, [865, 42], 0)
		923: ImmShift	match_some(922)
		924: ImmShift	constructor(negate_imm_shift, [865, 923], 2)
		925: Reg	constructor(a64_rotr_imm, [865, 34, 924], 3)
		926: InstOutput	constructor(output_reg, [925], 4)
		927: Option(ImmShift)	constructor(imm_shift_from_imm64, [132, 42], 0)
		928: ImmShift	match_some(927)
		929: ImmShift	constructor(negate_imm_shift, [132, 928], 2)
		930: Reg	constructor(a64_rotr_imm, [132, 34, 929], 3)
		931: InstOutput	constructor(output_reg, [930], 4)
		932: u64	const_int(128, u64)
		933: Reg	constructor(imm, [132, 8, 932], 4)
		934: Reg	constructor(sub, [132, 933, 861], 5)
		935: ValueRegs	constructor(lower_shl128, [124, 861], 6)
		936: ValueRegs	constructor(lower_ushr128, [124, 934], 7)
		937: Reg	constructor(value_regs_get, [935, 125], 8)
		938: Reg	constructor(value_regs_get, [936, 125], 9)
		939: Reg	constructor(orr, [132, 937, 938], 10)
		940: Reg	constructor(value_regs_get, [935, 127], 11)
		941: Reg	constructor(value_regs_get, [936, 127], 12)
		942: Reg	constructor(orr, [132, 940, 941], 13)
		943: ValueRegs	constructor(value_regs, [939, 942], 14)
		944: InstOutput	constructor(output, [943], 15)
		945: Reg	constructor(small_rotr, [904, 875, 861], 4)
		946: InstOutput	constructor(output_reg, [945], 5)
		947: Reg	constructor(a64_rotr, [865, 34, 861], 4)
		948: InstOutput	constructor(output_reg, [947], 5)
		949: Reg	constructor(a64_rotr, [132, 34, 861], 4)
		950: InstOutput	constructor(output_reg, [949], 5)
		951: Reg	constructor(small_rotr_imm, [904, 875, 912], 2)
		952: InstOutput	constructor(output_reg, [951], 3)
		953: Reg	constructor(a64_rotr_imm, [865, 34, 923], 2)
		954: InstOutput	constructor(output_reg, [953], 3)
		955: Reg	constructor(a64_rotr_imm, [132, 34, 928], 2)
		956: InstOutput	constructor(output_reg, [955], 3)
		957: ValueRegs	constructor(lower_ushr128, [124, 861], 6)
		958: ValueRegs	constructor(lower_shl128, [124, 934], 7)
		959: Reg	constructor(value_regs_get, [957, 127], 8)
		960: Reg	constructor(value_regs_get, [958, 127], 9)
		961: Reg	constructor(orr, [132, 959, 960], 10)
		962: Reg	constructor(value_regs_get, [957, 125], 11)
		963: Reg	constructor(value_regs_get, [958, 125], 12)
		964: Reg	constructor(orr, [132, 962, 963], 13)
		965: ValueRegs	constructor(value_regs, [964, 961], 14)
		966: InstOutput	constructor(output, [965], 15)
		967: Reg	constructor(rbit, [865, 241], 2)
		968: u8	const_int(24, u8)
		969: ImmShift	constructor(imm_shift_from_u8, [968], 3)
		970: Reg	constructor(lsr_imm, [865, 967, 969], 4)
		971: InstOutput	constructor(output_reg, [970], 5)
		972: u8	const_int(16, u8)
		973: ImmShift	constructor(imm_shift_from_u8, [972], 3)
		974: Reg	constructor(lsr_imm, [865, 967, 973], 4)
		975: InstOutput	constructor(output_reg, [974], 5)
		976: Reg	constructor(rbit, [132, 234], 3)
		977: Reg	constructor(rbit, [132, 236], 5)
		978: ValueRegs	constructor(value_regs, [977, 976], 6)
		979: InstOutput	constructor(output, [978], 7)
		980: Reg	constructor(rbit, [3, 241], 2)
		981: InstOutput	constructor(output_reg, [980], 3)
		982: Reg	constructor(a64_clz, [865, 252], 2)
		983: Imm12	constructor(u8_into_imm12, [968], 3)
		984: Reg	constructor(sub_imm, [865, 982, 983], 4)
		985: InstOutput	constructor(output_reg, [984], 5)
		986: Imm12	constructor(u8_into_imm12, [972], 3)
		987: Reg	constructor(sub_imm, [865, 982, 986], 4)
		988: InstOutput	constructor(output_reg, [987], 5)
		989: ValueRegs	constructor(lower_clz128, [233], 2)
		990: InstOutput	constructor(output, [989], 3)
		991: Reg	constructor(a64_clz, [3, 241], 2)
		992: InstOutput	constructor(output_reg, [991], 3)
		993: u64	const_int(8388608, u64)
		994: ImmLogic	constructor(u64_into_imm_logic, [865, 993], 3)
		995: Reg	constructor(orr_imm, [865, 967, 994], 4)
		996: Reg	constructor(a64_clz, [865, 995], 5)
		997: InstOutput	constructor(output_reg, [996], 6)
		998: u64	const_int(32768, u64)
		999: ImmLogic	constructor(u64_into_imm_logic, [865, 998], 3)
		1000: Reg	constructor(orr_imm, [865, 967, 999], 4)
		1001: Reg	constructor(a64_clz, [865, 1000], 5)
		1002: InstOutput	constructor(output_reg, [1001], 6)
		1003: ValueRegs	constructor(lower_clz128, [978], 7)
		1004: InstOutput	constructor(output, [1003], 8)
		1005: Reg	constructor(a64_clz, [3, 980], 3)
		1006: InstOutput	constructor(output_reg, [1005], 4)
		1007: Reg	constructor(a64_cls, [865, 320], 2)
		1008: Reg	constructor(sub_imm, [865, 1007, 983], 4)
		1009: InstOutput	constructor(output_reg, [1008], 5)
		1010: Reg	constructor(sub_imm, [865, 1007, 986], 4)
		1011: InstOutput	constructor(output_reg, [1010], 5)
		1012: Reg	constructor(a64_cls, [132, 234], 4)
		1013: Reg	constructor(a64_cls, [132, 323], 5)
		1014: Reg	constructor(eon, [132, 323, 234], 6)
		1015: ImmShift	constructor(imm_shift_from_u8, [324], 7)
		1016: Reg	constructor(lsr_imm, [132, 1014, 1015], 8)
		1017: Reg	constructor(madd, [132, 1012, 1016, 1016], 9)
		1018: Imm12	constructor(u8_into_imm12, [324], 10)
		1019: ProducesFlags	constructor(cmp64_imm, [1013, 1018], 11)
		1020: Reg	constructor(zero_reg, [], 12)
		1021: ConsumesFlags	constructor(csel, [262, 1017, 1020], 13)
		1022: Reg	constructor(with_flags_reg, [1019, 1021], 14)
		1023: Reg	constructor(add, [132, 1022, 1013], 15)
		1024: Reg	constructor(imm, [132, 8, 12], 16)
		1025: ValueRegs	constructor(value_regs, [1023, 1024], 17)
		1026: InstOutput	constructor(output, [1025], 18)
		1027: Reg	constructor(a64_cls, [3, 241], 2)
		1028: InstOutput	constructor(output_reg, [1027], 3)
		1029: Type	const_prim(I16)
		1030: Reg	constructor(a64_rev16, [1029, 241], 2)
		1031: InstOutput	constructor(output_reg, [1030], 3)
		1032: Reg	constructor(a64_rev32, [865, 241], 2)
		1033: InstOutput	constructor(output_reg, [1032], 3)
		1034: Reg	constructor(a64_rev64, [132, 241], 2)
		1035: InstOutput	constructor(output_reg, [1034], 3)
		1036: Reg	constructor(value_regs_get, [233, 127], 2)
		1037: Reg	constructor(a64_rev64, [132, 1036], 3)
		1038: ValueRegs	constructor(put_in_regs, [231], 4)
		1039: Reg	constructor(value_regs_get, [1038, 125], 5)
		1040: Reg	constructor(a64_rev64, [132, 1039], 6)
		1041: ValueRegs	constructor(value_regs, [1037, 1040], 7)
		1042: InstOutput	constructor(output, [1041], 8)
		1043: ValueRegs	constructor(lower_bmask, [3, 232, 233], 2)
		1044: InstOutput	constructor(output, [1043], 3)
		1045: Reg	constructor(mov_to_fpu, [241, 242], 2)
		1046: VectorSize	make_variant(VectorSize::Size8x8, [])
		1047: Reg	constructor(vec_cnt, [1045, 1046], 3)
		1048: ScalarSize	make_variant(ScalarSize::Size8, [])
		1049: Reg	constructor(mov_from_vec, [1047, 266, 1048], 4)
		1050: InstOutput	constructor(output_reg, [1049], 5)
		1051: Reg	constructor(addp, [1047, 1047, 1046], 4)
		1052: Reg	constructor(mov_from_vec, [1051, 266, 1048], 5)
		1053: InstOutput	constructor(output_reg, [1052], 6)
		1054: Reg	constructor(addv, [1047, 1046], 4)
		1055: Reg	constructor(mov_from_vec, [1054, 266, 1048], 5)
		1056: InstOutput	constructor(output_reg, [1055], 6)
		1057: Reg	constructor(vec_cnt, [248, 1046], 3)
		1058: Reg	constructor(addv, [1057, 1046], 4)
		1059: Reg	constructor(mov_from_vec, [1058, 266, 1048], 5)
		1060: InstOutput	constructor(output_reg, [1059], 6)
		1061: Reg	constructor(mov_to_fpu, [234, 245], 3)
		1062: Reg	constructor(mov_to_vec, [1061, 236, 339, 161], 5)
		1063: Reg	constructor(vec_cnt, [1062, 146], 6)
		1064: Reg	constructor(addv, [1063, 146], 7)
		1065: Reg	constructor(mov_from_vec, [1064, 266, 1048], 8)
		1066: Reg	constructor(imm, [132, 8, 12], 9)
		1067: ValueRegs	constructor(value_regs, [1065, 1066], 10)
		1068: InstOutput	constructor(output, [1067], 11)
		1069: Reg	constructor(vec_cnt, [241, 146], 2)
		1070: InstOutput	constructor(output_reg, [1069], 3)
		1071: Option(Type)	constructor(ty_int_ref_scalar_64, [3], 0)
		1072: Type	match_some(1071)
		1073: Reg	constructor(put_in_reg, [459], 1)
		1074: Reg	constructor(and_reg, [3, 1073, 463], 3)
		1075: Reg	constructor(put_in_reg, [458], 5)
		1076: Reg	constructor(bic, [3, 465, 1075], 6)
		1077: Reg	constructor(orr, [3, 1074, 1076], 7)
		1078: InstOutput	constructor(output_reg, [1077], 8)
		1079: Reg	constructor(put_in_reg, [458], 1)
		1080: Reg	constructor(put_in_reg, [459], 2)
		1081: Reg	constructor(put_in_reg, [460], 3)
		1082: Reg	constructor(bsl, [570, 1079, 1080, 1081], 4)
		1083: InstOutput	constructor(output_reg, [1082], 5)
		1084: InstOutput	constructor(output_reg, [234], 3)
		1085: Opcode	match_variant(4, InstructionData::FloatCompare, opcode)
		1086: ValueArray2	match_variant(4, InstructionData::FloatCompare, args)
		1087: FloatCC	match_variant(4, InstructionData::FloatCompare, cond)
		1088: (Value, Value)	extractor(value_array_2, 1086)
		1089: Value	match_tuple(1088, 0)
		1090: Value	match_tuple(1088, 1)
		1091: Option(FloatCC)	extractor(fcmp_zero_cond_not_eq, 1087)
		1092: FloatCC	match_some(1091)
		1093: Option(Value)	constructor(zero_value, [1090], 0)
		1094: Value	match_some(1093)
		1095: Reg	constructor(put_in_reg, [1089], 1)
		1096: Reg	constructor(fcmeq0, [1095, 313], 3)
		1097: Reg	constructor(not, [1096, 313], 4)
		1098: ValueRegs	constructor(value_reg, [1097], 5)
		1099: InstOutput	constructor(output, [1098], 6)
		1100: Option(FloatCC)	extractor(fcmp_zero_cond, 1087)
		1101: FloatCC	match_some(1100)
		1102: Reg	constructor(float_cmp_zero, [1101, 1095, 313], 3)
		1103: ValueRegs	constructor(value_reg, [1102], 4)
		1104: InstOutput	constructor(output, [1103], 5)
		1105: Option(Value)	constructor(zero_value, [1089], 0)
		1106: Value	match_some(1105)
		1107: Reg	constructor(put_in_reg, [1090], 1)
		1108: Reg	constructor(fcmeq0, [1107, 313], 3)
		1109: Reg	constructor(not, [1108, 313], 4)
		1110: ValueRegs	constructor(value_reg, [1109], 5)
		1111: InstOutput	constructor(output, [1110], 6)
		1112: Reg	constructor(float_cmp_zero_swap, [1101, 1107, 313], 3)
		1113: ValueRegs	constructor(value_reg, [1112], 4)
		1114: InstOutput	constructor(output, [1113], 5)
		1115: Type	extractor(value_type, 1089)
		1116: Option(Type)	extractor(ty_scalar_float, 1115)
		1117: Type	match_some(1116)
		1118: ScalarSize	constructor(scalar_size, [1117], 1)
		1119: Reg	constructor(put_in_reg, [1089], 2)
		1120: Reg	constructor(put_in_reg, [1090], 3)
		1121: ProducesFlags	constructor(fpu_cmp, [1118, 1119, 1120], 4)
		1122: Cond	constructor(fp_cond_code, [1087], 5)
		1123: ConsumesFlags	constructor(materialize_bool_result, [1122], 6)
		1124: ValueRegs	constructor(with_flags, [1121, 1123], 7)
		1125: InstOutput	constructor(output, [1124], 8)
		1126: Option(Type)	constructor(ty_vector_float, [1115], 0)
		1127: Type	match_some(1126)
		1128: Reg	constructor(put_in_reg, [1090], 2)
		1129: Cond	constructor(fp_cond_code, [1087], 3)
		1130: Reg	constructor(vec_cmp, [1095, 1128, 1115, 1129], 4)
		1131: InstOutput	constructor(output_reg, [1130], 5)
		1132: Opcode	match_variant(4, InstructionData::IntCompare, opcode)
		1133: ValueArray2	match_variant(4, InstructionData::IntCompare, args)
		1134: IntCC	match_variant(4, InstructionData::IntCompare, cond)
		1135: (Value, Value)	extractor(value_array_2, 1133)
		1136: Value	match_tuple(1135, 0)
		1137: Value	match_tuple(1135, 1)
		1138: Option(IntCC)	extractor(icmp_zero_cond_not_eq, 1134)
		1139: IntCC	match_some(1138)
		1140: Option(Value)	constructor(zero_value, [1137], 0)
		1141: Value	match_some(1140)
		1142: Reg	constructor(put_in_reg, [1136], 1)
		1143: Reg	constructor(cmeq0, [1142, 313], 3)
		1144: Reg	constructor(not, [1143, 313], 4)
		1145: ValueRegs	constructor(value_reg, [1144], 5)
		1146: InstOutput	constructor(output, [1145], 6)
		1147: Option(IntCC)	extractor(icmp_zero_cond, 1134)
		1148: IntCC	match_some(1147)
		1149: Reg	constructor(int_cmp_zero, [1148, 1142, 313], 3)
		1150: ValueRegs	constructor(value_reg, [1149], 4)
		1151: InstOutput	constructor(output, [1150], 5)
		1152: Option(Value)	constructor(zero_value, [1136], 0)
		1153: Value	match_some(1152)
		1154: Reg	constructor(put_in_reg, [1137], 1)
		1155: Reg	constructor(cmeq0, [1154, 313], 3)
		1156: Reg	constructor(not, [1155, 313], 4)
		1157: ValueRegs	constructor(value_reg, [1156], 5)
		1158: InstOutput	constructor(output, [1157], 6)
		1159: Reg	constructor(int_cmp_zero_swap, [1148, 1154, 313], 3)
		1160: ValueRegs	constructor(value_reg, [1159], 4)
		1161: InstOutput	constructor(output, [1160], 5)
		1162: Type	extractor(value_type, 1136)
		1163: Type	const_prim(I8)
		1164: ValueRegs	constructor(lower_icmp_into_reg, [1134, 1136, 1137, 1162, 1163], 1)
		1165: InstOutput	constructor(output, [1164], 2)
		1166: Opcode	match_variant(4, InstructionData::Trap, opcode)
		1167: TrapCode	match_variant(4, InstructionData::Trap, code)
		1168: SideEffectNoResult	constructor(udf, [1167], 1)
		1169: InstOutput	constructor(side_effect, [1168], 2)
		1170: Option(Value)	extractor(maybe_uextend, 458)
		1171: Value	match_some(1170)
		1172: Option(Inst)	extractor(def_inst, 1171)
		1173: Inst	match_some(1172)
		1174: InstructionData	extractor(inst_data, 1173)
		1175: Opcode	match_variant(1174, InstructionData::IntCompare, opcode)
		1176: ValueArray2	match_variant(1174, InstructionData::IntCompare, args)
		1177: IntCC	match_variant(1174, InstructionData::IntCompare, cond)
		1178: (Value, Value)	extractor(value_array_2, 1176)
		1179: Value	match_tuple(1178, 0)
		1180: Value	match_tuple(1178, 1)
		1181: Type	extractor(value_type, 1179)
		1182: FlagsAndCC	constructor(lower_icmp_into_flags, [1177, 1179, 1180, 1181], 1)
		1183: ProducesFlags	constructor(flags_and_cc_flags, [1182], 2)
		1184: IntCC	constructor(flags_and_cc_cc, [1182], 3)
		1185: Cond	constructor(cond_code, [1184], 4)
		1186: ValueRegs	constructor(lower_select, [1183, 1185, 3, 459, 460], 5)
		1187: InstOutput	constructor(output, [1186], 6)
		1188: Opcode	match_variant(1174, InstructionData::FloatCompare, opcode)
		1189: ValueArray2	match_variant(1174, InstructionData::FloatCompare, args)
		1190: FloatCC	match_variant(1174, InstructionData::FloatCompare, cond)
		1191: (Value, Value)	extractor(value_array_2, 1189)
		1192: Value	match_tuple(1191, 0)
		1193: Value	match_tuple(1191, 1)
		1194: Type	extractor(value_type, 1192)
		1195: Cond	constructor(fp_cond_code, [1190], 1)
		1196: ScalarSize	constructor(scalar_size, [1194], 2)
		1197: Reg	constructor(put_in_reg, [1192], 3)
		1198: Reg	constructor(put_in_reg, [1193], 4)
		1199: ProducesFlags	constructor(fpu_cmp, [1196, 1197, 1198], 5)
		1200: ValueRegs	constructor(lower_select, [1199, 1195, 3, 459, 460], 6)
		1201: InstOutput	constructor(output, [1200], 7)
		1202: Type	extractor(value_type, 458)
		1203: u64	const_int(255, u64)
		1204: ImmLogic	constructor(u64_into_imm_logic, [865, 1203], 2)
		1205: ProducesFlags	constructor(tst_imm, [865, 1079, 1204], 3)
		1206: ValueRegs	constructor(lower_select, [1205, 277, 3, 459, 460], 4)
		1207: InstOutput	constructor(output, [1206], 5)
		1208: Option(Type)	extractor(fits_in_32, 1202)
		1209: Type	match_some(1208)
		1210: Reg	constructor(put_in_reg_zext32, [458], 1)
		1211: Reg	constructor(zero_reg, [], 2)
		1212: ProducesFlags	constructor(cmp, [272, 1210, 1211], 3)
		1213: ValueRegs	constructor(lower_select, [1212, 277, 3, 459, 460], 4)
		1214: InstOutput	constructor(output, [1213], 5)
		1215: Option(Type)	extractor(fits_in_64, 1202)
		1216: Type	match_some(1215)
		1217: Reg	constructor(put_in_reg_zext64, [458], 1)
		1218: ProducesFlags	constructor(cmp, [268, 1217, 1211], 3)
		1219: ValueRegs	constructor(lower_select, [1218, 277, 3, 459, 460], 4)
		1220: InstOutput	constructor(output, [1219], 5)
		1221: ValueRegs	constructor(put_in_regs, [458], 1)
		1222: Reg	constructor(value_regs_get, [1221, 125], 2)
		1223: Reg	constructor(value_regs_get, [1221, 127], 3)
		1224: Reg	constructor(orr, [132, 1222, 1223], 4)
		1225: ProducesFlags	constructor(cmp, [268, 1224, 882], 6)
		1226: ValueRegs	constructor(lower_select, [1225, 277, 3, 459, 460], 7)
		1227: InstOutput	constructor(output, [1226], 8)
		1228: SideEffectNoResult	constructor(csdb, [], 6)
		1229: InstOutput	constructor(side_effect, [1228], 7)
		1230: InstOutput	constructor(output, [1186], 8)
		1231: Opcode	match_variant(4, InstructionData::UnaryConst, opcode)
		1232: Constant	match_variant(4, InstructionData::UnaryConst, constant_handle)
		1233: Option(u128)	extractor(u128_from_constant, 1232)
		1234: u128	match_some(1233)
		1235: Reg	constructor(constant_f128, [1234], 1)
		1236: InstOutput	constructor(output_reg, [1235], 2)
		1237: Option(u64)	extractor(u64_from_constant, 1232)
		1238: u64	match_some(1237)
		1239: Option(Type)	constructor(ty_vec64, [3], 0)
		1240: Type	match_some(1239)
		1241: Reg	constructor(constant_f64, [1238], 1)
		1242: InstOutput	constructor(output_reg, [1241], 2)
		1243: Option(Type)	constructor(ty_int_ref_scalar_64, [232], 0)
		1244: Type	match_some(1243)
		1245: Reg	constructor(vec_dup, [241, 313], 3)
		1246: InstOutput	constructor(output_reg, [1245], 4)
		1247: Option(Type)	extractor(ty_scalar_float, 232)
		1248: Type	match_some(1247)
		1249: Reg	constructor(vec_dup_from_fpu, [241, 313, 266], 3)
		1250: InstOutput	constructor(output_reg, [1249], 4)
		1251: Opcode	match_variant(725, InstructionData::UnaryIeee32, opcode)
		1252: Ieee32	match_variant(725, InstructionData::UnaryIeee32, imm)
		1253: u32	extractor(u32_from_ieee32, 1252)
		1254: u64	constructor(u32_as_u64, [1253], 0)
		1255: Reg	constructor(splat_const, [1254, 469], 2)
		1256: InstOutput	constructor(output_reg, [1255], 3)
		1257: Opcode	match_variant(725, InstructionData::UnaryIeee64, opcode)
		1258: Ieee64	match_variant(725, InstructionData::UnaryIeee64, imm)
		1259: u64	extractor(u64_from_ieee64, 1258)
		1260: Reg	constructor(splat_const, [1259, 469], 2)
		1261: InstOutput	constructor(output_reg, [1260], 3)
		1262: Opcode	match_variant(725, InstructionData::UnaryImm, opcode)
		1263: Imm64	match_variant(725, InstructionData::UnaryImm, imm)
		1264: u64	extractor(u64_from_imm64, 1263)
		1265: Reg	constructor(splat_const, [1264, 469], 2)
		1266: InstOutput	constructor(output_reg, [1265], 3)
		1267: Opcode	match_variant(725, InstructionData::Unary, opcode)
		1268: Value	match_variant(725, InstructionData::Unary, arg)
		1269: Option(Inst)	extractor(def_inst, 1268)
		1270: Inst	match_some(1269)
		1271: InstructionData	extractor(inst_data, 1270)
		1272: Opcode	match_variant(1271, InstructionData::UnaryImm, opcode)
		1273: Imm64	match_variant(1271, InstructionData::UnaryImm, imm)
		1274: u64	extractor(u64_from_imm64, 1273)
		1275: Reg	constructor(splat_const, [1274, 469], 2)
		1276: InstOutput	constructor(output_reg, [1275], 3)
		1277: Opcode	match_variant(725, InstructionData::Load, opcode)
		1278: Value	match_variant(725, InstructionData::Load, arg)
		1279: MemFlags	match_variant(725, InstructionData::Load, flags)
		1280: Offset32	match_variant(725, InstructionData::Load, offset)
		1281: Type	constructor(lane_type, [3], 0)
		1282: Reg	constructor(sink_load_into_addr, [1281, 739], 1)
		1283: Reg	constructor(ld1r, [1282, 313, 1279], 3)
		1284: InstOutput	constructor(output_reg, [1283], 4)
		1285: Option(Type)	extractor(valid_atomic_transaction, 3)
		1286: Type	match_some(1285)
		1287: Opcode	match_variant(4, InstructionData::LoadNoOffset, opcode)
		1288: Value	match_variant(4, InstructionData::LoadNoOffset, arg)
		1289: MemFlags	match_variant(4, InstructionData::LoadNoOffset, flags)
		1290: Reg	constructor(put_in_reg, [1288], 1)
		1291: Reg	constructor(load_acquire, [1286, 1289, 1290], 2)
		1292: InstOutput	constructor(output_reg, [1291], 3)
		1293: Opcode	match_variant(4, InstructionData::StoreNoOffset, opcode)
		1294: ValueArray2	match_variant(4, InstructionData::StoreNoOffset, args)
		1295: MemFlags	match_variant(4, InstructionData::StoreNoOffset, flags)
		1296: (Value, Value)	extractor(value_array_2, 1294)
		1297: Value	match_tuple(1296, 0)
		1298: Value	match_tuple(1296, 1)
		1299: Type	extractor(value_type, 1297)
		1300: Option(Type)	extractor(valid_atomic_transaction, 1299)
		1301: Type	match_some(1300)
		1302: Reg	constructor(put_in_reg, [1297], 1)
		1303: Reg	constructor(put_in_reg, [1298], 2)
		1304: SideEffectNoResult	constructor(store_release, [1301, 1295, 1302, 1303], 3)
		1305: InstOutput	constructor(side_effect, [1304], 4)
		1306: Option(())	extractor(use_lse, 0)
		1307: ()	match_some(1306)
		1308: Opcode	match_variant(4, InstructionData::AtomicRmw, opcode)
		1309: ValueArray2	match_variant(4, InstructionData::AtomicRmw, args)
		1310: MemFlags	match_variant(4, InstructionData::AtomicRmw, flags)
		1311: AtomicRmwOp	match_variant(4, InstructionData::AtomicRmw, op)
		1312: (Value, Value)	extractor(value_array_2, 1309)
		1313: Value	match_tuple(1312, 0)
		1314: Value	match_tuple(1312, 1)
		1315: AtomicRMWOp	make_variant(AtomicRMWOp::Add, [])
		1316: Reg	constructor(put_in_reg, [1314], 1)
		1317: Reg	constructor(lse_atomic_rmw, [1315, 1313, 1316, 1286, 1310], 2)
		1318: InstOutput	constructor(output_reg, [1317], 3)
		1319: AtomicRMWOp	make_variant(AtomicRMWOp::Eor, [])
		1320: Reg	constructor(lse_atomic_rmw, [1319, 1313, 1316, 1286, 1310], 2)
		1321: InstOutput	constructor(output_reg, [1320], 3)
		1322: AtomicRMWOp	make_variant(AtomicRMWOp::Set, [])
		1323: Reg	constructor(lse_atomic_rmw, [1322, 1313, 1316, 1286, 1310], 2)
		1324: InstOutput	constructor(output_reg, [1323], 3)
		1325: AtomicRMWOp	make_variant(AtomicRMWOp::Smax, [])
		1326: Reg	constructor(lse_atomic_rmw, [1325, 1313, 1316, 1286, 1310], 2)
		1327: InstOutput	constructor(output_reg, [1326], 3)
		1328: AtomicRMWOp	make_variant(AtomicRMWOp::Smin, [])
		1329: Reg	constructor(lse_atomic_rmw, [1328, 1313, 1316, 1286, 1310], 2)
		1330: InstOutput	constructor(output_reg, [1329], 3)
		1331: AtomicRMWOp	make_variant(AtomicRMWOp::Umax, [])
		1332: Reg	constructor(lse_atomic_rmw, [1331, 1313, 1316, 1286, 1310], 2)
		1333: InstOutput	constructor(output_reg, [1332], 3)
		1334: AtomicRMWOp	make_variant(AtomicRMWOp::Umin, [])
		1335: Reg	constructor(lse_atomic_rmw, [1334, 1313, 1316, 1286, 1310], 2)
		1336: InstOutput	constructor(output_reg, [1335], 3)
		1337: Reg	constructor(put_in_reg, [1314], 2)
		1338: Reg	constructor(sub, [1286, 580, 1337], 3)
		1339: Reg	constructor(lse_atomic_rmw, [1315, 1313, 1338, 1286, 1310], 4)
		1340: InstOutput	constructor(output_reg, [1339], 5)
		1341: AtomicRMWOp	make_variant(AtomicRMWOp::Clr, [])
		1342: Reg	constructor(eon, [1286, 1316, 1211], 3)
		1343: Reg	constructor(lse_atomic_rmw, [1341, 1313, 1342, 1286, 1310], 4)
		1344: InstOutput	constructor(output_reg, [1343], 5)
		1345: AtomicRMWLoopOp	make_variant(AtomicRMWLoopOp::Add, [])
		1346: Reg	constructor(put_in_reg, [1313], 1)
		1347: Reg	constructor(atomic_rmw_loop, [1345, 1346, 1337, 1286, 1310], 3)
		1348: InstOutput	constructor(output_reg, [1347], 4)
		1349: AtomicRMWLoopOp	make_variant(AtomicRMWLoopOp::Sub, [])
		1350: Reg	constructor(atomic_rmw_loop, [1349, 1346, 1337, 1286, 1310], 3)
		1351: InstOutput	constructor(output_reg, [1350], 4)
		1352: AtomicRMWLoopOp	make_variant(AtomicRMWLoopOp::And, [])
		1353: Reg	constructor(atomic_rmw_loop, [1352, 1346, 1337, 1286, 1310], 3)
		1354: InstOutput	constructor(output_reg, [1353], 4)
		1355: AtomicRMWLoopOp	make_variant(AtomicRMWLoopOp::Nand, [])
		1356: Reg	constructor(atomic_rmw_loop, [1355, 1346, 1337, 1286, 1310], 3)
		1357: InstOutput	constructor(output_reg, [1356], 4)
		1358: AtomicRMWLoopOp	make_variant(AtomicRMWLoopOp::Orr, [])
		1359: Reg	constructor(atomic_rmw_loop, [1358, 1346, 1337, 1286, 1310], 3)
		1360: InstOutput	constructor(output_reg, [1359], 4)
		1361: AtomicRMWLoopOp	make_variant(AtomicRMWLoopOp::Eor, [])
		1362: Reg	constructor(atomic_rmw_loop, [1361, 1346, 1337, 1286, 1310], 3)
		1363: InstOutput	constructor(output_reg, [1362], 4)
		1364: AtomicRMWLoopOp	make_variant(AtomicRMWLoopOp::Smin, [])
		1365: Reg	constructor(atomic_rmw_loop, [1364, 1346, 1337, 1286, 1310], 3)
		1366: InstOutput	constructor(output_reg, [1365], 4)
		1367: AtomicRMWLoopOp	make_variant(AtomicRMWLoopOp::Smax, [])
		1368: Reg	constructor(atomic_rmw_loop, [1367, 1346, 1337, 1286, 1310], 3)
		1369: InstOutput	constructor(output_reg, [1368], 4)
		1370: AtomicRMWLoopOp	make_variant(AtomicRMWLoopOp::Umin, [])
		1371: Reg	constructor(atomic_rmw_loop, [1370, 1346, 1337, 1286, 1310], 3)
		1372: InstOutput	constructor(output_reg, [1371], 4)
		1373: AtomicRMWLoopOp	make_variant(AtomicRMWLoopOp::Umax, [])
		1374: Reg	constructor(atomic_rmw_loop, [1373, 1346, 1337, 1286, 1310], 3)
		1375: InstOutput	constructor(output_reg, [1374], 4)
		1376: AtomicRMWLoopOp	make_variant(AtomicRMWLoopOp::Xchg, [])
		1377: Reg	constructor(atomic_rmw_loop, [1376, 1346, 1337, 1286, 1310], 3)
		1378: InstOutput	constructor(output_reg, [1377], 4)
		1379: Opcode	match_variant(4, InstructionData::AtomicCas, opcode)
		1380: ValueArray3	match_variant(4, InstructionData::AtomicCas, args)
		1381: MemFlags	match_variant(4, InstructionData::AtomicCas, flags)
		1382: (Value, Value, Value)	extractor(value_array_3, 1380)
		1383: Value	match_tuple(1382, 0)
		1384: Value	match_tuple(1382, 1)
		1385: Value	match_tuple(1382, 2)
		1386: Reg	constructor(put_in_reg, [1383], 1)
		1387: Reg	constructor(put_in_reg, [1384], 2)
		1388: Reg	constructor(put_in_reg, [1385], 3)
		1389: Reg	constructor(lse_atomic_cas, [1386, 1387, 1388, 1286, 1381], 4)
		1390: InstOutput	constructor(output_reg, [1389], 5)
		1391: Reg	constructor(atomic_cas_loop, [1386, 1387, 1388, 1286, 1381], 4)
		1392: InstOutput	constructor(output_reg, [1391], 5)
		1393: Reg	constructor(fcvtn, [241, 242], 2)
		1394: InstOutput	constructor(output_reg, [1393], 3)
		1395: Option(Type)	extractor(ty_vec128_int, 3)
		1396: Type	match_some(1395)
		1397: Option(Value)	constructor(zero_value, [33], 0)
		1398: Value	match_some(1397)
		1399: ScalarSize	constructor(lane_size, [1396], 2)
		1400: Reg	constructor(sqxtn, [34, 1399], 3)
		1401: InstOutput	constructor(output_reg, [1400], 4)
		1402: Option(Type)	extractor(ty_vec64_int, 3)
		1403: Type	match_some(1402)
		1404: Reg	constructor(mov_vec_elem, [34, 35, 339, 266, 161], 3)
		1405: ScalarSize	constructor(lane_size, [1403], 4)
		1406: Reg	constructor(sqxtn, [1404, 1405], 5)
		1407: InstOutput	constructor(output_reg, [1406], 6)
		1408: Reg	constructor(put_in_reg, [33], 4)
		1409: ScalarSize	constructor(lane_size, [1396], 5)
		1410: Reg	constructor(sqxtn2, [1400, 1408, 1409], 6)
		1411: InstOutput	constructor(output_reg, [1410], 7)
		1412: Reg	constructor(sqxtun, [34, 1399], 3)
		1413: InstOutput	constructor(output_reg, [1412], 4)
		1414: Reg	constructor(sqxtun, [1404, 1405], 5)
		1415: InstOutput	constructor(output_reg, [1414], 6)
		1416: Reg	constructor(sqxtun2, [1412, 1408, 1409], 6)
		1417: InstOutput	constructor(output_reg, [1416], 7)
		1418: Reg	constructor(uqxtn, [34, 1399], 3)
		1419: InstOutput	constructor(output_reg, [1418], 4)
		1420: Reg	constructor(uqxtn, [1404, 1405], 5)
		1421: InstOutput	constructor(output_reg, [1420], 6)
		1422: Reg	constructor(uqxtn2, [1418, 1408, 1409], 6)
		1423: InstOutput	constructor(output_reg, [1422], 7)
		1424: VecExtendOp	make_variant(VecExtendOp::Sxtl, [])
		1425: ScalarSize	constructor(lane_size, [3], 2)
		1426: Reg	constructor(vec_extend, [1424, 241, 274, 1425], 3)
		1427: InstOutput	constructor(output_reg, [1426], 4)
		1428: ScalarSize	constructor(lane_size, [570], 2)
		1429: Reg	constructor(vec_extend, [1424, 241, 275, 1428], 3)
		1430: InstOutput	constructor(output_reg, [1429], 4)
		1431: VectorSize	make_variant(VectorSize::Size32x2, [])
		1432: Reg	constructor(fpu_move_from_vec, [241, 339, 1431], 2)
		1433: ScalarSize	constructor(lane_size, [3], 3)
		1434: Reg	constructor(vec_extend, [1424, 1432, 274, 1433], 4)
		1435: InstOutput	constructor(output_reg, [1434], 5)
		1436: VecExtendOp	make_variant(VecExtendOp::Uxtl, [])
		1437: Reg	constructor(vec_extend, [1436, 241, 274, 1425], 3)
		1438: InstOutput	constructor(output_reg, [1437], 4)
		1439: Reg	constructor(vec_extend, [1436, 241, 275, 1428], 3)
		1440: InstOutput	constructor(output_reg, [1439], 4)
		1441: Reg	constructor(vec_extend, [1436, 1432, 274, 1433], 4)
		1442: InstOutput	constructor(output_reg, [1441], 5)
		1443: SideEffectNoResult	constructor(aarch64_fence, [], 1)
		1444: InstOutput	constructor(side_effect, [1443], 2)
		1445: OperandSize	constructor(operand_size, [232], 1)
		1446: Imm12	constructor(u8_into_imm12, [266], 3)
		1447: ProducesFlags	constructor(cmp_imm, [1445, 581, 1446], 4)
		1448: ValueRegs	constructor(with_flags, [1447, 263], 6)
		1449: InstOutput	constructor(output, [1448], 7)
		1450: Imm12	constructor(u8_into_imm12, [339], 3)
		1451: ProducesFlags	constructor(cmn_imm, [1445, 581, 1450], 4)
		1452: ValueRegs	constructor(with_flags, [1451, 263], 6)
		1453: InstOutput	constructor(output, [1452], 7)
		1454: SideEffectNoResult	constructor(brk, [], 1)
		1455: InstOutput	constructor(side_effect, [1454], 2)
		1456: Opcode	match_variant(4, InstructionData::FuncAddr, opcode)
		1457: FuncRef	match_variant(4, InstructionData::FuncAddr, func_ref)
		1458: (SigRef, ExternalName, RelocDistance)	extractor(func_ref_data, 1457)
		1459: SigRef	match_tuple(1458, 0)
		1460: ExternalName	match_tuple(1458, 1)
		1461: RelocDistance	match_tuple(1458, 2)
		1462: BoxExternalName	constructor(box_external_name, [1460], 1)
		1463: i64	const_int(0, i64)
		1464: Reg	constructor(load_ext_name, [1462, 1463], 2)
		1465: InstOutput	constructor(output_reg, [1464], 3)
		1466: Opcode	match_variant(4, InstructionData::UnaryGlobalValue, opcode)
		1467: GlobalValue	match_variant(4, InstructionData::UnaryGlobalValue, global_value)
		1468: Option((ExternalName, RelocDistance, i64))	extractor(symbol_value_data, 1467)
		1469: (ExternalName, RelocDistance, i64)	match_some(1468)
		1470: ExternalName	match_tuple(1469, 0)
		1471: RelocDistance	match_tuple(1469, 1)
		1472: i64	match_tuple(1469, 2)
		1473: BoxExternalName	constructor(box_external_name, [1470], 1)
		1474: Reg	constructor(load_ext_name, [1473, 1472], 2)
		1475: InstOutput	constructor(output_reg, [1474], 3)
		1476: Reg	constructor(aarch64_fp, [], 1)
		1477: InstOutput	constructor(output_reg, [1476], 2)
		1478: Reg	constructor(aarch64_sp, [], 1)
		1479: InstOutput	constructor(output_reg, [1478], 2)
		1480: Reg	constructor(aarch64_link, [], 1)
		1481: InstOutput	constructor(output_reg, [1480], 2)
		1482: Opcode	match_variant(4, InstructionData::Call, opcode)
		1483: ValueList	match_variant(4, InstructionData::Call, args)
		1484: FuncRef	match_variant(4, InstructionData::Call, func_ref)
		1485: ValueSlice	extractor(value_list_slice, 1483)
		1486: (SigRef, ExternalName, RelocDistance)	extractor(func_ref_data, 1484)
		1487: SigRef	match_tuple(1486, 0)
		1488: ExternalName	match_tuple(1486, 1)
		1489: RelocDistance	match_tuple(1486, 2)
		1490: InstOutput	constructor(gen_call, [1487, 1488, 1489, 1485], 1)
		1491: Opcode	match_variant(4, InstructionData::CallIndirect, opcode)
		1492: ValueList	match_variant(4, InstructionData::CallIndirect, args)
		1493: SigRef	match_variant(4, InstructionData::CallIndirect, sig_ref)
		1494: ValueSlice	extractor(value_list_slice, 1492)
		1495: Option((Value, ValueSlice))	extractor(value_slice_unwrap, 1494)
		1496: (Value, ValueSlice)	match_some(1495)
		1497: Value	match_tuple(1496, 0)
		1498: ValueSlice	match_tuple(1496, 1)
		1499: InstOutput	constructor(gen_call_indirect, [1493, 1497, 1498], 1)
		1500: Opcode	match_variant(4, InstructionData::MultiAry, opcode)
		1501: ValueList	match_variant(4, InstructionData::MultiAry, args)
		1502: ValueSlice	extractor(value_list_slice, 1501)
		1503: InstOutput	constructor(lower_return, [1502], 1)
		1504: InstOutput	constructor(gen_return_call, [1487, 1488, 1489, 1485], 1)
		1505: InstOutput	constructor(gen_return_call_indirect, [1493, 1497, 1498], 1)
		1506: Opcode	match_variant(4, InstructionData::Load, opcode)
		1507: Value	match_variant(4, InstructionData::Load, arg)
		1508: MemFlags	match_variant(4, InstructionData::Load, flags)
		1509: Offset32	match_variant(4, InstructionData::Load, offset)
		1510: i32	constructor(offset32_to_i32, [1509], 0)
		1511: AMode	constructor(amode, [1163, 1507, 1510], 1)
		1512: Reg	constructor(aarch64_uload8, [1511, 1508], 2)
		1513: InstOutput	constructor(output_reg, [1512], 3)
		1514: AMode	constructor(amode, [1029, 1507, 1510], 1)
		1515: Reg	constructor(aarch64_uload16, [1514, 1508], 2)
		1516: InstOutput	constructor(output_reg, [1515], 3)
		1517: AMode	constructor(amode, [865, 1507, 1510], 1)
		1518: Reg	constructor(aarch64_uload32, [1517, 1508], 2)
		1519: InstOutput	constructor(output_reg, [1518], 3)
		1520: AMode	constructor(amode, [132, 1507, 1510], 1)
		1521: Reg	constructor(aarch64_uload64, [1520, 1508], 2)
		1522: InstOutput	constructor(output_reg, [1521], 3)
		1523: AMode	constructor(amode, [475, 1507, 1510], 1)
		1524: Reg	constructor(aarch64_fpuload32, [1523, 1508], 2)
		1525: InstOutput	constructor(output_reg, [1524], 3)
		1526: AMode	constructor(amode, [482, 1507, 1510], 1)
		1527: Reg	constructor(aarch64_fpuload64, [1526, 1508], 2)
		1528: InstOutput	constructor(output_reg, [1527], 3)
		1529: PairAMode	constructor(pair_amode, [1507, 1510], 1)
		1530: ValueRegs	constructor(aarch64_loadp64, [1529, 1508], 2)
		1531: InstOutput	constructor(output, [1530], 3)
		1532: Option(Type)	extractor(ty_vec64, 3)
		1533: Type	match_some(1532)
		1534: Type	const_prim(I8X16)
		1535: AMode	constructor(amode, [1534, 1507, 1510], 1)
		1536: Reg	constructor(aarch64_fpuload128, [1535, 1508], 2)
		1537: InstOutput	constructor(output_reg, [1536], 3)
		1538: Option(Type)	extractor(ty_dyn_vec64, 3)
		1539: Type	match_some(1538)
		1540: Option(Type)	extractor(ty_dyn_vec128, 3)
		1541: Type	match_some(1540)
		1542: Reg	constructor(aarch64_sload8, [1511, 1508], 2)
		1543: InstOutput	constructor(output_reg, [1542], 3)
		1544: Reg	constructor(aarch64_sload16, [1514, 1508], 2)
		1545: InstOutput	constructor(output_reg, [1544], 3)
		1546: Reg	constructor(aarch64_sload32, [1517, 1508], 2)
		1547: InstOutput	constructor(output_reg, [1546], 3)
		1548: ScalarSize	make_variant(ScalarSize::Size16, [])
		1549: Reg	constructor(vec_extend, [1424, 1527, 274, 1548], 3)
		1550: InstOutput	constructor(output_reg, [1549], 4)
		1551: Reg	constructor(vec_extend, [1436, 1527, 274, 1548], 3)
		1552: InstOutput	constructor(output_reg, [1551], 4)
		1553: Reg	constructor(vec_extend, [1424, 1527, 274, 242], 3)
		1554: InstOutput	constructor(output_reg, [1553], 4)
		1555: Reg	constructor(vec_extend, [1436, 1527, 274, 242], 3)
		1556: InstOutput	constructor(output_reg, [1555], 4)
		1557: Reg	constructor(vec_extend, [1424, 1527, 274, 245], 3)
		1558: InstOutput	constructor(output_reg, [1557], 4)
		1559: Reg	constructor(vec_extend, [1436, 1527, 274, 245], 3)
		1560: InstOutput	constructor(output_reg, [1559], 4)
		1561: Opcode	match_variant(4, InstructionData::Store, opcode)
		1562: ValueArray2	match_variant(4, InstructionData::Store, args)
		1563: MemFlags	match_variant(4, InstructionData::Store, flags)
		1564: Offset32	match_variant(4, InstructionData::Store, offset)
		1565: (Value, Value)	extractor(value_array_2, 1562)
		1566: Value	match_tuple(1565, 0)
		1567: Value	match_tuple(1565, 1)
		1568: Type	extractor(value_type, 1566)
		1569: i32	constructor(offset32_to_i32, [1564], 0)
		1570: AMode	constructor(amode, [1163, 1567, 1569], 1)
		1571: Reg	constructor(put_in_reg, [1566], 2)
		1572: SideEffectNoResult	constructor(aarch64_store8, [1570, 1563, 1571], 3)
		1573: InstOutput	constructor(side_effect, [1572], 4)
		1574: AMode	constructor(amode, [1029, 1567, 1569], 1)
		1575: SideEffectNoResult	constructor(aarch64_store16, [1574, 1563, 1571], 3)
		1576: InstOutput	constructor(side_effect, [1575], 4)
		1577: AMode	constructor(amode, [865, 1567, 1569], 1)
		1578: SideEffectNoResult	constructor(aarch64_store32, [1577, 1563, 1571], 3)
		1579: InstOutput	constructor(side_effect, [1578], 4)
		1580: AMode	constructor(amode, [132, 1567, 1569], 1)
		1581: SideEffectNoResult	constructor(aarch64_store64, [1580, 1563, 1571], 3)
		1582: InstOutput	constructor(side_effect, [1581], 4)
		1583: AMode	constructor(amode, [475, 1567, 1569], 1)
		1584: SideEffectNoResult	constructor(aarch64_fpustore32, [1583, 1563, 1571], 3)
		1585: InstOutput	constructor(side_effect, [1584], 4)
		1586: AMode	constructor(amode, [482, 1567, 1569], 1)
		1587: SideEffectNoResult	constructor(aarch64_fpustore64, [1586, 1563, 1571], 3)
		1588: InstOutput	constructor(side_effect, [1587], 4)
		1589: PairAMode	constructor(pair_amode, [1567, 1569], 1)
		1590: ValueRegs	constructor(put_in_regs, [1566], 2)
		1591: Reg	constructor(value_regs_get, [1590, 125], 3)
		1592: ValueRegs	constructor(put_in_regs, [1566], 4)
		1593: Reg	constructor(value_regs_get, [1592, 127], 5)
		1594: SideEffectNoResult	constructor(aarch64_storep64, [1589, 1563, 1591, 1593], 6)
		1595: InstOutput	constructor(side_effect, [1594], 7)
		1596: Option(Type)	extractor(ty_vec64, 1568)
		1597: Type	match_some(1596)
		1598: Option(Type)	extractor(ty_vec128, 1568)
		1599: Type	match_some(1598)
		1600: AMode	constructor(amode, [1534, 1567, 1569], 1)
		1601: SideEffectNoResult	constructor(aarch64_fpustore128, [1600, 1563, 1571], 3)
		1602: InstOutput	constructor(side_effect, [1601], 4)
		1603: Option(Type)	extractor(ty_dyn_vec64, 1568)
		1604: Type	match_some(1603)
		1605: Option(Type)	extractor(ty_dyn_vec128, 1568)
		1606: Type	match_some(1605)
		1607: PReg	constructor(preg_pinned, [], 1)
		1608: Reg	constructor(mov_from_preg, [1607], 2)
		1609: InstOutput	constructor(output_reg, [1608], 3)
		1610: SideEffectNoResult	constructor(write_pinned_reg, [241], 2)
		1611: InstOutput	constructor(side_effect, [1610], 3)
		1612: Option(Type)	extractor(ty_float_or_vec, 3)
		1613: Type	match_some(1612)
		1614: Type	extractor(value_type, 1288)
		1615: Option(Type)	extractor(ty_float_or_vec, 1614)
		1616: Type	match_some(1615)
		1617: InstOutput	constructor(output_value, [1288], 1)
		1618: Option(Type)	constructor(ty_int_ref_scalar_64, [1614], 0)
		1619: Type	match_some(1618)
		1620: ScalarSize	constructor(scalar_size, [1614], 2)
		1621: Reg	constructor(mov_to_fpu, [1290, 1620], 3)
		1622: InstOutput	constructor(output_reg, [1621], 4)
		1623: Option(Type)	extractor(fits_in_64, 1614)
		1624: Type	match_some(1623)
		1625: Option(Type)	extractor(ty_float_or_vec, 1624)
		1626: Type	match_some(1625)
		1627: ScalarSize	constructor(scalar_size, [3], 2)
		1628: Reg	constructor(mov_from_vec, [1290, 266, 1627], 3)
		1629: InstOutput	constructor(output_reg, [1628], 4)
		1630: bool	constructor(is_ref_type, [1614], 0)
		1631: bool	constructor(is_ref_type, [3], 0)
		1632: Reg	constructor(copy_reg, [3, 1290], 2)
		1633: InstOutput	constructor(output_reg, [1632], 3)
		1634: Reg	constructor(copy_reg, [1614, 1290], 2)
		1635: InstOutput	constructor(output_reg, [1634], 3)
		1636: Opcode	match_variant(4, InstructionData::BinaryImm8, opcode)
		1637: Value	match_variant(4, InstructionData::BinaryImm8, arg)
		1638: Uimm8	match_variant(4, InstructionData::BinaryImm8, imm)
		1639: u8	extractor(u8_from_uimm8, 1638)
		1640: InstOutput	constructor(output_value, [1637], 1)
		1641: Reg	constructor(put_in_reg, [1637], 1)
		1642: ScalarSize	constructor(scalar_size, [675], 2)
		1643: Reg	constructor(mov_from_vec, [1641, 1639, 1642], 3)
		1644: InstOutput	constructor(output_reg, [1643], 4)
		1645: Type	extractor(value_type, 1637)
		1646: VectorSize	constructor(vector_size, [1645], 2)
		1647: Reg	constructor(fpu_move_from_vec, [1641, 1639, 1646], 3)
		1648: InstOutput	constructor(output_reg, [1647], 4)
		1649: Opcode	match_variant(4, InstructionData::TernaryImm8, opcode)
		1650: ValueArray2	match_variant(4, InstructionData::TernaryImm8, args)
		1651: Uimm8	match_variant(4, InstructionData::TernaryImm8, imm)
		1652: (Value, Value)	extractor(value_array_2, 1650)
		1653: Value	match_tuple(1652, 0)
		1654: Value	match_tuple(1652, 1)
		1655: Type	extractor(value_type, 1653)
		1656: Type	extractor(value_type, 1654)
		1657: Option(Type)	extractor(ty_int, 1656)
		1658: Type	match_some(1657)
		1659: u8	extractor(u8_from_uimm8, 1651)
		1660: Reg	constructor(put_in_reg, [1653], 1)
		1661: Reg	constructor(put_in_reg, [1654], 2)
		1662: VectorSize	constructor(vector_size, [1655], 3)
		1663: Reg	constructor(mov_to_vec, [1660, 1661, 1659, 1662], 4)
		1664: InstOutput	constructor(output_reg, [1663], 5)
		1665: Option(Type)	extractor(ty_scalar_float, 1656)
		1666: Type	match_some(1665)
		1667: Reg	constructor(mov_vec_elem, [1660, 1661, 1659, 266, 1662], 4)
		1668: InstOutput	constructor(output_reg, [1667], 5)
		1669: Opcode	match_variant(4, InstructionData::StackLoad, opcode)
		1670: StackSlot	match_variant(4, InstructionData::StackLoad, stack_slot)
		1671: Offset32	match_variant(4, InstructionData::StackLoad, offset)
		1672: Reg	constructor(compute_stack_addr, [1670, 1671], 1)
		1673: InstOutput	constructor(output_reg, [1672], 2)
		1674: u8	const_int(7, u8)
		1675: Reg	constructor(sshr_vec_imm, [241, 1674, 146], 2)
		1676: u128	const_int(-169808226154284360427508033573982305791, u128)
		1677: Reg	constructor(constant_f128, [1676], 3)
		1678: Reg	constructor(and_vec, [1675, 1677, 146], 4)
		1679: u8	const_int(8, u8)
		1680: Reg	constructor(vec_extract, [1678, 1678, 1679], 5)
		1681: Reg	constructor(zip1, [1678, 1680, 146], 6)
		1682: Reg	constructor(addv, [1681, 151], 7)
		1683: Reg	constructor(mov_from_vec, [1682, 266, 1548], 8)
		1684: InstOutput	constructor(output_reg, [1683], 9)
		1685: u8	const_int(15, u8)
		1686: Reg	constructor(sshr_vec_imm, [241, 1685, 151], 2)
		1687: u128	const_int(664619068533544770747334646890102785, u128)
		1688: Reg	constructor(constant_f128, [1687], 3)
		1689: Reg	constructor(and_vec, [1686, 1688, 151], 4)
		1690: Reg	constructor(addv, [1689, 151], 5)
		1691: Reg	constructor(mov_from_vec, [1690, 266, 1548], 6)
		1692: InstOutput	constructor(output_reg, [1691], 7)
		1693: u8	const_int(31, u8)
		1694: Reg	constructor(sshr_vec_imm, [241, 1693, 156], 2)
		1695: u128	const_int(633825300187901677051779743745, u128)
		1696: Reg	constructor(constant_f128, [1695], 3)
		1697: Reg	constructor(and_vec, [1694, 1696, 156], 4)
		1698: Reg	constructor(addv, [1697, 156], 5)
		1699: Reg	constructor(mov_from_vec, [1698, 266, 242], 6)
		1700: InstOutput	constructor(output_reg, [1699], 7)
		1701: Reg	constructor(mov_from_vec, [241, 339, 245], 2)
		1702: Reg	constructor(put_in_reg, [231], 3)
		1703: Reg	constructor(mov_from_vec, [1702, 266, 245], 4)
		1704: Reg	constructor(lsr_imm, [132, 1701, 765], 6)
		1705: Reg	constructor(lsr_imm, [132, 1703, 1015], 8)
		1706: Option(ShiftOpAndAmt)	constructor(lshl_from_u64, [132, 333], 0)
		1707: ShiftOpAndAmt	match_some(1706)
		1708: Reg	constructor(add_shift, [132, 1705, 1704, 1707], 9)
		1709: InstOutput	constructor(output_reg, [1708], 10)
		1710: Opcode	match_variant(4, InstructionData::IntAddTrap, opcode)
		1711: ValueArray2	match_variant(4, InstructionData::IntAddTrap, args)
		1712: TrapCode	match_variant(4, InstructionData::IntAddTrap, code)
		1713: (Value, Value)	extractor(value_array_2, 1711)
		1714: Value	match_tuple(1713, 0)
		1715: Value	match_tuple(1713, 1)
		1716: Reg	constructor(put_in_reg, [1714], 1)
		1717: Reg	constructor(put_in_reg, [1715], 2)
		1718: ProducesFlags	constructor(add_with_flags_paired, [28, 1716, 1717], 3)
		1719: Reg	constructor(trap_if_overflow, [1718, 1712], 4)
		1720: InstOutput	constructor(output_reg, [1719], 5)
		1721: ArgumentExtension	make_variant(ArgumentExtension::Uext, [])
		1722: ALUOp	make_variant(ALUOp::Add, [])
		1723: InstOutput	constructor(overflow_op_small, [904, 32, 33, 1721, 1722], 1)
		1724: Option(Type)	extractor(ty_32_or_64, 3)
		1725: Type	match_some(1724)
		1726: ALUOp	make_variant(ALUOp::AddS, [])
		1727: Cond	make_variant(Cond::Hs, [])
		1728: InstOutput	constructor(overflow_op_normal, [1725, 32, 33, 1726, 1727], 1)
		1729: ALUOp	make_variant(ALUOp::AdcS, [])
		1730: InstOutput	constructor(overflow_op_128, [32, 33, 1726, 1729, 1727], 1)
		1731: ArgumentExtension	make_variant(ArgumentExtension::Sext, [])
		1732: InstOutput	constructor(overflow_op_small, [904, 32, 33, 1731, 1722], 1)
		1733: Cond	make_variant(Cond::Vs, [])
		1734: InstOutput	constructor(overflow_op_normal, [1725, 32, 33, 1726, 1733], 1)
		1735: InstOutput	constructor(overflow_op_128, [32, 33, 1726, 1729, 1733], 1)
		1736: ALUOp	make_variant(ALUOp::Sub, [])
		1737: InstOutput	constructor(overflow_op_small, [904, 32, 33, 1721, 1736], 1)
		1738: ALUOp	make_variant(ALUOp::SubS, [])
		1739: InstOutput	constructor(overflow_op_normal, [1725, 32, 33, 1738, 676], 1)
		1740: ALUOp	make_variant(ALUOp::SbcS, [])
		1741: InstOutput	constructor(overflow_op_128, [32, 33, 1738, 1740, 676], 1)
		1742: InstOutput	constructor(overflow_op_small, [904, 32, 33, 1731, 1736], 1)
		1743: InstOutput	constructor(overflow_op_normal, [1725, 32, 33, 1738, 1733], 1)
		1744: InstOutput	constructor(overflow_op_128, [32, 33, 1738, 1740, 1733], 1)
		1745: ExtendOp	constructor(lower_extend_op, [904, 1721], 1)
		1746: Reg	constructor(put_in_reg_zext32, [32], 2)
		1747: Reg	constructor(put_in_reg_zext32, [33], 3)
		1748: Reg	constructor(madd, [904, 1746, 1747, 791], 5)
		1749: ProducesFlags	constructor(cmp_extend, [272, 1748, 1748, 1745], 6)
		1750: ConsumesFlags	constructor(cset, [277], 7)
		1751: Reg	constructor(with_flags_reg, [1749, 1750], 8)
		1752: ValueRegs	constructor(value_reg, [1748], 9)
		1753: ValueRegs	constructor(value_reg, [1751], 10)
		1754: InstOutput	constructor(output_pair, [1752, 1753], 11)
		1755: Reg	constructor(umaddl, [34, 35, 269], 4)
		1756: ExtendOp	make_variant(ExtendOp::UXTW, [])
		1757: ProducesFlags	constructor(cmp_extend, [268, 1755, 1755, 1756], 5)
		1758: ConsumesFlags	constructor(cset, [277], 6)
		1759: Reg	constructor(with_flags_reg, [1757, 1758], 7)
		1760: ValueRegs	constructor(value_reg, [1755], 8)
		1761: ValueRegs	constructor(value_reg, [1759], 9)
		1762: InstOutput	constructor(output_pair, [1760, 1761], 10)
		1763: Reg	constructor(madd, [132, 34, 35, 269], 4)
		1764: Reg	constructor(put_in_reg, [33], 6)
		1765: Reg	constructor(umulh, [132, 916, 1764], 7)
		1766: Imm12	constructor(u8_into_imm12, [266], 8)
		1767: ProducesFlags	constructor(cmp64_imm, [1765, 1766], 9)
		1768: ConsumesFlags	constructor(cset, [277], 10)
		1769: Reg	constructor(with_flags_reg, [1767, 1768], 11)
		1770: ValueRegs	constructor(value_reg, [1763], 12)
		1771: ValueRegs	constructor(value_reg, [1769], 13)
		1772: InstOutput	constructor(output_pair, [1770, 1771], 14)
		1773: ExtendOp	constructor(lower_extend_op, [904, 1731], 1)
		1774: Reg	constructor(put_in_reg_sext32, [32], 2)
		1775: Reg	constructor(put_in_reg_sext32, [33], 3)
		1776: Reg	constructor(madd, [904, 1774, 1775, 791], 5)
		1777: ProducesFlags	constructor(cmp_extend, [272, 1776, 1776, 1773], 6)
		1778: Reg	constructor(with_flags_reg, [1777, 1750], 8)
		1779: ValueRegs	constructor(value_reg, [1776], 9)
		1780: ValueRegs	constructor(value_reg, [1778], 10)
		1781: InstOutput	constructor(output_pair, [1779, 1780], 11)
		1782: Reg	constructor(smaddl, [34, 35, 269], 4)
		1783: ExtendOp	make_variant(ExtendOp::SXTW, [])
		1784: ProducesFlags	constructor(cmp_extend, [268, 1782, 1782, 1783], 5)
		1785: Reg	constructor(with_flags_reg, [1784, 1758], 7)
		1786: ValueRegs	constructor(value_reg, [1782], 8)
		1787: ValueRegs	constructor(value_reg, [1785], 9)
		1788: InstOutput	constructor(output_pair, [1786, 1787], 10)
		1789: Reg	constructor(smulh, [132, 916, 1764], 7)
		1790: u64	const_int(63, u64)
		1791: ProducesFlags	constructor(cmp_rr_shift_asr, [268, 1789, 1763, 1790], 8)
		1792: ConsumesFlags	constructor(cset, [277], 9)
		1793: Reg	constructor(with_flags_reg, [1791, 1792], 10)
		1794: ValueRegs	constructor(value_reg, [1763], 11)
		1795: ValueRegs	constructor(value_reg, [1793], 12)
		1796: InstOutput	constructor(output_pair, [1794, 1795], 13)
		1797: TlsModel	extractor(tls_model, 3)
		1798: Reg	constructor(elf_tls_get_addr, [1470], 1)
		1799: InstOutput	constructor(output_reg, [1798], 2)
		1800: Reg	constructor(macho_tls_get_addr, [1470], 1)
		1801: InstOutput	constructor(output_reg, [1800], 2)
		1802: VecRRLongOp	make_variant(VecRRLongOp::Fcvtl32, [])
		1803: Reg	constructor(vec_rr_long, [1802, 241, 274], 2)
		1804: InstOutput	constructor(output_reg, [1803], 3)
		1805: Option((u32, u32))	extractor(dynamic_lane, 3)
		1806: (u32, u32)	match_some(1805)
		1807: u32	match_tuple(1806, 0)
		1808: u32	match_tuple(1806, 1)
		1809: ValueRegs	constructor(value_reg, [122], 5)
		1810: InstOutput	constructor(output, [1809], 6)
		1811: ValueRegs	constructor(value_reg, [564], 5)
		1812: InstOutput	constructor(output, [1811], 6)
		1813: Option((u32, u32))	extractor(dynamic_lane, 347)
		1814: (u32, u32)	match_some(1813)
		1815: u32	match_tuple(1814, 0)
		1816: u32	match_tuple(1814, 1)
		1817: VecALUOp	make_variant(VecALUOp::Mul, [])
		1818: Reg	constructor(vec_rrr, [1817, 34, 35, 349], 4)
		1819: ValueRegs	constructor(value_reg, [1818], 5)
		1820: InstOutput	constructor(output, [1819], 6)
		1821: ValueRegs	constructor(value_reg, [356], 5)
		1822: InstOutput	constructor(output, [1821], 6)
		1823: ValueRegs	constructor(value_reg, [365], 5)
		1824: InstOutput	constructor(output, [1823], 6)
		1825: ValueRegs	constructor(value_reg, [371], 5)
		1826: InstOutput	constructor(output, [1825], 6)
		1827: ValueRegs	constructor(value_reg, [377], 5)
		1828: InstOutput	constructor(output, [1827], 6)
		1829: ValueRegs	constructor(value_reg, [383], 5)
		1830: InstOutput	constructor(output, [1829], 6)
		1831: ValueRegs	constructor(value_reg, [389], 5)
		1832: InstOutput	constructor(output, [1831], 6)
		1833: Option(Type)	extractor(ty_dyn128_int, 3)
		1834: Type	match_some(1833)
		1835: ScalarSize	constructor(lane_size, [1834], 2)
		1836: Reg	constructor(sqxtn, [34, 1835], 3)
		1837: InstOutput	constructor(output_reg, [1836], 4)
		1838: Option(Type)	extractor(ty_dyn64_int, 3)
		1839: Type	match_some(1838)
		1840: ScalarSize	constructor(lane_size, [1839], 4)
		1841: Reg	constructor(sqxtn, [1404, 1840], 5)
		1842: InstOutput	constructor(output_reg, [1841], 6)
		1843: ScalarSize	constructor(lane_size, [1834], 5)
		1844: Reg	constructor(sqxtn2, [1836, 1408, 1843], 6)
		1845: InstOutput	constructor(output_reg, [1844], 7)
		1846: Reg	constructor(sqxtun, [34, 1835], 3)
		1847: InstOutput	constructor(output_reg, [1846], 4)
		1848: Reg	constructor(sqxtun, [1404, 1840], 5)
		1849: InstOutput	constructor(output_reg, [1848], 6)
		1850: Reg	constructor(sqxtun2, [1846, 1408, 1843], 6)
		1851: InstOutput	constructor(output_reg, [1850], 7)
		1852: Reg	constructor(uqxtn, [34, 1835], 3)
		1853: InstOutput	constructor(output_reg, [1852], 4)
		1854: Reg	constructor(uqxtn, [1404, 1840], 5)
		1855: InstOutput	constructor(output_reg, [1854], 6)
		1856: Reg	constructor(uqxtn2, [1852, 1408, 1843], 6)
		1857: InstOutput	constructor(output_reg, [1856], 7)
		1858: Opcode	match_variant(4, InstructionData::DynamicStackLoad, opcode)
		1859: DynamicStackSlot	match_variant(4, InstructionData::DynamicStackLoad, dynamic_stack_slot)
		1860: WritableReg	constructor(temp_writable_reg, [132], 1)
		1861: MInst	constructor(abi_dynamic_stackslot_addr, [1860, 1859], 2)
		1862: Unit	constructor(emit, [1861], 3)
		1863: Reg	constructor(writable_reg_to_reg, [1860], 0)
		1864: ValueRegs	constructor(value_reg, [1863], 4)
		1865: InstOutput	constructor(output, [1864], 5)
		1866: ValueRegs	constructor(value_reg, [1641], 2)
		1867: InstOutput	constructor(output, [1866], 3)
		1868: Reg	constructor(vec_extend, [1424, 241, 275, 1425], 3)
		1869: InstOutput	constructor(output_reg, [1868], 4)
		1870: Reg	constructor(vec_extend, [1436, 241, 275, 1425], 3)
		1871: InstOutput	constructor(output_reg, [1870], 4)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 19
			constraints = [
				1:	some
				4:	variant(InstructionData::UnaryImm)
				5:	variant(Opcode::Iconst)
			]
			prio = 0
			result = 10
			impure = [9, 10]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 24
			constraints = [
				1:	some
				4:	variant(InstructionData::NullAry)
				11:	variant(Opcode::Null)
			]
			prio = 0
			result = 14
			impure = [13, 14]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 29
			constraints = [
				4:	variant(InstructionData::UnaryIeee32)
				15:	variant(Opcode::F32const)
			]
			prio = 0
			result = 19
			impure = [18, 19]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 34
			constraints = [
				4:	variant(InstructionData::UnaryIeee64)
				20:	variant(Opcode::F64const)
			]
			prio = 0
			result = 24
			impure = [23, 24]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 39
			constraints = [
				4:	variant(InstructionData::NullAry)
				11:	variant(Opcode::Nop)
			]
			prio = 0
			result = 26
			impure = [25, 26]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 47
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				27:	some
				29:	variant(Opcode::Iadd)
			]
			prio = -1
			result = 37
			impure = [34, 35, 36, 37]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 51
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				27:	some
				29:	variant(Opcode::Iadd)
				38:	some
				40:	variant(InstructionData::UnaryImm)
				41:	variant(Opcode::Iconst)
				44:	some
			]
			prio = 4
			result = 47
			impure = [34, 46, 47]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 54
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				27:	some
				29:	variant(Opcode::Iadd)
				48:	some
				50:	variant(InstructionData::UnaryImm)
				51:	variant(Opcode::Iconst)
				54:	some
			]
			prio = 5
			result = 58
			impure = [56, 57, 58]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 59
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				27:	some
				29:	variant(Opcode::Iadd)
				59:	some
			]
			prio = 2
			result = 62
			impure = [34, 61, 62]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 63
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				27:	some
				29:	variant(Opcode::Iadd)
				63:	some
			]
			prio = 3
			result = 66
			impure = [56, 65, 66]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 69
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				27:	some
				29:	variant(Opcode::Iadd)
				67:	some
			]
			prio = 0
			result = 70
			impure = [34, 69, 70]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 72
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				27:	some
				29:	variant(Opcode::Iadd)
				71:	some
			]
			prio = 1
			result = 74
			impure = [56, 73, 74]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 77
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				27:	some
				29:	variant(Opcode::Iadd)
				38:	some
				40:	variant(InstructionData::Binary)
				75:	variant(Opcode::Ishl)
				80:	some
				82:	variant(InstructionData::UnaryImm)
				83:	variant(Opcode::Iconst)
				85:	some
			]
			prio = 7
			result = 89
			impure = [34, 87, 88, 89]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 82
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				27:	some
				29:	variant(Opcode::Iadd)
				48:	some
				50:	variant(InstructionData::Binary)
				90:	variant(Opcode::Ishl)
				95:	some
				97:	variant(InstructionData::UnaryImm)
				98:	variant(Opcode::Iconst)
				100:	some
			]
			prio = 6
			result = 104
			impure = [56, 102, 103, 104]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 88
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				27:	some
				29:	variant(Opcode::Iadd)
				38:	some
				40:	variant(InstructionData::Binary)
				75:	variant(Opcode::Imul)
			]
			prio = 7
			result = 109
			impure = [105, 106, 107, 108, 109]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 91
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				27:	some
				29:	variant(Opcode::Iadd)
				48:	some
				50:	variant(InstructionData::Binary)
				90:	variant(Opcode::Imul)
			]
			prio = 6
			result = 114
			impure = [110, 111, 112, 113, 114]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 95
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				27:	some
				29:	variant(Opcode::Isub)
				38:	some
				40:	variant(InstructionData::Binary)
				75:	variant(Opcode::Imul)
			]
			prio = 0
			result = 116
			impure = [105, 106, 107, 115, 116]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 100
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Iadd)
				117:	some
			]
			prio = -2
			result = 123
			impure = [34, 35, 121, 122, 123]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 104
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Iadd)
			]
			prio = -3
			result = 136
			impure = [124, 126, 128, 129, 130, 131, 133, 134, 135, 136]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 127
			constraints = [
				4:	variant(InstructionData::Shuffle)
				137:	variant(Opcode::Shuffle)
				143:	some
			]
			prio = 6
			result = 148
			impure = [145, 147, 148]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 129
			constraints = [
				4:	variant(InstructionData::Shuffle)
				137:	variant(Opcode::Shuffle)
				149:	some
			]
			prio = 5
			result = 153
			impure = [145, 152, 153]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 131
			constraints = [
				4:	variant(InstructionData::Shuffle)
				137:	variant(Opcode::Shuffle)
				154:	some
			]
			prio = 4
			result = 158
			impure = [145, 157, 158]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 133
			constraints = [
				4:	variant(InstructionData::Shuffle)
				137:	variant(Opcode::Shuffle)
				159:	some
			]
			prio = 3
			result = 163
			impure = [145, 162, 163]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 152
			constraints = [
				4:	variant(InstructionData::Shuffle)
				137:	variant(Opcode::Shuffle)
				164:	some
			]
			prio = 2
			result = 168
			impure = [145, 166, 167, 168]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 165
			constraints = [
				4:	variant(InstructionData::Shuffle)
				137:	variant(Opcode::Shuffle)
				169:	some
				170:	const_int(40022753436544980677706866553451184640)
			]
			prio = 1
			result = 172
			impure = [145, 166, 171, 172]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 167
			constraints = [
				4:	variant(InstructionData::Shuffle)
				137:	variant(Opcode::Shuffle)
				169:	some
				170:	const_int(41357194091136896220700492464948314881)
			]
			prio = 1
			result = 174
			impure = [145, 166, 173, 174]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 169
			constraints = [
				4:	variant(InstructionData::Shuffle)
				137:	variant(Opcode::Shuffle)
				169:	some
				170:	const_int(38693505158040971420872748913983226112)
			]
			prio = 1
			result = 176
			impure = [145, 166, 175, 176]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 171
			constraints = [
				4:	variant(InstructionData::Shuffle)
				137:	variant(Opcode::Shuffle)
				169:	some
				170:	const_int(41362386467224802506860000736977486594)
			]
			prio = 1
			result = 178
			impure = [145, 166, 177, 178]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 173
			constraints = [
				4:	variant(InstructionData::Shuffle)
				137:	variant(Opcode::Shuffle)
				169:	some
				170:	const_int(36024664572132682148381476266902159616)
			]
			prio = 1
			result = 180
			impure = [145, 166, 179, 180]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 175
			constraints = [
				4:	variant(InstructionData::Shuffle)
				137:	variant(Opcode::Shuffle)
				169:	some
				170:	const_int(41362427190500344320355979912890680580)
			]
			prio = 1
			result = 182
			impure = [145, 166, 181, 182]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 177
			constraints = [
				4:	variant(InstructionData::Shuffle)
				137:	variant(Opcode::Shuffle)
				169:	some
				170:	const_int(30686901955007814682223719185998020864)
			]
			prio = 1
			result = 184
			impure = [145, 166, 183, 184]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 179
			constraints = [
				4:	variant(InstructionData::Shuffle)
				137:	variant(Opcode::Shuffle)
				169:	some
				170:	const_int(41362427191743139026172726477975062792)
			]
			prio = 1
			result = 186
			impure = [145, 166, 185, 186]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 184
			constraints = [
				4:	variant(InstructionData::Shuffle)
				137:	variant(Opcode::Shuffle)
				169:	some
				170:	const_int(30609036675948388650355540050116153344)
			]
			prio = 1
			result = 188
			impure = [145, 166, 187, 188]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 186
			constraints = [
				4:	variant(InstructionData::Shuffle)
				137:	variant(Opcode::Shuffle)
				169:	some
				170:	const_int(41284561912683712994304547342093195272)
			]
			prio = 1
			result = 190
			impure = [145, 166, 189, 190]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 188
			constraints = [
				4:	variant(InstructionData::Shuffle)
				137:	variant(Opcode::Shuffle)
				169:	some
				170:	const_int(30686616892700419341528320311204774144)
			]
			prio = 1
			result = 192
			impure = [145, 166, 191, 192]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 190
			constraints = [
				4:	variant(InstructionData::Shuffle)
				137:	variant(Opcode::Shuffle)
				169:	some
				170:	const_int(41362142129435743685477327603181816072)
			]
			prio = 1
			result = 194
			impure = [145, 166, 193, 194]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 192
			constraints = [
				4:	variant(InstructionData::Shuffle)
				137:	variant(Opcode::Shuffle)
				169:	some
				170:	const_int(30686901951279430565641561564801794304)
			]
			prio = 1
			result = 196
			impure = [145, 166, 195, 196]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 194
			constraints = [
				4:	variant(InstructionData::Shuffle)
				137:	variant(Opcode::Shuffle)
				169:	some
				170:	const_int(41362427188014754909590568856778836232)
			]
			prio = 1
			result = 198
			impure = [145, 166, 197, 198]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 202
			constraints = [
				4:	variant(InstructionData::Shuffle)
				137:	variant(Opcode::Shuffle)
				169:	some
				170:	const_int(39950100895832629191365197868744970240)
			]
			prio = 1
			result = 200
			impure = [145, 166, 199, 200]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 204
			constraints = [
				4:	variant(InstructionData::Shuffle)
				137:	variant(Opcode::Shuffle)
				169:	some
				170:	const_int(41284541550424544734358823780242100481)
			]
			prio = 1
			result = 202
			impure = [145, 166, 201, 202]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 206
			constraints = [
				4:	variant(InstructionData::Shuffle)
				137:	variant(Opcode::Shuffle)
				169:	some
				170:	const_int(38693260819630515246292341806293057792)
			]
			prio = 1
			result = 204
			impure = [145, 166, 203, 204]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 208
			constraints = [
				4:	variant(InstructionData::Shuffle)
				137:	variant(Opcode::Shuffle)
				169:	some
				170:	const_int(41362142128814346332279593629287318274)
			]
			prio = 1
			result = 206
			impure = [145, 166, 205, 206]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 210
			constraints = [
				4:	variant(InstructionData::Shuffle)
				137:	variant(Opcode::Shuffle)
				169:	some
				170:	const_int(36024664569647092737326704519438008576)
			]
			prio = 1
			result = 208
			impure = [145, 166, 207, 208]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 212
			constraints = [
				4:	variant(InstructionData::Shuffle)
				137:	variant(Opcode::Shuffle)
				169:	some
				170:	const_int(41362427188014754909301208165426529540)
			]
			prio = 1
			result = 210
			impure = [145, 166, 209, 210]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 222
			constraints = [
				4:	variant(InstructionData::Shuffle)
				137:	variant(Opcode::Shuffle)
				169:	some
				170:	const_int(18687320815856387368178823909286805505)
			]
			prio = 1
			result = 212
			impure = [145, 211, 212]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 224
			constraints = [
				4:	variant(InstructionData::Shuffle)
				137:	variant(Opcode::Shuffle)
				169:	some
				170:	const_int(16018520953223639909183530438118932995)
			]
			prio = 1
			result = 214
			impure = [145, 213, 214]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 226
			constraints = [
				4:	variant(InstructionData::Shuffle)
				137:	variant(Opcode::Shuffle)
				169:	some
				170:	const_int(17342576855639742879858139805557719810)
			]
			prio = 1
			result = 216
			impure = [145, 215, 216]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 228
			constraints = [
				4:	variant(InstructionData::Shuffle)
				137:	variant(Opcode::Shuffle)
				169:	some
				170:	const_int(10680758337341567148842519922299176455)
			]
			prio = 1
			result = 218
			impure = [145, 217, 218]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 230
			constraints = [
				4:	variant(InstructionData::Shuffle)
				137:	variant(Opcode::Shuffle)
				169:	some
				170:	const_int(12004814239757670119517129289737963270)
			]
			prio = 1
			result = 220
			impure = [145, 219, 220]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 232
			constraints = [
				4:	variant(InstructionData::Shuffle)
				137:	variant(Opcode::Shuffle)
				169:	some
				170:	const_int(14673614102390417578512422760905835780)
			]
			prio = 1
			result = 222
			impure = [145, 221, 222]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 235
			constraints = [
				1:	some
				4:	variant(InstructionData::Shuffle)
				137:	variant(Opcode::Shuffle)
				169:	some
			]
			prio = 0
			result = 227
			impure = [223, 224, 225, 226, 227]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 241
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Swizzle)
			]
			prio = 0
			result = 229
			impure = [34, 35, 228, 229]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 246
			constraints = [
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Isplit)
				232:	const_prim(I128)
			]
			prio = 0
			result = 238
			impure = [233, 234, 235, 236, 237, 238]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 255
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Iconcat)
			]
			prio = 0
			result = 240
			impure = [34, 35, 239, 240]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 260
			constraints = [
				1:	some
				3:	const_prim(F32X4)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::ScalarToVector)
			]
			prio = 0
			result = 244
			impure = [241, 243, 244]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 263
			constraints = [
				1:	some
				3:	const_prim(F64X2)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::ScalarToVector)
			]
			prio = 0
			result = 247
			impure = [241, 246, 247]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 266
			constraints = [
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::ScalarToVector)
				232:	const_prim(I64)
			]
			prio = -1
			result = 249
			impure = [241, 248, 249]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 269
			constraints = [
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::ScalarToVector)
				250:	some
			]
			prio = -2
			result = 254
			impure = [252, 253, 254]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 283
			constraints = [
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::VallTrue)
				255:	some
				257:	const_int(64)
				258:	const_int(2)
			]
			prio = 0
			result = 265
			impure = [241, 259, 260, 261, 263, 264, 265]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 289
			constraints = [
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::VallTrue)
				255:	some
				257:	const_int(32)
				258:	const_int(2)
			]
			prio = 0
			result = 280
			impure = [241, 267, 269, 271, 273, 276, 278, 279, 280]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 306
			constraints = [
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::VallTrue)
				281:	some
				283:	some
			]
			prio = -1
			result = 293
			impure = [241, 286, 287, 288, 289, 290, 291, 292, 293]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 315
			constraints = [
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::VanyTrue)
			]
			prio = 0
			result = 297
			impure = [241, 294, 295, 296, 297]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 322
			constraints = [
				1:	some
				3:	const_prim(I16X8)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::IaddPairwise)
				38:	some
				40:	variant(InstructionData::Unary)
				48:	some
				50:	variant(InstructionData::Unary)
				298:	variant(Opcode::SwidenLow)
				300:	variant(Opcode::SwidenHigh)
			]
			equals = [
				299 == 301
			]
			prio = 0
			result = 304
			impure = [302, 303, 304]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 326
			constraints = [
				1:	some
				3:	const_prim(I32X4)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::IaddPairwise)
				38:	some
				40:	variant(InstructionData::Unary)
				48:	some
				50:	variant(InstructionData::Unary)
				298:	variant(Opcode::SwidenLow)
				300:	variant(Opcode::SwidenHigh)
			]
			equals = [
				299 == 301
			]
			prio = 0
			result = 306
			impure = [302, 305, 306]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 330
			constraints = [
				1:	some
				3:	const_prim(I16X8)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::IaddPairwise)
				38:	some
				40:	variant(InstructionData::Unary)
				48:	some
				50:	variant(InstructionData::Unary)
				298:	variant(Opcode::UwidenLow)
				300:	variant(Opcode::UwidenHigh)
			]
			equals = [
				299 == 301
			]
			prio = 0
			result = 308
			impure = [302, 307, 308]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 334
			constraints = [
				1:	some
				3:	const_prim(I32X4)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::IaddPairwise)
				38:	some
				40:	variant(InstructionData::Unary)
				48:	some
				50:	variant(InstructionData::Unary)
				298:	variant(Opcode::UwidenLow)
				300:	variant(Opcode::UwidenHigh)
			]
			equals = [
				299 == 301
			]
			prio = 0
			result = 310
			impure = [302, 309, 310]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 337
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::IaddPairwise)
			]
			prio = -1
			result = 312
			impure = [34, 35, 121, 311, 312]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 342
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				117:	some
				230:	variant(Opcode::Iabs)
			]
			prio = -1
			result = 315
			impure = [241, 313, 314, 315]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 345
			constraints = [
				1:	some
				3:	const_prim(I64)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Iabs)
			]
			prio = 2
			result = 317
			impure = [241, 316, 317]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 348
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Iabs)
				318:	some
			]
			prio = 1
			result = 322
			impure = [320, 321, 322]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 358
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Iabs)
			]
			prio = 0
			result = 332
			impure = [233, 234, 323, 325, 326, 327, 328, 329, 330, 331, 332]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 371
			constraints = [
				1:	some
				3:	const_prim(I64X2)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::AvgRound)
			]
			prio = 0
			result = 345
			impure = [334, 335, 112, 336, 337, 338, 340, 341, 342, 343, 344, 345]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 380
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::AvgRound)
				346:	some
			]
			prio = -1
			result = 351
			impure = [34, 35, 349, 350, 351]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 385
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::SqmulRoundSat)
				117:	some
			]
			prio = 0
			result = 354
			impure = [34, 35, 121, 353, 354]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 390
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Fadd)
				117:	some
			]
			prio = -1
			result = 357
			impure = [34, 35, 121, 356, 357]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 393
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Fadd)
				358:	some
			]
			prio = 0
			result = 363
			impure = [34, 35, 361, 362, 363]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 398
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Fsub)
				117:	some
			]
			prio = -1
			result = 366
			impure = [34, 35, 121, 365, 366]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 401
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Fsub)
				358:	some
			]
			prio = 0
			result = 369
			impure = [34, 35, 361, 368, 369]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 406
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Fmul)
				117:	some
			]
			prio = -1
			result = 372
			impure = [34, 35, 121, 371, 372]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 409
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Fmul)
				358:	some
			]
			prio = 0
			result = 375
			impure = [34, 35, 361, 374, 375]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 414
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Fdiv)
				117:	some
			]
			prio = -1
			result = 378
			impure = [34, 35, 121, 377, 378]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 417
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Fdiv)
				358:	some
			]
			prio = 0
			result = 381
			impure = [34, 35, 361, 380, 381]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 422
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Fmin)
				117:	some
			]
			prio = -1
			result = 384
			impure = [34, 35, 121, 383, 384]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 425
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Fmin)
				358:	some
			]
			prio = 0
			result = 387
			impure = [34, 35, 361, 386, 387]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 430
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Fmax)
				117:	some
			]
			prio = -1
			result = 390
			impure = [34, 35, 121, 389, 390]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 433
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Fmax)
				358:	some
			]
			prio = 0
			result = 393
			impure = [34, 35, 361, 392, 393]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 438
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				117:	some
				230:	variant(Opcode::Sqrt)
			]
			prio = -1
			result = 396
			impure = [241, 313, 395, 396]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 441
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Sqrt)
				358:	some
			]
			prio = 0
			result = 400
			impure = [241, 398, 399, 400]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 446
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				117:	some
				230:	variant(Opcode::Fneg)
			]
			prio = -1
			result = 403
			impure = [241, 313, 402, 403]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 449
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Fneg)
				358:	some
			]
			prio = 0
			result = 406
			impure = [241, 398, 405, 406]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 454
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				117:	some
				230:	variant(Opcode::Fabs)
			]
			prio = -1
			result = 409
			impure = [241, 313, 408, 409]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 457
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Fabs)
				358:	some
			]
			prio = 0
			result = 412
			impure = [241, 398, 411, 412]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 462
			constraints = [
				1:	some
				3:	const_prim(F64)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Fpromote)
			]
			prio = 0
			result = 415
			impure = [241, 414, 415]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 467
			constraints = [
				1:	some
				3:	const_prim(F32)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Fdemote)
			]
			prio = 0
			result = 418
			impure = [241, 417, 418]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 472
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				117:	some
				230:	variant(Opcode::Ceil)
			]
			prio = -1
			result = 421
			impure = [241, 313, 420, 421]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 475
			constraints = [
				1:	some
				3:	const_prim(F32)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Ceil)
			]
			prio = 0
			result = 424
			impure = [241, 423, 424]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 478
			constraints = [
				1:	some
				3:	const_prim(F64)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Ceil)
			]
			prio = 0
			result = 427
			impure = [241, 426, 427]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 483
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				117:	some
				230:	variant(Opcode::Floor)
			]
			prio = -1
			result = 430
			impure = [241, 313, 429, 430]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 486
			constraints = [
				1:	some
				3:	const_prim(F32)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Floor)
			]
			prio = 0
			result = 433
			impure = [241, 432, 433]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 489
			constraints = [
				1:	some
				3:	const_prim(F64)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Floor)
			]
			prio = 0
			result = 436
			impure = [241, 435, 436]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 494
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				117:	some
				230:	variant(Opcode::Trunc)
			]
			prio = -1
			result = 439
			impure = [241, 313, 438, 439]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 497
			constraints = [
				1:	some
				3:	const_prim(F32)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Trunc)
			]
			prio = 0
			result = 442
			impure = [241, 441, 442]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 500
			constraints = [
				1:	some
				3:	const_prim(F64)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Trunc)
			]
			prio = 0
			result = 445
			impure = [241, 444, 445]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 505
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				117:	some
				230:	variant(Opcode::Nearest)
			]
			prio = -1
			result = 448
			impure = [241, 313, 447, 448]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 508
			constraints = [
				1:	some
				3:	const_prim(F32)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Nearest)
			]
			prio = 0
			result = 451
			impure = [241, 450, 451]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 511
			constraints = [
				1:	some
				3:	const_prim(F64)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Nearest)
			]
			prio = 0
			result = 454
			impure = [241, 453, 454]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 516
			constraints = [
				1:	some
				4:	variant(InstructionData::Ternary)
				358:	some
				455:	variant(Opcode::Fma)
			]
			prio = 0
			result = 467
			impure = [462, 463, 464, 465, 466, 467]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 520
			constraints = [
				1:	some
				4:	variant(InstructionData::Ternary)
				117:	some
				455:	variant(Opcode::Fma)
			]
			prio = 1
			result = 471
			impure = [469, 470, 471]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 575
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Fcopysign)
			]
			prio = 0
			result = 473
			impure = [34, 35, 472, 473]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 580
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::FcvtToUint)
				232:	const_prim(F32)
				318:	some
			]
			prio = 0
			result = 477
			impure = [241, 476, 477]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 583
			constraints = [
				1:	some
				3:	const_prim(I64)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::FcvtToUint)
				232:	const_prim(F32)
			]
			prio = 1
			result = 480
			impure = [241, 479, 480]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 586
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::FcvtToUint)
				232:	const_prim(F64)
				318:	some
			]
			prio = 0
			result = 484
			impure = [241, 483, 484]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 589
			constraints = [
				1:	some
				3:	const_prim(I64)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::FcvtToUint)
				232:	const_prim(F64)
			]
			prio = 1
			result = 487
			impure = [241, 486, 487]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 594
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::FcvtToSint)
				232:	const_prim(F32)
				318:	some
			]
			prio = 0
			result = 490
			impure = [241, 489, 490]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 597
			constraints = [
				1:	some
				3:	const_prim(I64)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::FcvtToSint)
				232:	const_prim(F32)
			]
			prio = 1
			result = 493
			impure = [241, 492, 493]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 600
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::FcvtToSint)
				232:	const_prim(F64)
				318:	some
			]
			prio = 0
			result = 496
			impure = [241, 495, 496]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 603
			constraints = [
				1:	some
				3:	const_prim(I64)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::FcvtToSint)
				232:	const_prim(F64)
			]
			prio = 1
			result = 499
			impure = [241, 498, 499]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 608
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				117:	some
				119:	const_int(32)
				230:	variant(Opcode::FcvtFromUint)
				255:	some
				257:	const_int(32)
			]
			prio = -1
			result = 502
			impure = [241, 313, 501, 502]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 611
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				117:	some
				119:	const_int(64)
				230:	variant(Opcode::FcvtFromUint)
				255:	some
				257:	const_int(64)
			]
			prio = -1
			result = 502
			impure = [241, 313, 501, 502]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 614
			constraints = [
				1:	some
				3:	const_prim(F32)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::FcvtFromUint)
				503:	some
			]
			prio = 0
			result = 507
			impure = [252, 506, 507]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 617
			constraints = [
				1:	some
				3:	const_prim(F64)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::FcvtFromUint)
				503:	some
			]
			prio = 0
			result = 510
			impure = [252, 509, 510]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 620
			constraints = [
				1:	some
				3:	const_prim(F32)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::FcvtFromUint)
				232:	const_prim(I64)
			]
			prio = 1
			result = 513
			impure = [241, 512, 513]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 623
			constraints = [
				1:	some
				3:	const_prim(F64)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::FcvtFromUint)
				232:	const_prim(I64)
			]
			prio = 1
			result = 516
			impure = [241, 515, 516]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 628
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				117:	some
				119:	const_int(32)
				230:	variant(Opcode::FcvtFromSint)
				255:	some
				257:	const_int(32)
			]
			prio = -1
			result = 519
			impure = [241, 313, 518, 519]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 631
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				117:	some
				119:	const_int(64)
				230:	variant(Opcode::FcvtFromSint)
				255:	some
				257:	const_int(64)
			]
			prio = -1
			result = 519
			impure = [241, 313, 518, 519]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 634
			constraints = [
				1:	some
				3:	const_prim(F32)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::FcvtFromSint)
				503:	some
			]
			prio = 0
			result = 522
			impure = [320, 521, 522]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 637
			constraints = [
				1:	some
				3:	const_prim(F64)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::FcvtFromSint)
				503:	some
			]
			prio = 0
			result = 525
			impure = [320, 524, 525]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 640
			constraints = [
				1:	some
				3:	const_prim(F32)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::FcvtFromSint)
				232:	const_prim(I64)
			]
			prio = 1
			result = 528
			impure = [241, 527, 528]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 643
			constraints = [
				1:	some
				3:	const_prim(F64)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::FcvtFromSint)
				232:	const_prim(I64)
			]
			prio = 1
			result = 531
			impure = [241, 530, 531]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 648
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				117:	some
				119:	const_int(32)
				230:	variant(Opcode::FcvtToUintSat)
				255:	some
				257:	const_int(32)
			]
			prio = -1
			result = 534
			impure = [241, 313, 533, 534]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 651
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				117:	some
				119:	const_int(64)
				230:	variant(Opcode::FcvtToUintSat)
				255:	some
				257:	const_int(64)
			]
			prio = -1
			result = 534
			impure = [241, 313, 533, 534]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 654
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::FcvtToUintSat)
				232:	const_prim(F32)
				318:	some
			]
			prio = 0
			result = 536
			impure = [241, 535, 536]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 657
			constraints = [
				1:	some
				3:	const_prim(I64)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::FcvtToUintSat)
				232:	const_prim(F32)
			]
			prio = 1
			result = 538
			impure = [241, 537, 538]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 660
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::FcvtToUintSat)
				232:	const_prim(F64)
				318:	some
			]
			prio = 0
			result = 540
			impure = [241, 539, 540]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 663
			constraints = [
				1:	some
				3:	const_prim(I64)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::FcvtToUintSat)
				232:	const_prim(F64)
			]
			prio = 1
			result = 542
			impure = [241, 541, 542]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 668
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				117:	some
				119:	const_int(32)
				230:	variant(Opcode::FcvtToSintSat)
				255:	some
				257:	const_int(32)
			]
			prio = -1
			result = 545
			impure = [241, 313, 544, 545]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 671
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				117:	some
				119:	const_int(64)
				230:	variant(Opcode::FcvtToSintSat)
				255:	some
				257:	const_int(64)
			]
			prio = -1
			result = 545
			impure = [241, 313, 544, 545]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 674
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::FcvtToSintSat)
				232:	const_prim(F32)
				318:	some
			]
			prio = 0
			result = 547
			impure = [241, 546, 547]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 677
			constraints = [
				1:	some
				3:	const_prim(I64)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::FcvtToSintSat)
				232:	const_prim(F32)
			]
			prio = 1
			result = 549
			impure = [241, 548, 549]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 680
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::FcvtToSintSat)
				232:	const_prim(F64)
				318:	some
			]
			prio = 0
			result = 551
			impure = [241, 550, 551]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 683
			constraints = [
				1:	some
				3:	const_prim(I64)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::FcvtToSintSat)
				232:	const_prim(F64)
			]
			prio = 1
			result = 553
			impure = [241, 552, 553]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 691
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				27:	some
				29:	variant(Opcode::Isub)
			]
			prio = -4
			result = 555
			impure = [34, 35, 554, 555]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 695
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				27:	some
				29:	variant(Opcode::Isub)
				38:	some
				40:	variant(InstructionData::UnaryImm)
				41:	variant(Opcode::Iconst)
				44:	some
			]
			prio = 0
			result = 557
			impure = [34, 556, 557]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 700
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				27:	some
				29:	variant(Opcode::Isub)
				59:	some
			]
			prio = 2
			result = 559
			impure = [34, 558, 559]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 706
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				27:	some
				29:	variant(Opcode::Isub)
				67:	some
			]
			prio = 1
			result = 561
			impure = [34, 560, 561]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 711
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				27:	some
				29:	variant(Opcode::Isub)
				38:	some
				40:	variant(InstructionData::Binary)
				75:	variant(Opcode::Ishl)
				80:	some
				82:	variant(InstructionData::UnaryImm)
				83:	variant(Opcode::Iconst)
				85:	some
			]
			prio = -3
			result = 563
			impure = [34, 87, 562, 563]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 717
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Isub)
				117:	some
			]
			prio = -2
			result = 565
			impure = [34, 35, 121, 564, 565]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 721
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Isub)
			]
			prio = -1
			result = 568
			impure = [124, 566, 567, 568]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 726
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::UaddSat)
				569:	some
			]
			prio = 0
			result = 573
			impure = [34, 35, 571, 572, 573]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 731
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::SaddSat)
				569:	some
			]
			prio = 0
			result = 575
			impure = [34, 35, 571, 574, 575]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 736
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::UsubSat)
				569:	some
			]
			prio = 0
			result = 577
			impure = [34, 35, 571, 576, 577]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 741
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::SsubSat)
				569:	some
			]
			prio = 0
			result = 579
			impure = [34, 35, 571, 578, 579]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 747
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				27:	some
				230:	variant(Opcode::Ineg)
			]
			prio = 1
			result = 583
			impure = [580, 581, 582, 583]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 751
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Ineg)
			]
			prio = 2
			result = 587
			impure = [584, 585, 586, 587]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 755
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Ineg)
				569:	some
			]
			prio = 0
			result = 590
			impure = [241, 588, 589, 590]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 761
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				27:	some
				29:	variant(Opcode::Imul)
			]
			prio = -3
			result = 592
			impure = [34, 35, 269, 591, 592]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 765
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Imul)
			]
			prio = -1
			result = 599
			impure = [124, 126, 128, 129, 130, 131, 593, 594, 595, 596, 597, 598, 599]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 793
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Imul)
				569:	some
				600:	some
			]
			prio = -2
			result = 603
			impure = [34, 35, 571, 602, 603]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 825
			constraints = [
				1:	some
				3:	const_prim(I64X2)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Imul)
			]
			prio = -1
			result = 611
			impure = [34, 35, 604, 605, 606, 607, 608, 609, 610, 611]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 864
			constraints = [
				1:	some
				3:	const_prim(I16X8)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Imul)
				38:	some
				40:	variant(InstructionData::Unary)
				48:	some
				50:	variant(InstructionData::Unary)
				298:	variant(Opcode::SwidenLow)
				300:	variant(Opcode::SwidenLow)
				612:	const_prim(I8X16)
				613:	const_prim(I8X16)
			]
			prio = 0
			result = 616
			impure = [302, 614, 615, 616]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 870
			constraints = [
				1:	some
				3:	const_prim(I16X8)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Imul)
				38:	some
				40:	variant(InstructionData::Unary)
				48:	some
				50:	variant(InstructionData::Unary)
				298:	variant(Opcode::SwidenHigh)
				300:	variant(Opcode::SwidenHigh)
				612:	const_prim(I8X16)
				613:	const_prim(I8X16)
			]
			prio = 0
			result = 618
			impure = [302, 614, 617, 618]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 876
			constraints = [
				1:	some
				3:	const_prim(I16X8)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Imul)
				38:	some
				40:	variant(InstructionData::Unary)
				48:	some
				50:	variant(InstructionData::Unary)
				298:	variant(Opcode::UwidenLow)
				300:	variant(Opcode::UwidenLow)
				612:	const_prim(I8X16)
				613:	const_prim(I8X16)
			]
			prio = 0
			result = 620
			impure = [302, 614, 619, 620]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 882
			constraints = [
				1:	some
				3:	const_prim(I16X8)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Imul)
				38:	some
				40:	variant(InstructionData::Unary)
				48:	some
				50:	variant(InstructionData::Unary)
				298:	variant(Opcode::UwidenHigh)
				300:	variant(Opcode::UwidenHigh)
				612:	const_prim(I8X16)
				613:	const_prim(I8X16)
			]
			prio = 0
			result = 622
			impure = [302, 614, 621, 622]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 888
			constraints = [
				1:	some
				3:	const_prim(I32X4)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Imul)
				38:	some
				40:	variant(InstructionData::Unary)
				48:	some
				50:	variant(InstructionData::Unary)
				298:	variant(Opcode::SwidenLow)
				300:	variant(Opcode::SwidenLow)
				612:	const_prim(I16X8)
				613:	const_prim(I16X8)
			]
			prio = 0
			result = 624
			impure = [302, 614, 623, 624]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 894
			constraints = [
				1:	some
				3:	const_prim(I32X4)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Imul)
				38:	some
				40:	variant(InstructionData::Unary)
				48:	some
				50:	variant(InstructionData::Unary)
				298:	variant(Opcode::SwidenHigh)
				300:	variant(Opcode::SwidenHigh)
				612:	const_prim(I16X8)
				613:	const_prim(I16X8)
			]
			prio = 0
			result = 626
			impure = [302, 614, 625, 626]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 900
			constraints = [
				1:	some
				3:	const_prim(I32X4)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Imul)
				38:	some
				40:	variant(InstructionData::Unary)
				48:	some
				50:	variant(InstructionData::Unary)
				298:	variant(Opcode::UwidenLow)
				300:	variant(Opcode::UwidenLow)
				612:	const_prim(I16X8)
				613:	const_prim(I16X8)
			]
			prio = 0
			result = 628
			impure = [302, 614, 627, 628]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 906
			constraints = [
				1:	some
				3:	const_prim(I32X4)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Imul)
				38:	some
				40:	variant(InstructionData::Unary)
				48:	some
				50:	variant(InstructionData::Unary)
				298:	variant(Opcode::UwidenHigh)
				300:	variant(Opcode::UwidenHigh)
				612:	const_prim(I16X8)
				613:	const_prim(I16X8)
			]
			prio = 0
			result = 630
			impure = [302, 614, 629, 630]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 912
			constraints = [
				1:	some
				3:	const_prim(I64X2)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Imul)
				38:	some
				40:	variant(InstructionData::Unary)
				48:	some
				50:	variant(InstructionData::Unary)
				298:	variant(Opcode::SwidenLow)
				300:	variant(Opcode::SwidenLow)
				612:	const_prim(I32X4)
				613:	const_prim(I32X4)
			]
			prio = 0
			result = 632
			impure = [302, 614, 631, 632]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 918
			constraints = [
				1:	some
				3:	const_prim(I64X2)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Imul)
				38:	some
				40:	variant(InstructionData::Unary)
				48:	some
				50:	variant(InstructionData::Unary)
				298:	variant(Opcode::SwidenHigh)
				300:	variant(Opcode::SwidenHigh)
				612:	const_prim(I32X4)
				613:	const_prim(I32X4)
			]
			prio = 0
			result = 634
			impure = [302, 614, 633, 634]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 924
			constraints = [
				1:	some
				3:	const_prim(I64X2)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Imul)
				38:	some
				40:	variant(InstructionData::Unary)
				48:	some
				50:	variant(InstructionData::Unary)
				298:	variant(Opcode::UwidenLow)
				300:	variant(Opcode::UwidenLow)
				612:	const_prim(I32X4)
				613:	const_prim(I32X4)
			]
			prio = 0
			result = 636
			impure = [302, 614, 635, 636]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 930
			constraints = [
				1:	some
				3:	const_prim(I64X2)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Imul)
				38:	some
				40:	variant(InstructionData::Unary)
				48:	some
				50:	variant(InstructionData::Unary)
				298:	variant(Opcode::UwidenHigh)
				300:	variant(Opcode::UwidenHigh)
				612:	const_prim(I32X4)
				613:	const_prim(I32X4)
			]
			prio = 0
			result = 638
			impure = [302, 614, 637, 638]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 937
			constraints = [
				1:	some
				3:	const_prim(I64)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Smulhi)
			]
			prio = 1
			result = 640
			impure = [34, 35, 639, 640]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 940
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Smulhi)
				318:	some
			]
			prio = 0
			result = 647
			impure = [641, 642, 269, 643, 645, 646, 647]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 949
			constraints = [
				1:	some
				3:	const_prim(I64)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Umulhi)
			]
			prio = 1
			result = 649
			impure = [34, 35, 648, 649]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 952
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Umulhi)
				318:	some
			]
			prio = 0
			result = 655
			impure = [650, 651, 269, 652, 645, 653, 654, 655]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 968
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				27:	some
				29:	variant(Opcode::Udiv)
			]
			prio = 0
			result = 658
			impure = [650, 656, 657, 658]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1001
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				27:	some
				29:	variant(Opcode::Sdiv)
			]
			prio = 0
			result = 662
			impure = [641, 659, 660, 661, 662]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1010
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				27:	some
				29:	variant(Opcode::Sdiv)
				38:	some
				40:	variant(InstructionData::UnaryImm)
				41:	variant(Opcode::Iconst)
				663:	some
			]
			prio = 1
			result = 668
			impure = [641, 666, 667, 668]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1039
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				27:	some
				29:	variant(Opcode::Urem)
			]
			prio = 0
			result = 670
			impure = [650, 656, 657, 669, 670]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1046
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				27:	some
				29:	variant(Opcode::Srem)
			]
			prio = 0
			result = 673
			impure = [641, 659, 671, 672, 673]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1074
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				27:	some
				29:	variant(Opcode::Umin)
				674:	some
			]
			prio = 2
			result = 678
			impure = [677, 678]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1076
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				27:	some
				29:	variant(Opcode::Smin)
				674:	some
			]
			prio = 2
			result = 681
			impure = [680, 681]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1078
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				27:	some
				29:	variant(Opcode::Umax)
				674:	some
			]
			prio = 2
			result = 684
			impure = [683, 684]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1080
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				27:	some
				29:	variant(Opcode::Smax)
				674:	some
			]
			prio = 2
			result = 687
			impure = [686, 687]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1085
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Smin)
				688:	some
			]
			prio = 0
			result = 692
			impure = [34, 35, 121, 691, 692]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1088
			constraints = [
				1:	some
				3:	const_prim(I64X2)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Smin)
			]
			prio = 1
			result = 699
			impure = [56, 335, 695, 696, 697, 698, 699]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1091
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Umin)
				688:	some
			]
			prio = 0
			result = 702
			impure = [34, 35, 121, 701, 702]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1094
			constraints = [
				1:	some
				3:	const_prim(I64X2)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Umin)
			]
			prio = 1
			result = 706
			impure = [56, 335, 704, 696, 697, 705, 706]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1097
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Smax)
				688:	some
			]
			prio = 0
			result = 709
			impure = [34, 35, 121, 708, 709]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1100
			constraints = [
				1:	some
				3:	const_prim(I64X2)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Smax)
			]
			prio = 1
			result = 712
			impure = [34, 35, 710, 696, 697, 711, 712]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1103
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Umax)
				688:	some
			]
			prio = 0
			result = 715
			impure = [34, 35, 121, 714, 715]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1106
			constraints = [
				1:	some
				3:	const_prim(I64X2)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Umax)
			]
			prio = 1
			result = 718
			impure = [34, 35, 716, 696, 697, 717, 718]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1113
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				27:	some
				230:	variant(Opcode::Uextend)
			]
			prio = -2
			result = 722
			impure = [241, 721, 722]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1118
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				27:	some
				230:	variant(Opcode::Uextend)
				723:	some
				725:	variant(InstructionData::BinaryImm8)
				726:	variant(Opcode::Extractlane)
			]
			prio = 1
			result = 734
			impure = [731, 732, 733, 734]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1125
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				27:	some
				230:	variant(Opcode::Uextend)
				723:	some
				725:	variant(InstructionData::LoadNoOffset)
				735:	variant(Opcode::AtomicLoad)
				738:	some
			]
			prio = 1
			result = 742
			impure = [740, 741, 742]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1132
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Uextend)
			]
			prio = -1
			result = 746
			impure = [743, 744, 745, 746]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1137
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Uextend)
				723:	some
				725:	variant(InstructionData::BinaryImm8)
				726:	variant(Opcode::Extractlane)
			]
			prio = 0
			result = 749
			impure = [731, 732, 733, 747, 748, 749]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1146
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				27:	some
				230:	variant(Opcode::Sextend)
			]
			prio = -4
			result = 751
			impure = [241, 750, 751]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1151
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				27:	some
				230:	variant(Opcode::Sextend)
				723:	some
				725:	variant(InstructionData::BinaryImm8)
				726:	variant(Opcode::Extractlane)
			]
			prio = -3
			result = 755
			impure = [731, 752, 753, 754, 755]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1160
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Sextend)
			]
			prio = -2
			result = 760
			impure = [756, 757, 758, 759, 760]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1170
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Sextend)
				723:	some
				725:	variant(InstructionData::BinaryImm8)
				726:	variant(Opcode::Extractlane)
				761:	some
			]
			prio = 0
			result = 768
			impure = [731, 752, 763, 764, 765, 766, 767, 768]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1181
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Sextend)
				723:	some
				725:	variant(InstructionData::BinaryImm8)
				726:	variant(Opcode::Extractlane)
				729:	const_prim(I64X2)
			]
			prio = -1
			result = 773
			impure = [731, 769, 770, 771, 772, 773]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1197
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				27:	some
				230:	variant(Opcode::Bnot)
			]
			prio = -1
			result = 775
			impure = [580, 581, 774, 775]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1202
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				27:	some
				230:	variant(Opcode::Bnot)
				723:	some
				725:	variant(InstructionData::Binary)
				776:	variant(Opcode::Ishl)
				781:	some
				783:	variant(InstructionData::UnaryImm)
				784:	variant(Opcode::Iconst)
				786:	some
			]
			prio = 1
			result = 790
			impure = [580, 788, 789, 790]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1208
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Bnot)
			]
			prio = 0
			result = 796
			impure = [233, 234, 323, 791, 792, 793, 794, 795, 796]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1217
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Bnot)
				569:	some
			]
			prio = -2
			result = 798
			impure = [241, 588, 797, 798]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1221
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				27:	some
				230:	variant(Opcode::Bnot)
				723:	some
				725:	variant(InstructionData::Binary)
				776:	variant(Opcode::Bxor)
			]
			prio = 2
			result = 801
			impure = [800, 801]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1223
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Bnot)
				723:	some
				725:	variant(InstructionData::Binary)
				776:	variant(Opcode::Bxor)
			]
			prio = 3
			result = 803
			impure = [802, 803]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1227
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				27:	some
				29:	variant(Opcode::Band)
			]
			prio = -1
			result = 806
			impure = [805, 806]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1230
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Band)
			]
			prio = 0
			result = 808
			impure = [807, 808]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1232
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Band)
				569:	some
			]
			prio = -2
			result = 810
			impure = [34, 35, 571, 809, 810]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1239
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				27:	some
				29:	variant(Opcode::Band)
				38:	some
				40:	variant(InstructionData::Unary)
				300:	variant(Opcode::Bnot)
			]
			prio = 1
			result = 813
			impure = [812, 813]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1241
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				27:	some
				29:	variant(Opcode::Band)
				48:	some
				50:	variant(InstructionData::Unary)
				298:	variant(Opcode::Bnot)
			]
			prio = 2
			result = 815
			impure = [814, 815]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1244
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Band)
				38:	some
				40:	variant(InstructionData::Unary)
				300:	variant(Opcode::Bnot)
			]
			prio = 3
			result = 817
			impure = [816, 817]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1245
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Band)
				48:	some
				50:	variant(InstructionData::Unary)
				298:	variant(Opcode::Bnot)
			]
			prio = 4
			result = 819
			impure = [818, 819]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1247
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Band)
				38:	some
				40:	variant(InstructionData::Unary)
				300:	variant(Opcode::Bnot)
				569:	some
			]
			prio = 5
			result = 821
			impure = [34, 614, 571, 820, 821]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1249
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Band)
				48:	some
				50:	variant(InstructionData::Unary)
				298:	variant(Opcode::Bnot)
				569:	some
			]
			prio = 6
			result = 824
			impure = [56, 822, 571, 823, 824]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1254
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				27:	some
				29:	variant(Opcode::Bor)
			]
			prio = -1
			result = 827
			impure = [826, 827]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1257
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Bor)
			]
			prio = 0
			result = 829
			impure = [828, 829]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1259
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Bor)
				569:	some
			]
			prio = -2
			result = 831
			impure = [34, 35, 571, 830, 831]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1266
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				27:	some
				29:	variant(Opcode::Bor)
				38:	some
				40:	variant(InstructionData::Unary)
				300:	variant(Opcode::Bnot)
			]
			prio = 1
			result = 834
			impure = [833, 834]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1268
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				27:	some
				29:	variant(Opcode::Bor)
				48:	some
				50:	variant(InstructionData::Unary)
				298:	variant(Opcode::Bnot)
			]
			prio = 2
			result = 836
			impure = [835, 836]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1271
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Bor)
				38:	some
				40:	variant(InstructionData::Unary)
				300:	variant(Opcode::Bnot)
			]
			prio = 3
			result = 838
			impure = [837, 838]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1272
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Bor)
				48:	some
				50:	variant(InstructionData::Unary)
				298:	variant(Opcode::Bnot)
			]
			prio = 4
			result = 840
			impure = [839, 840]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1276
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				27:	some
				29:	variant(Opcode::Bxor)
			]
			prio = -1
			result = 843
			impure = [842, 843]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1279
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Bxor)
			]
			prio = 0
			result = 845
			impure = [844, 845]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1281
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Bxor)
				569:	some
			]
			prio = -2
			result = 847
			impure = [34, 35, 571, 846, 847]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1288
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				27:	some
				29:	variant(Opcode::Bxor)
				38:	some
				40:	variant(InstructionData::Unary)
				300:	variant(Opcode::Bnot)
			]
			prio = 1
			result = 849
			impure = [848, 849]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1290
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				27:	some
				29:	variant(Opcode::Bxor)
				48:	some
				50:	variant(InstructionData::Unary)
				298:	variant(Opcode::Bnot)
			]
			prio = 2
			result = 851
			impure = [850, 851]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1293
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Bxor)
				38:	some
				40:	variant(InstructionData::Unary)
				300:	variant(Opcode::Bnot)
			]
			prio = 3
			result = 853
			impure = [852, 853]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1294
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Bxor)
				48:	some
				50:	variant(InstructionData::Unary)
				298:	variant(Opcode::Bnot)
			]
			prio = 4
			result = 855
			impure = [854, 855]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1299
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Ishl)
				318:	some
			]
			prio = -1
			result = 858
			impure = [34, 857, 858]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1303
			constraints = [
				1:	some
				3:	const_prim(I64)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Ishl)
			]
			prio = 0
			result = 860
			impure = [34, 859, 860]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1307
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Ishl)
			]
			prio = 0
			result = 863
			impure = [124, 566, 861, 862, 863]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1337
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Ishl)
				569:	some
			]
			prio = -3
			result = 870
			impure = [864, 35, 866, 867, 868, 338, 869, 870]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1342
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Ishl)
				38:	some
				40:	variant(InstructionData::UnaryImm)
				41:	variant(Opcode::Iconst)
				569:	some
			]
			prio = -2
			result = 873
			impure = [34, 588, 872, 873]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1390
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Ushr)
				318:	some
			]
			prio = -1
			result = 877
			impure = [875, 876, 877]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1394
			constraints = [
				1:	some
				3:	const_prim(I64)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Ushr)
			]
			prio = 0
			result = 879
			impure = [650, 878, 879]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1398
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Ushr)
			]
			prio = 0
			result = 881
			impure = [124, 566, 861, 880, 881]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1406
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Ushr)
				569:	some
			]
			prio = -4
			result = 887
			impure = [864, 35, 866, 867, 882, 883, 884, 885, 886, 887]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1411
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Ushr)
				38:	some
				40:	variant(InstructionData::UnaryImm)
				41:	variant(Opcode::Iconst)
				569:	some
			]
			prio = -3
			result = 889
			impure = [34, 588, 888, 889]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1413
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Ushr)
				38:	some
				40:	variant(InstructionData::UnaryImm)
				41:	variant(Opcode::Iconst)
				569:	some
				871:	const_int(0)
			]
			prio = -2
			result = 890
			impure = [890]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1447
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Sshr)
				318:	some
			]
			prio = -4
			result = 894
			impure = [892, 893, 894]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1451
			constraints = [
				1:	some
				3:	const_prim(I64)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Sshr)
			]
			prio = 0
			result = 896
			impure = [641, 895, 896]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1455
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Sshr)
			]
			prio = 0
			result = 898
			impure = [124, 566, 861, 897, 898]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1464
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Sshr)
				569:	some
			]
			prio = -3
			result = 900
			impure = [864, 35, 866, 867, 882, 883, 884, 885, 899, 900]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1469
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Sshr)
				38:	some
				40:	variant(InstructionData::UnaryImm)
				41:	variant(Opcode::Iconst)
				569:	some
			]
			prio = -2
			result = 902
			impure = [34, 588, 901, 902]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1471
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Sshr)
				38:	some
				40:	variant(InstructionData::UnaryImm)
				41:	variant(Opcode::Iconst)
				569:	some
				871:	const_int(0)
			]
			prio = -1
			result = 890
			impure = [890]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1507
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Rotl)
				903:	some
			]
			prio = -2
			result = 910
			impure = [905, 906, 269, 907, 908, 909, 910]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1513
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Rotl)
				38:	some
				40:	variant(InstructionData::UnaryImm)
				41:	variant(Opcode::Iconst)
				903:	some
				911:	some
			]
			prio = -1
			result = 915
			impure = [875, 913, 914, 915]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1526
			constraints = [
				1:	some
				3:	const_prim(I32)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Rotl)
			]
			prio = 0
			result = 918
			impure = [905, 906, 269, 907, 916, 917, 918]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1532
			constraints = [
				1:	some
				3:	const_prim(I64)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Rotl)
			]
			prio = 0
			result = 921
			impure = [905, 906, 269, 919, 916, 920, 921]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1538
			constraints = [
				1:	some
				3:	const_prim(I32)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Rotl)
				38:	some
				40:	variant(InstructionData::UnaryImm)
				41:	variant(Opcode::Iconst)
				922:	some
			]
			prio = 1
			result = 926
			impure = [34, 924, 925, 926]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1543
			constraints = [
				1:	some
				3:	const_prim(I64)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Rotl)
				38:	some
				40:	variant(InstructionData::UnaryImm)
				41:	variant(Opcode::Iconst)
				927:	some
			]
			prio = 1
			result = 931
			impure = [34, 929, 930, 931]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1553
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Rotl)
			]
			prio = 0
			result = 944
			impure = [124, 566, 861, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1566
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Rotr)
				903:	some
			]
			prio = -3
			result = 946
			impure = [875, 566, 861, 945, 946]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1570
			constraints = [
				1:	some
				3:	const_prim(I32)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Rotr)
			]
			prio = -1
			result = 948
			impure = [34, 566, 861, 947, 948]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1574
			constraints = [
				1:	some
				3:	const_prim(I64)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Rotr)
			]
			prio = -1
			result = 950
			impure = [34, 566, 861, 949, 950]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1578
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Rotr)
				38:	some
				40:	variant(InstructionData::UnaryImm)
				41:	variant(Opcode::Iconst)
				903:	some
				911:	some
			]
			prio = -2
			result = 952
			impure = [875, 951, 952]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1583
			constraints = [
				1:	some
				3:	const_prim(I32)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Rotr)
				38:	some
				40:	variant(InstructionData::UnaryImm)
				41:	variant(Opcode::Iconst)
				922:	some
			]
			prio = 0
			result = 954
			impure = [34, 953, 954]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1588
			constraints = [
				1:	some
				3:	const_prim(I64)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Rotr)
				38:	some
				40:	variant(InstructionData::UnaryImm)
				41:	variant(Opcode::Iconst)
				927:	some
			]
			prio = 0
			result = 956
			impure = [34, 955, 956]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1637
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Rotr)
			]
			prio = 0
			result = 966
			impure = [124, 566, 861, 933, 934, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1652
			constraints = [
				1:	some
				3:	const_prim(I8)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Bitrev)
			]
			prio = 0
			result = 971
			impure = [241, 967, 969, 970, 971]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1658
			constraints = [
				1:	some
				3:	const_prim(I16)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Bitrev)
			]
			prio = 0
			result = 975
			impure = [241, 967, 973, 974, 975]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1661
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Bitrev)
			]
			prio = 0
			result = 979
			impure = [233, 234, 976, 236, 977, 978, 979]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1667
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Bitrev)
			]
			prio = -1
			result = 981
			impure = [241, 980, 981]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1673
			constraints = [
				1:	some
				3:	const_prim(I8)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Clz)
			]
			prio = 0
			result = 985
			impure = [252, 982, 983, 984, 985]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1676
			constraints = [
				1:	some
				3:	const_prim(I16)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Clz)
			]
			prio = 0
			result = 988
			impure = [252, 982, 986, 987, 988]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1679
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Clz)
			]
			prio = 0
			result = 990
			impure = [233, 989, 990]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1682
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Clz)
			]
			prio = -1
			result = 992
			impure = [241, 991, 992]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1703
			constraints = [
				1:	some
				3:	const_prim(I8)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Ctz)
			]
			prio = 0
			result = 997
			impure = [241, 967, 994, 995, 996, 997]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1706
			constraints = [
				1:	some
				3:	const_prim(I16)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Ctz)
			]
			prio = 0
			result = 1002
			impure = [241, 967, 999, 1000, 1001, 1002]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1709
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Ctz)
			]
			prio = 0
			result = 1004
			impure = [233, 234, 976, 236, 977, 978, 1003, 1004]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1715
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Ctz)
			]
			prio = -1
			result = 1006
			impure = [241, 980, 1005, 1006]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1720
			constraints = [
				1:	some
				3:	const_prim(I8)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Cls)
			]
			prio = 0
			result = 1009
			impure = [320, 1007, 983, 1008, 1009]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1723
			constraints = [
				1:	some
				3:	const_prim(I16)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Cls)
			]
			prio = 0
			result = 1011
			impure = [320, 1007, 986, 1010, 1011]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1735
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Cls)
			]
			prio = 0
			result = 1026
			impure = [233, 234, 323, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1749
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Cls)
			]
			prio = -1
			result = 1028
			impure = [241, 1027, 1028]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1754
			constraints = [
				1:	some
				3:	const_prim(I16)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Bswap)
			]
			prio = 0
			result = 1031
			impure = [241, 1030, 1031]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1757
			constraints = [
				1:	some
				3:	const_prim(I32)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Bswap)
			]
			prio = 0
			result = 1033
			impure = [241, 1032, 1033]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1760
			constraints = [
				1:	some
				3:	const_prim(I64)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Bswap)
			]
			prio = 0
			result = 1035
			impure = [241, 1034, 1035]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1763
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Bswap)
			]
			prio = 0
			result = 1042
			impure = [233, 1036, 1037, 1038, 1039, 1040, 1041, 1042]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1771
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Bmask)
			]
			prio = 0
			result = 1044
			impure = [233, 1043, 1044]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1793
			constraints = [
				1:	some
				3:	const_prim(I8)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Popcnt)
			]
			prio = 0
			result = 1050
			impure = [241, 1045, 1047, 1049, 1050]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1799
			constraints = [
				1:	some
				3:	const_prim(I16)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Popcnt)
			]
			prio = 0
			result = 1053
			impure = [241, 1045, 1047, 1051, 1052, 1053]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1805
			constraints = [
				1:	some
				3:	const_prim(I32)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Popcnt)
			]
			prio = 0
			result = 1056
			impure = [241, 1045, 1047, 1054, 1055, 1056]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1811
			constraints = [
				1:	some
				3:	const_prim(I64)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Popcnt)
			]
			prio = 0
			result = 1060
			impure = [241, 248, 1057, 1058, 1059, 1060]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1817
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Popcnt)
			]
			prio = 0
			result = 1068
			impure = [233, 234, 1061, 236, 1062, 1063, 1064, 1065, 1066, 1067, 1068]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1825
			constraints = [
				1:	some
				3:	const_prim(I8X16)
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Popcnt)
			]
			prio = 0
			result = 1070
			impure = [241, 1069, 1070]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1830
			constraints = [
				1:	some
				4:	variant(InstructionData::Ternary)
				455:	variant(Opcode::Bitselect)
				1071:	some
			]
			prio = 0
			result = 1078
			impure = [1073, 463, 1074, 465, 1075, 1076, 1077, 1078]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1836
			constraints = [
				1:	some
				4:	variant(InstructionData::Ternary)
				455:	variant(Opcode::Bitselect)
				569:	some
			]
			prio = 1
			result = 1083
			impure = [1079, 1080, 1081, 1082, 1083]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1844
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Ireduce)
				1071:	some
			]
			prio = 0
			result = 1084
			impure = [233, 234, 1084]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1850
			constraints = [
				1:	some
				4:	variant(InstructionData::FloatCompare)
				117:	some
				1085:	variant(Opcode::Fcmp)
				1091:	some
				1093:	some
			]
			prio = 4
			result = 1099
			impure = [1095, 313, 1096, 1097, 1098, 1099]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1856
			constraints = [
				1:	some
				4:	variant(InstructionData::FloatCompare)
				117:	some
				1085:	variant(Opcode::Fcmp)
				1093:	some
				1100:	some
			]
			prio = 3
			result = 1104
			impure = [1095, 313, 1102, 1103, 1104]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1862
			constraints = [
				1:	some
				4:	variant(InstructionData::FloatCompare)
				117:	some
				1085:	variant(Opcode::Fcmp)
				1091:	some
				1105:	some
			]
			prio = 2
			result = 1111
			impure = [1107, 313, 1108, 1109, 1110, 1111]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1868
			constraints = [
				1:	some
				4:	variant(InstructionData::FloatCompare)
				117:	some
				1085:	variant(Opcode::Fcmp)
				1100:	some
				1105:	some
			]
			prio = 1
			result = 1114
			impure = [1107, 313, 1112, 1113, 1114]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1874
			constraints = [
				1:	some
				4:	variant(InstructionData::FloatCompare)
				1085:	variant(Opcode::Fcmp)
				1116:	some
			]
			prio = 0
			result = 1125
			impure = [1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1879
			constraints = [
				1:	some
				4:	variant(InstructionData::FloatCompare)
				1085:	variant(Opcode::Fcmp)
				1126:	some
			]
			prio = -1
			result = 1131
			impure = [1095, 1128, 1129, 1130, 1131]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1885
			constraints = [
				1:	some
				4:	variant(InstructionData::IntCompare)
				117:	some
				1132:	variant(Opcode::Icmp)
				1138:	some
				1140:	some
			]
			prio = 3
			result = 1146
			impure = [1142, 313, 1143, 1144, 1145, 1146]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1891
			constraints = [
				1:	some
				4:	variant(InstructionData::IntCompare)
				117:	some
				1132:	variant(Opcode::Icmp)
				1140:	some
				1147:	some
			]
			prio = 2
			result = 1151
			impure = [1142, 313, 1149, 1150, 1151]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1897
			constraints = [
				1:	some
				4:	variant(InstructionData::IntCompare)
				117:	some
				1132:	variant(Opcode::Icmp)
				1138:	some
				1152:	some
			]
			prio = 1
			result = 1158
			impure = [1154, 313, 1155, 1156, 1157, 1158]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1903
			constraints = [
				1:	some
				4:	variant(InstructionData::IntCompare)
				117:	some
				1132:	variant(Opcode::Icmp)
				1147:	some
				1152:	some
			]
			prio = 0
			result = 1161
			impure = [1154, 313, 1159, 1160, 1161]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1909
			constraints = [
				4:	variant(InstructionData::IntCompare)
				1132:	variant(Opcode::Icmp)
			]
			prio = -1
			result = 1165
			impure = [1164, 1165]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1914
			constraints = [
				4:	variant(InstructionData::Trap)
				1166:	variant(Opcode::Trap)
			]
			prio = 0
			result = 1169
			impure = [1168, 1169]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1919
			constraints = [
				4:	variant(InstructionData::Trap)
				1166:	variant(Opcode::ResumableTrap)
			]
			prio = 0
			result = 1169
			impure = [1168, 1169]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1924
			constraints = [
				1:	some
				4:	variant(InstructionData::Ternary)
				455:	variant(Opcode::Select)
				1170:	some
				1172:	some
				1174:	variant(InstructionData::IntCompare)
				1175:	variant(Opcode::Icmp)
			]
			prio = 0
			result = 1187
			impure = [1182, 1183, 1184, 1185, 1186, 1187]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1937
			constraints = [
				1:	some
				4:	variant(InstructionData::Ternary)
				455:	variant(Opcode::Select)
				1170:	some
				1172:	some
				1174:	variant(InstructionData::FloatCompare)
				1188:	variant(Opcode::Fcmp)
			]
			prio = 0
			result = 1201
			impure = [1195, 1196, 1197, 1198, 1199, 1200, 1201]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1946
			constraints = [
				1:	some
				4:	variant(InstructionData::Ternary)
				455:	variant(Opcode::Select)
				1202:	const_prim(I8)
			]
			prio = -1
			result = 1207
			impure = [1079, 1204, 1205, 1206, 1207]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1952
			constraints = [
				1:	some
				4:	variant(InstructionData::Ternary)
				455:	variant(Opcode::Select)
				1208:	some
			]
			prio = -2
			result = 1214
			impure = [1210, 1211, 1212, 1213, 1214]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1958
			constraints = [
				1:	some
				4:	variant(InstructionData::Ternary)
				455:	variant(Opcode::Select)
				1215:	some
			]
			prio = -3
			result = 1220
			impure = [1217, 1211, 1218, 1219, 1220]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1964
			constraints = [
				1:	some
				4:	variant(InstructionData::Ternary)
				455:	variant(Opcode::Select)
				1202:	const_prim(I128)
			]
			prio = -4
			result = 1227
			impure = [1221, 1222, 1223, 1224, 882, 1225, 1226, 1227]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1975
			constraints = [
				1:	some
				4:	variant(InstructionData::Ternary)
				455:	variant(Opcode::SelectSpectreGuard)
				1170:	some
				1172:	some
				1174:	variant(InstructionData::IntCompare)
				1175:	variant(Opcode::Icmp)
			]
			prio = 0
			result = 1230
			impure = [1182, 1183, 1184, 1185, 1186, 1228, 1229, 1230]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1989
			constraints = [
				1:	some
				4:	variant(InstructionData::Ternary)
				455:	variant(Opcode::SelectSpectreGuard)
				1215:	some
			]
			prio = -1
			result = 1220
			impure = [1217, 1211, 1218, 1219, 1220]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1995
			constraints = [
				1:	some
				4:	variant(InstructionData::Ternary)
				455:	variant(Opcode::SelectSpectreGuard)
				1202:	const_prim(I128)
			]
			prio = -2
			result = 1227
			impure = [1221, 1222, 1223, 1224, 882, 1225, 1226, 1227]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2006
			constraints = [
				1:	some
				4:	variant(InstructionData::UnaryConst)
				569:	some
				1231:	variant(Opcode::Vconst)
				1233:	some
			]
			prio = 0
			result = 1236
			impure = [1235, 1236]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2009
			constraints = [
				1:	some
				4:	variant(InstructionData::UnaryConst)
				1231:	variant(Opcode::Vconst)
				1237:	some
				1239:	some
			]
			prio = 1
			result = 1242
			impure = [1241, 1242]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2015
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Splat)
				1243:	some
			]
			prio = -1
			result = 1246
			impure = [241, 313, 1245, 1246]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2019
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Splat)
				1247:	some
			]
			prio = -2
			result = 1250
			impure = [241, 313, 1249, 1250]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2022
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Splat)
				723:	some
				725:	variant(InstructionData::UnaryIeee32)
				1251:	variant(Opcode::F32const)
			]
			prio = 0
			result = 1256
			impure = [469, 1255, 1256]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2025
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Splat)
				723:	some
				725:	variant(InstructionData::UnaryIeee64)
				1257:	variant(Opcode::F64const)
			]
			prio = 0
			result = 1261
			impure = [469, 1260, 1261]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2028
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Splat)
				723:	some
				725:	variant(InstructionData::UnaryImm)
				1262:	variant(Opcode::Iconst)
			]
			prio = 0
			result = 1266
			impure = [469, 1265, 1266]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2031
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Splat)
				723:	some
				725:	variant(InstructionData::Unary)
				1267:	variant(Opcode::Ireduce)
				1269:	some
				1271:	variant(InstructionData::UnaryImm)
				1272:	variant(Opcode::Iconst)
			]
			prio = 0
			result = 1276
			impure = [469, 1275, 1276]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2034
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Splat)
				723:	some
				725:	variant(InstructionData::Load)
				738:	some
				1277:	variant(Opcode::Load)
			]
			prio = 0
			result = 1284
			impure = [1282, 313, 1283, 1284]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2040
			constraints = [
				1:	some
				4:	variant(InstructionData::LoadNoOffset)
				1285:	some
				1287:	variant(Opcode::AtomicLoad)
			]
			prio = 0
			result = 1292
			impure = [1290, 1291, 1292]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2045
			constraints = [
				4:	variant(InstructionData::StoreNoOffset)
				1293:	variant(Opcode::AtomicStore)
				1300:	some
			]
			prio = 0
			result = 1305
			impure = [1302, 1303, 1304, 1305]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2052
			constraints = [
				1:	some
				4:	variant(InstructionData::AtomicRmw)
				1285:	some
				1306:	some
				1308:	variant(Opcode::AtomicRmw)
				1311:	variant(AtomicRmwOp::Add)
			]
			prio = 1
			result = 1318
			impure = [1316, 1317, 1318]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2056
			constraints = [
				1:	some
				4:	variant(InstructionData::AtomicRmw)
				1285:	some
				1306:	some
				1308:	variant(Opcode::AtomicRmw)
				1311:	variant(AtomicRmwOp::Xor)
			]
			prio = 1
			result = 1321
			impure = [1316, 1320, 1321]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2060
			constraints = [
				1:	some
				4:	variant(InstructionData::AtomicRmw)
				1285:	some
				1306:	some
				1308:	variant(Opcode::AtomicRmw)
				1311:	variant(AtomicRmwOp::Or)
			]
			prio = 1
			result = 1324
			impure = [1316, 1323, 1324]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2064
			constraints = [
				1:	some
				4:	variant(InstructionData::AtomicRmw)
				1285:	some
				1306:	some
				1308:	variant(Opcode::AtomicRmw)
				1311:	variant(AtomicRmwOp::Smax)
			]
			prio = 1
			result = 1327
			impure = [1316, 1326, 1327]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2068
			constraints = [
				1:	some
				4:	variant(InstructionData::AtomicRmw)
				1285:	some
				1306:	some
				1308:	variant(Opcode::AtomicRmw)
				1311:	variant(AtomicRmwOp::Smin)
			]
			prio = 1
			result = 1330
			impure = [1316, 1329, 1330]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2072
			constraints = [
				1:	some
				4:	variant(InstructionData::AtomicRmw)
				1285:	some
				1306:	some
				1308:	variant(Opcode::AtomicRmw)
				1311:	variant(AtomicRmwOp::Umax)
			]
			prio = 1
			result = 1333
			impure = [1316, 1332, 1333]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2076
			constraints = [
				1:	some
				4:	variant(InstructionData::AtomicRmw)
				1285:	some
				1306:	some
				1308:	variant(Opcode::AtomicRmw)
				1311:	variant(AtomicRmwOp::Umin)
			]
			prio = 1
			result = 1336
			impure = [1316, 1335, 1336]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2080
			constraints = [
				1:	some
				4:	variant(InstructionData::AtomicRmw)
				1285:	some
				1306:	some
				1308:	variant(Opcode::AtomicRmw)
				1311:	variant(AtomicRmwOp::Sub)
			]
			prio = 1
			result = 1340
			impure = [580, 1337, 1338, 1339, 1340]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2084
			constraints = [
				1:	some
				4:	variant(InstructionData::AtomicRmw)
				1285:	some
				1306:	some
				1308:	variant(Opcode::AtomicRmw)
				1311:	variant(AtomicRmwOp::And)
			]
			prio = 1
			result = 1344
			impure = [1316, 1211, 1342, 1343, 1344]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2090
			constraints = [
				1:	some
				4:	variant(InstructionData::AtomicRmw)
				1285:	some
				1308:	variant(Opcode::AtomicRmw)
				1311:	variant(AtomicRmwOp::Add)
			]
			prio = 0
			result = 1348
			impure = [1346, 1337, 1347, 1348]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2093
			constraints = [
				1:	some
				4:	variant(InstructionData::AtomicRmw)
				1285:	some
				1308:	variant(Opcode::AtomicRmw)
				1311:	variant(AtomicRmwOp::Sub)
			]
			prio = 0
			result = 1351
			impure = [1346, 1337, 1350, 1351]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2096
			constraints = [
				1:	some
				4:	variant(InstructionData::AtomicRmw)
				1285:	some
				1308:	variant(Opcode::AtomicRmw)
				1311:	variant(AtomicRmwOp::And)
			]
			prio = 0
			result = 1354
			impure = [1346, 1337, 1353, 1354]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2099
			constraints = [
				1:	some
				4:	variant(InstructionData::AtomicRmw)
				1285:	some
				1308:	variant(Opcode::AtomicRmw)
				1311:	variant(AtomicRmwOp::Nand)
			]
			prio = 0
			result = 1357
			impure = [1346, 1337, 1356, 1357]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2102
			constraints = [
				1:	some
				4:	variant(InstructionData::AtomicRmw)
				1285:	some
				1308:	variant(Opcode::AtomicRmw)
				1311:	variant(AtomicRmwOp::Or)
			]
			prio = 0
			result = 1360
			impure = [1346, 1337, 1359, 1360]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2105
			constraints = [
				1:	some
				4:	variant(InstructionData::AtomicRmw)
				1285:	some
				1308:	variant(Opcode::AtomicRmw)
				1311:	variant(AtomicRmwOp::Xor)
			]
			prio = 0
			result = 1363
			impure = [1346, 1337, 1362, 1363]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2108
			constraints = [
				1:	some
				4:	variant(InstructionData::AtomicRmw)
				1285:	some
				1308:	variant(Opcode::AtomicRmw)
				1311:	variant(AtomicRmwOp::Smin)
			]
			prio = 0
			result = 1366
			impure = [1346, 1337, 1365, 1366]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2111
			constraints = [
				1:	some
				4:	variant(InstructionData::AtomicRmw)
				1285:	some
				1308:	variant(Opcode::AtomicRmw)
				1311:	variant(AtomicRmwOp::Smax)
			]
			prio = 0
			result = 1369
			impure = [1346, 1337, 1368, 1369]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2114
			constraints = [
				1:	some
				4:	variant(InstructionData::AtomicRmw)
				1285:	some
				1308:	variant(Opcode::AtomicRmw)
				1311:	variant(AtomicRmwOp::Umin)
			]
			prio = 0
			result = 1372
			impure = [1346, 1337, 1371, 1372]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2117
			constraints = [
				1:	some
				4:	variant(InstructionData::AtomicRmw)
				1285:	some
				1308:	variant(Opcode::AtomicRmw)
				1311:	variant(AtomicRmwOp::Umax)
			]
			prio = 0
			result = 1375
			impure = [1346, 1337, 1374, 1375]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2120
			constraints = [
				1:	some
				4:	variant(InstructionData::AtomicRmw)
				1285:	some
				1308:	variant(Opcode::AtomicRmw)
				1311:	variant(AtomicRmwOp::Xchg)
			]
			prio = 0
			result = 1378
			impure = [1346, 1337, 1377, 1378]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2125
			constraints = [
				1:	some
				4:	variant(InstructionData::AtomicCas)
				1285:	some
				1306:	some
				1379:	variant(Opcode::AtomicCas)
			]
			prio = 1
			result = 1390
			impure = [1386, 1387, 1388, 1389, 1390]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2130
			constraints = [
				1:	some
				4:	variant(InstructionData::AtomicCas)
				1285:	some
				1379:	variant(Opcode::AtomicCas)
			]
			prio = 0
			result = 1392
			impure = [1386, 1387, 1388, 1391, 1392]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2135
			constraints = [
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::Fvdemote)
			]
			prio = 0
			result = 1394
			impure = [241, 1393, 1394]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2140
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Snarrow)
				1395:	some
				1397:	some
			]
			prio = 1
			result = 1401
			impure = [34, 1399, 1400, 1401]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2144
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Snarrow)
				1402:	some
			]
			prio = 2
			result = 1407
			impure = [34, 35, 1404, 1405, 1406, 1407]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2148
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Snarrow)
				1395:	some
			]
			prio = 0
			result = 1411
			impure = [34, 1399, 1400, 1408, 1409, 1410, 1411]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2155
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Unarrow)
				1395:	some
				1397:	some
			]
			prio = 1
			result = 1413
			impure = [34, 1399, 1412, 1413]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2159
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Unarrow)
				1402:	some
			]
			prio = 2
			result = 1415
			impure = [34, 35, 1404, 1405, 1414, 1415]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2163
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Unarrow)
				1395:	some
			]
			prio = 0
			result = 1417
			impure = [34, 1399, 1412, 1408, 1409, 1416, 1417]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2171
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Uunarrow)
				1395:	some
				1397:	some
			]
			prio = 1
			result = 1419
			impure = [34, 1399, 1418, 1419]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2175
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Uunarrow)
				1402:	some
			]
			prio = 2
			result = 1421
			impure = [34, 35, 1404, 1405, 1420, 1421]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2179
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Uunarrow)
				1395:	some
			]
			prio = 0
			result = 1423
			impure = [34, 1399, 1418, 1408, 1409, 1422, 1423]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2186
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::SwidenLow)
			]
			prio = 0
			result = 1427
			impure = [241, 1425, 1426, 1427]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2191
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::SwidenHigh)
				569:	some
			]
			prio = 1
			result = 1430
			impure = [241, 1428, 1429, 1430]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2194
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::SwidenHigh)
				1239:	some
			]
			prio = 0
			result = 1435
			impure = [241, 1432, 1433, 1434, 1435]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2201
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::UwidenLow)
			]
			prio = 0
			result = 1438
			impure = [241, 1425, 1437, 1438]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2206
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::UwidenHigh)
				569:	some
			]
			prio = 1
			result = 1440
			impure = [241, 1428, 1439, 1440]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2209
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::UwidenHigh)
				1239:	some
			]
			prio = 0
			result = 1442
			impure = [241, 1432, 1433, 1441, 1442]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2216
			constraints = [
				4:	variant(InstructionData::NullAry)
				11:	variant(Opcode::Fence)
			]
			prio = 0
			result = 1444
			impure = [1443, 1444]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2221
			constraints = [
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::IsNull)
			]
			prio = 0
			result = 1449
			impure = [1445, 581, 1446, 1447, 263, 1448, 1449]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2227
			constraints = [
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::IsInvalid)
			]
			prio = 0
			result = 1453
			impure = [1445, 581, 1450, 1451, 263, 1452, 1453]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2233
			constraints = [
				4:	variant(InstructionData::NullAry)
				11:	variant(Opcode::Debugtrap)
			]
			prio = 0
			result = 1455
			impure = [1454, 1455]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2238
			constraints = [
				4:	variant(InstructionData::FuncAddr)
				1456:	variant(Opcode::FuncAddr)
			]
			prio = 0
			result = 1465
			impure = [1462, 1464, 1465]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2243
			constraints = [
				4:	variant(InstructionData::UnaryGlobalValue)
				1466:	variant(Opcode::SymbolValue)
				1468:	some
			]
			prio = 0
			result = 1475
			impure = [1473, 1474, 1475]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2248
			constraints = [
				4:	variant(InstructionData::NullAry)
				11:	variant(Opcode::GetFramePointer)
			]
			prio = 0
			result = 1477
			impure = [1476, 1477]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2251
			constraints = [
				4:	variant(InstructionData::NullAry)
				11:	variant(Opcode::GetStackPointer)
			]
			prio = 0
			result = 1479
			impure = [1478, 1479]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2254
			constraints = [
				4:	variant(InstructionData::NullAry)
				11:	variant(Opcode::GetReturnAddress)
			]
			prio = 0
			result = 1481
			impure = [1480, 1481]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2259
			constraints = [
				4:	variant(InstructionData::Call)
				1482:	variant(Opcode::Call)
			]
			prio = 0
			result = 1490
			impure = [1490]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2262
			constraints = [
				4:	variant(InstructionData::CallIndirect)
				1491:	variant(Opcode::CallIndirect)
				1495:	some
			]
			prio = 0
			result = 1499
			impure = [1499]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2268
			constraints = [
				4:	variant(InstructionData::MultiAry)
				1500:	variant(Opcode::Return)
			]
			prio = 0
			result = 1503
			impure = [1503]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2273
			constraints = [
				4:	variant(InstructionData::Call)
				1482:	variant(Opcode::ReturnCall)
			]
			prio = 0
			result = 1504
			impure = [1504]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2276
			constraints = [
				4:	variant(InstructionData::CallIndirect)
				1491:	variant(Opcode::ReturnCallIndirect)
				1495:	some
			]
			prio = 0
			result = 1505
			impure = [1505]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2281
			constraints = [
				1:	some
				3:	const_prim(I8)
				4:	variant(InstructionData::Load)
				1506:	variant(Opcode::Load)
			]
			prio = 0
			result = 1513
			impure = [1511, 1512, 1513]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2284
			constraints = [
				1:	some
				3:	const_prim(I16)
				4:	variant(InstructionData::Load)
				1506:	variant(Opcode::Load)
			]
			prio = 0
			result = 1516
			impure = [1514, 1515, 1516]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2287
			constraints = [
				1:	some
				3:	const_prim(I32)
				4:	variant(InstructionData::Load)
				1506:	variant(Opcode::Load)
			]
			prio = 0
			result = 1519
			impure = [1517, 1518, 1519]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2290
			constraints = [
				1:	some
				3:	const_prim(I64)
				4:	variant(InstructionData::Load)
				1506:	variant(Opcode::Load)
			]
			prio = 0
			result = 1522
			impure = [1520, 1521, 1522]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2293
			constraints = [
				1:	some
				3:	const_prim(R64)
				4:	variant(InstructionData::Load)
				1506:	variant(Opcode::Load)
			]
			prio = 0
			result = 1522
			impure = [1520, 1521, 1522]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2296
			constraints = [
				1:	some
				3:	const_prim(F32)
				4:	variant(InstructionData::Load)
				1506:	variant(Opcode::Load)
			]
			prio = 0
			result = 1525
			impure = [1523, 1524, 1525]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2299
			constraints = [
				1:	some
				3:	const_prim(F64)
				4:	variant(InstructionData::Load)
				1506:	variant(Opcode::Load)
			]
			prio = 0
			result = 1528
			impure = [1526, 1527, 1528]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2302
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Load)
				1506:	variant(Opcode::Load)
			]
			prio = 0
			result = 1531
			impure = [1529, 1530, 1531]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2305
			constraints = [
				1:	some
				4:	variant(InstructionData::Load)
				1506:	variant(Opcode::Load)
				1532:	some
			]
			prio = -1
			result = 1528
			impure = [1526, 1527, 1528]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2309
			constraints = [
				1:	some
				4:	variant(InstructionData::Load)
				569:	some
				1506:	variant(Opcode::Load)
			]
			prio = -3
			result = 1537
			impure = [1535, 1536, 1537]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2313
			constraints = [
				1:	some
				4:	variant(InstructionData::Load)
				1506:	variant(Opcode::Load)
				1538:	some
			]
			prio = -2
			result = 1528
			impure = [1526, 1527, 1528]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2317
			constraints = [
				1:	some
				4:	variant(InstructionData::Load)
				1506:	variant(Opcode::Load)
				1540:	some
			]
			prio = -4
			result = 1537
			impure = [1535, 1536, 1537]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2322
			constraints = [
				4:	variant(InstructionData::Load)
				1506:	variant(Opcode::Uload8)
			]
			prio = 0
			result = 1513
			impure = [1511, 1512, 1513]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2325
			constraints = [
				4:	variant(InstructionData::Load)
				1506:	variant(Opcode::Sload8)
			]
			prio = 0
			result = 1543
			impure = [1511, 1542, 1543]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2328
			constraints = [
				4:	variant(InstructionData::Load)
				1506:	variant(Opcode::Uload16)
			]
			prio = 0
			result = 1516
			impure = [1514, 1515, 1516]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2331
			constraints = [
				4:	variant(InstructionData::Load)
				1506:	variant(Opcode::Sload16)
			]
			prio = 0
			result = 1545
			impure = [1514, 1544, 1545]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2334
			constraints = [
				4:	variant(InstructionData::Load)
				1506:	variant(Opcode::Uload32)
			]
			prio = 0
			result = 1519
			impure = [1517, 1518, 1519]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2337
			constraints = [
				4:	variant(InstructionData::Load)
				1506:	variant(Opcode::Sload32)
			]
			prio = 0
			result = 1547
			impure = [1517, 1546, 1547]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2341
			constraints = [
				4:	variant(InstructionData::Load)
				1506:	variant(Opcode::Sload8x8)
			]
			prio = 0
			result = 1550
			impure = [1526, 1527, 1549, 1550]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2347
			constraints = [
				4:	variant(InstructionData::Load)
				1506:	variant(Opcode::Uload8x8)
			]
			prio = 0
			result = 1552
			impure = [1526, 1527, 1551, 1552]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2353
			constraints = [
				4:	variant(InstructionData::Load)
				1506:	variant(Opcode::Sload16x4)
			]
			prio = 0
			result = 1554
			impure = [1526, 1527, 1553, 1554]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2359
			constraints = [
				4:	variant(InstructionData::Load)
				1506:	variant(Opcode::Uload16x4)
			]
			prio = 0
			result = 1556
			impure = [1526, 1527, 1555, 1556]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2365
			constraints = [
				4:	variant(InstructionData::Load)
				1506:	variant(Opcode::Sload32x2)
			]
			prio = 0
			result = 1558
			impure = [1526, 1527, 1557, 1558]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2371
			constraints = [
				4:	variant(InstructionData::Load)
				1506:	variant(Opcode::Uload32x2)
			]
			prio = 0
			result = 1560
			impure = [1526, 1527, 1559, 1560]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2380
			constraints = [
				4:	variant(InstructionData::Store)
				1561:	variant(Opcode::Store)
				1568:	const_prim(I8)
			]
			prio = 0
			result = 1573
			impure = [1570, 1571, 1572, 1573]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2384
			constraints = [
				4:	variant(InstructionData::Store)
				1561:	variant(Opcode::Store)
				1568:	const_prim(I16)
			]
			prio = 0
			result = 1576
			impure = [1574, 1571, 1575, 1576]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2388
			constraints = [
				4:	variant(InstructionData::Store)
				1561:	variant(Opcode::Store)
				1568:	const_prim(I32)
			]
			prio = 0
			result = 1579
			impure = [1577, 1571, 1578, 1579]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2392
			constraints = [
				4:	variant(InstructionData::Store)
				1561:	variant(Opcode::Store)
				1568:	const_prim(I64)
			]
			prio = 0
			result = 1582
			impure = [1580, 1571, 1581, 1582]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2396
			constraints = [
				4:	variant(InstructionData::Store)
				1561:	variant(Opcode::Store)
				1568:	const_prim(R64)
			]
			prio = 0
			result = 1582
			impure = [1580, 1571, 1581, 1582]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2401
			constraints = [
				4:	variant(InstructionData::Store)
				1561:	variant(Opcode::Istore8)
			]
			prio = 0
			result = 1573
			impure = [1570, 1571, 1572, 1573]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2405
			constraints = [
				4:	variant(InstructionData::Store)
				1561:	variant(Opcode::Istore16)
			]
			prio = 0
			result = 1576
			impure = [1574, 1571, 1575, 1576]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2409
			constraints = [
				4:	variant(InstructionData::Store)
				1561:	variant(Opcode::Istore32)
			]
			prio = 0
			result = 1579
			impure = [1577, 1571, 1578, 1579]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2414
			constraints = [
				4:	variant(InstructionData::Store)
				1561:	variant(Opcode::Store)
				1568:	const_prim(F32)
			]
			prio = 0
			result = 1585
			impure = [1583, 1571, 1584, 1585]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2418
			constraints = [
				4:	variant(InstructionData::Store)
				1561:	variant(Opcode::Store)
				1568:	const_prim(F64)
			]
			prio = 0
			result = 1588
			impure = [1586, 1571, 1587, 1588]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2423
			constraints = [
				4:	variant(InstructionData::Store)
				1561:	variant(Opcode::Store)
				1568:	const_prim(I128)
			]
			prio = 0
			result = 1595
			impure = [1589, 1590, 1591, 1592, 1593, 1594, 1595]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2430
			constraints = [
				4:	variant(InstructionData::Store)
				1561:	variant(Opcode::Store)
				1596:	some
			]
			prio = -1
			result = 1588
			impure = [1586, 1571, 1587, 1588]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2434
			constraints = [
				4:	variant(InstructionData::Store)
				1561:	variant(Opcode::Store)
				1598:	some
			]
			prio = -3
			result = 1602
			impure = [1600, 1571, 1601, 1602]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2438
			constraints = [
				4:	variant(InstructionData::Store)
				1561:	variant(Opcode::Store)
				1603:	some
			]
			prio = -2
			result = 1588
			impure = [1586, 1571, 1587, 1588]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2442
			constraints = [
				4:	variant(InstructionData::Store)
				1561:	variant(Opcode::Store)
				1605:	some
			]
			prio = -4
			result = 1602
			impure = [1600, 1571, 1601, 1602]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2449
			constraints = [
				4:	variant(InstructionData::NullAry)
				11:	variant(Opcode::GetPinnedReg)
			]
			prio = 0
			result = 1609
			impure = [1607, 1608, 1609]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2452
			constraints = [
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::SetPinnedReg)
			]
			prio = 0
			result = 1611
			impure = [241, 1610, 1611]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2458
			constraints = [
				1:	some
				4:	variant(InstructionData::LoadNoOffset)
				1287:	variant(Opcode::Bitcast)
				1612:	some
				1615:	some
			]
			prio = 5
			result = 1617
			impure = [1617]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2462
			constraints = [
				1:	some
				4:	variant(InstructionData::LoadNoOffset)
				1287:	variant(Opcode::Bitcast)
				1612:	some
				1618:	some
			]
			prio = 4
			result = 1622
			impure = [1290, 1620, 1621, 1622]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2467
			constraints = [
				1:	some
				4:	variant(InstructionData::LoadNoOffset)
				1071:	some
				1287:	variant(Opcode::Bitcast)
				1623:	some
				1625:	some
			]
			prio = 3
			result = 1629
			impure = [1290, 1627, 1628, 1629]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2474
			constraints = [
				1:	some
				4:	variant(InstructionData::LoadNoOffset)
				1071:	some
				1287:	variant(Opcode::Bitcast)
				1618:	some
				1630:	const_prim(true)
				1631:	const_prim(false)
			]
			prio = 2
			result = 1633
			impure = [1290, 1632, 1633]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2480
			constraints = [
				1:	some
				4:	variant(InstructionData::LoadNoOffset)
				1071:	some
				1287:	variant(Opcode::Bitcast)
				1618:	some
				1630:	const_prim(false)
				1631:	const_prim(true)
			]
			prio = 2
			result = 1635
			impure = [1290, 1634, 1635]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2488
			constraints = [
				1:	some
				4:	variant(InstructionData::LoadNoOffset)
				1071:	some
				1287:	variant(Opcode::Bitcast)
				1618:	some
			]
			prio = 1
			result = 1617
			impure = [1617]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2492
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::LoadNoOffset)
				1287:	variant(Opcode::Bitcast)
				1614:	const_prim(I128)
			]
			prio = 0
			result = 1617
			impure = [1617]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2498
			constraints = [
				1:	some
				4:	variant(InstructionData::BinaryImm8)
				358:	some
				1636:	variant(Opcode::Extractlane)
				1639:	const_int(0)
			]
			prio = 2
			result = 1640
			impure = [1640]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2501
			constraints = [
				1:	some
				4:	variant(InstructionData::BinaryImm8)
				674:	some
				1636:	variant(Opcode::Extractlane)
			]
			prio = 0
			result = 1644
			impure = [1641, 1642, 1643, 1644]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2506
			constraints = [
				1:	some
				4:	variant(InstructionData::BinaryImm8)
				358:	some
				1636:	variant(Opcode::Extractlane)
			]
			prio = 1
			result = 1648
			impure = [1641, 1646, 1647, 1648]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2513
			constraints = [
				4:	variant(InstructionData::TernaryImm8)
				1649:	variant(Opcode::Insertlane)
				1657:	some
			]
			prio = 1
			result = 1664
			impure = [1660, 1661, 1662, 1663, 1664]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2518
			constraints = [
				4:	variant(InstructionData::TernaryImm8)
				1649:	variant(Opcode::Insertlane)
				1665:	some
			]
			prio = 0
			result = 1668
			impure = [1660, 1661, 1662, 1667, 1668]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2525
			constraints = [
				4:	variant(InstructionData::StackLoad)
				1669:	variant(Opcode::StackAddr)
			]
			prio = 0
			result = 1673
			impure = [1672, 1673]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2539
			constraints = [
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::VhighBits)
				232:	const_prim(I8X16)
			]
			prio = 0
			result = 1684
			impure = [241, 1675, 1677, 1678, 1680, 1681, 1682, 1683, 1684]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2563
			constraints = [
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::VhighBits)
				232:	const_prim(I16X8)
			]
			prio = 0
			result = 1692
			impure = [241, 1686, 1688, 1689, 1690, 1691, 1692]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2576
			constraints = [
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::VhighBits)
				232:	const_prim(I32X4)
			]
			prio = 0
			result = 1700
			impure = [241, 1694, 1696, 1697, 1698, 1699, 1700]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2589
			constraints = [
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::VhighBits)
				232:	const_prim(I64X2)
			]
			prio = 0
			result = 1709
			impure = [241, 1701, 1702, 1703, 765, 1704, 1015, 1705, 1708, 1709]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2603
			constraints = [
				1:	some
				4:	variant(InstructionData::IntAddTrap)
				27:	some
				1710:	variant(Opcode::UaddOverflowTrap)
			]
			prio = 0
			result = 1720
			impure = [1716, 1717, 1718, 1719, 1720]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2683
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::UaddOverflow)
				903:	some
			]
			prio = 1
			result = 1723
			impure = [1723]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2687
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::UaddOverflow)
				1724:	some
			]
			prio = 2
			result = 1728
			impure = [1728]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2691
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::UaddOverflow)
			]
			prio = 0
			result = 1730
			impure = [1730]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2700
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::SaddOverflow)
				903:	some
			]
			prio = 1
			result = 1732
			impure = [1732]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2705
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::SaddOverflow)
				1724:	some
			]
			prio = 2
			result = 1734
			impure = [1734]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2711
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::SaddOverflow)
			]
			prio = 0
			result = 1735
			impure = [1735]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2720
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::UsubOverflow)
				903:	some
			]
			prio = 1
			result = 1737
			impure = [1737]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2725
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::UsubOverflow)
				1724:	some
			]
			prio = 2
			result = 1739
			impure = [1739]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2731
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::UsubOverflow)
			]
			prio = 0
			result = 1741
			impure = [1741]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2740
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::SsubOverflow)
				903:	some
			]
			prio = 1
			result = 1742
			impure = [1742]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2745
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::SsubOverflow)
				1724:	some
			]
			prio = 2
			result = 1743
			impure = [1743]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2751
			constraints = [
				1:	some
				3:	const_prim(I128)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::SsubOverflow)
			]
			prio = 0
			result = 1744
			impure = [1744]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2761
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::UmulOverflow)
				903:	some
			]
			prio = 1
			result = 1754
			impure = [1745, 1746, 1747, 791, 1748, 1749, 1750, 1751, 1752, 1753, 1754]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2777
			constraints = [
				1:	some
				3:	const_prim(I32)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::UmulOverflow)
			]
			prio = 2
			result = 1762
			impure = [34, 35, 269, 1755, 1757, 1758, 1759, 1760, 1761, 1762]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2791
			constraints = [
				1:	some
				3:	const_prim(I64)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::UmulOverflow)
			]
			prio = 2
			result = 1772
			impure = [34, 35, 269, 1763, 916, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2809
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::SmulOverflow)
				903:	some
			]
			prio = 1
			result = 1781
			impure = [1773, 1774, 1775, 791, 1776, 1777, 1750, 1778, 1779, 1780, 1781]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2825
			constraints = [
				1:	some
				3:	const_prim(I32)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::SmulOverflow)
			]
			prio = 2
			result = 1788
			impure = [34, 35, 269, 1782, 1784, 1758, 1785, 1786, 1787, 1788]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2839
			constraints = [
				1:	some
				3:	const_prim(I64)
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::SmulOverflow)
			]
			prio = 2
			result = 1796
			impure = [34, 35, 269, 1763, 916, 1764, 1789, 1791, 1792, 1793, 1794, 1795, 1796]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2852
			constraints = [
				1:	some
				4:	variant(InstructionData::UnaryGlobalValue)
				1466:	variant(Opcode::TlsValue)
				1468:	some
				1797:	variant(TlsModel::ElfGd)
			]
			prio = 0
			result = 1799
			impure = [1798, 1799]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2855
			constraints = [
				1:	some
				4:	variant(InstructionData::UnaryGlobalValue)
				1466:	variant(Opcode::TlsValue)
				1468:	some
				1797:	variant(TlsModel::Macho)
			]
			prio = 0
			result = 1801
			impure = [1800, 1801]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2860
			constraints = [
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::FvpromoteLow)
			]
			prio = 0
			result = 1804
			impure = [241, 1803, 1804]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 3
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Iadd)
				1805:	some
			]
			prio = -4
			result = 1810
			impure = [34, 35, 121, 122, 1809, 1810]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 7
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Isub)
				1805:	some
			]
			prio = -5
			result = 1812
			impure = [34, 35, 121, 564, 1811, 1812]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 11
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Imul)
				346:	some
				1813:	some
			]
			prio = -4
			result = 1820
			impure = [34, 35, 349, 1818, 1819, 1820]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 15
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Fadd)
				1805:	some
			]
			prio = -2
			result = 1822
			impure = [34, 35, 121, 356, 1821, 1822]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 19
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Fsub)
				1805:	some
			]
			prio = -2
			result = 1824
			impure = [34, 35, 121, 365, 1823, 1824]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 23
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Fmul)
				1805:	some
			]
			prio = -2
			result = 1826
			impure = [34, 35, 121, 371, 1825, 1826]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 27
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Fdiv)
				1805:	some
			]
			prio = -2
			result = 1828
			impure = [34, 35, 121, 377, 1827, 1828]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 31
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Fmin)
				1805:	some
			]
			prio = -2
			result = 1830
			impure = [34, 35, 121, 383, 1829, 1830]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 35
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Fmax)
				1805:	some
			]
			prio = -2
			result = 1832
			impure = [34, 35, 121, 389, 1831, 1832]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 39
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Snarrow)
				1397:	some
				1833:	some
			]
			prio = -2
			result = 1837
			impure = [34, 1835, 1836, 1837]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 43
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Snarrow)
				1838:	some
			]
			prio = -1
			result = 1842
			impure = [34, 35, 1404, 1840, 1841, 1842]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 47
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Snarrow)
				1833:	some
			]
			prio = -3
			result = 1845
			impure = [34, 1835, 1836, 1408, 1843, 1844, 1845]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 53
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Unarrow)
				1397:	some
				1833:	some
			]
			prio = -2
			result = 1847
			impure = [34, 1835, 1846, 1847]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 57
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Unarrow)
				1838:	some
			]
			prio = -1
			result = 1849
			impure = [34, 35, 1404, 1840, 1848, 1849]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 61
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Unarrow)
				1833:	some
			]
			prio = -3
			result = 1851
			impure = [34, 1835, 1846, 1408, 1843, 1850, 1851]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 67
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Uunarrow)
				1397:	some
				1833:	some
			]
			prio = -2
			result = 1853
			impure = [34, 1835, 1852, 1853]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 71
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Uunarrow)
				1838:	some
			]
			prio = -1
			result = 1855
			impure = [34, 35, 1404, 1840, 1854, 1855]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 75
			constraints = [
				1:	some
				4:	variant(InstructionData::Binary)
				29:	variant(Opcode::Uunarrow)
				1833:	some
			]
			prio = -3
			result = 1857
			impure = [34, 1835, 1852, 1408, 1843, 1856, 1857]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 81
			constraints = [
				4:	variant(InstructionData::DynamicStackLoad)
				1858:	variant(Opcode::DynamicStackAddr)
			]
			prio = 0
			result = 1865
			impure = [1860, 1861, 1862, 1864, 1865]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 87
			constraints = [
				4:	variant(InstructionData::BinaryImm8)
				1636:	variant(Opcode::ExtractVector)
				1638:	const_int(0)
			]
			prio = 0
			result = 1867
			impure = [1641, 1866, 1867]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 92
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::SwidenHigh)
			]
			prio = -1
			result = 1869
			impure = [241, 1425, 1868, 1869]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower_dynamic_neon.isle line 97
			constraints = [
				1:	some
				4:	variant(InstructionData::Unary)
				230:	variant(Opcode::UwidenHigh)
			]
			prio = -1
			result = 1871
			impure = [241, 1425, 1870, 1871]
		}
	]
}
term {
	name = lower_branch
	bindings = [
		0: Inst	argument(0)
		1: InstructionData	extractor(inst_data, 0)
		2: Opcode	match_variant(1, InstructionData::Brif, opcode)
		3: Value	match_variant(1, InstructionData::Brif, arg)
		4: BlockArray2	match_variant(1, InstructionData::Brif, blocks)
		5: Option(Value)	extractor(maybe_uextend, 3)
		6: Value	match_some(5)
		7: Option(Inst)	extractor(def_inst, 6)
		8: Inst	match_some(7)
		9: InstructionData	extractor(inst_data, 8)
		10: Opcode	match_variant(9, InstructionData::IntCompare, opcode)
		11: ValueArray2	match_variant(9, InstructionData::IntCompare, args)
		12: IntCC	match_variant(9, InstructionData::IntCompare, cond)
		13: (Value, Value)	extractor(value_array_2, 11)
		14: Value	match_tuple(13, 0)
		15: Value	match_tuple(13, 1)
		16: Type	extractor(value_type, 14)
		17: (BlockCall, BlockCall)	extractor(block_array_2, 4)
		18: BlockCall	match_tuple(17, 0)
		19: BlockCall	match_tuple(17, 1)
		20: MachLabelSlice	argument(1)
		21: Option((MachLabel, MachLabel))	extractor(two_targets, 20)
		22: (MachLabel, MachLabel)	match_some(21)
		23: MachLabel	match_tuple(22, 0)
		24: MachLabel	match_tuple(22, 1)
		25: FlagsAndCC	constructor(lower_icmp_into_flags, [12, 14, 15, 16], 1)
		26: IntCC	constructor(flags_and_cc_cc, [25], 2)
		27: Cond	constructor(cond_code, [26], 3)
		28: ProducesFlags	constructor(flags_and_cc_flags, [25], 4)
		29: BranchTarget	constructor(branch_target, [23], 5)
		30: BranchTarget	constructor(branch_target, [24], 6)
		31: CondBrKind	constructor(cond_br_cond, [27], 7)
		32: ConsumesFlags	constructor(cond_br, [29, 30, 31], 8)
		33: SideEffectNoResult	constructor(with_flags_side_effect, [28, 32], 9)
		34: Unit	constructor(emit_side_effect, [33], 10)
		35: Opcode	match_variant(9, InstructionData::FloatCompare, opcode)
		36: ValueArray2	match_variant(9, InstructionData::FloatCompare, args)
		37: FloatCC	match_variant(9, InstructionData::FloatCompare, cond)
		38: (Value, Value)	extractor(value_array_2, 36)
		39: Value	match_tuple(38, 0)
		40: Value	match_tuple(38, 1)
		41: Type	extractor(value_type, 39)
		42: Option(Type)	extractor(ty_scalar_float, 41)
		43: Type	match_some(42)
		44: Cond	constructor(fp_cond_code, [37], 1)
		45: ScalarSize	constructor(scalar_size, [43], 2)
		46: Reg	constructor(put_in_reg, [39], 3)
		47: Reg	constructor(put_in_reg, [40], 4)
		48: ProducesFlags	constructor(fpu_cmp, [45, 46, 47], 5)
		49: BranchTarget	constructor(branch_target, [23], 6)
		50: BranchTarget	constructor(branch_target, [24], 7)
		51: CondBrKind	constructor(cond_br_cond, [44], 8)
		52: ConsumesFlags	constructor(cond_br, [49, 50, 51], 9)
		53: SideEffectNoResult	constructor(with_flags_side_effect, [48, 52], 10)
		54: Unit	constructor(emit_side_effect, [53], 11)
		55: Type	extractor(value_type, 3)
		56: ProducesFlags	constructor(flags_to_producesflags, [3], 1)
		57: ValueRegs	constructor(put_in_regs, [3], 2)
		58: usize	const_int(0, usize)
		59: Reg	constructor(value_regs_get, [57, 58], 3)
		60: usize	const_int(1, usize)
		61: Reg	constructor(value_regs_get, [57, 60], 4)
		62: Type	const_prim(I64)
		63: Reg	constructor(orr, [62, 59, 61], 5)
		64: CondBrKind	constructor(cond_br_not_zero, [63], 8)
		65: ConsumesFlags	constructor(cond_br, [49, 50, 64], 9)
		66: SideEffectNoResult	constructor(with_flags_side_effect, [56, 65], 10)
		67: Unit	constructor(emit_side_effect, [66], 11)
		68: Option(Type)	constructor(ty_int_ref_scalar_64, [55], 0)
		69: Type	match_some(68)
		70: Reg	constructor(put_in_reg_zext64, [3], 2)
		71: BranchTarget	constructor(branch_target, [23], 3)
		72: BranchTarget	constructor(branch_target, [24], 4)
		73: CondBrKind	constructor(cond_br_not_zero, [70], 5)
		74: ConsumesFlags	constructor(cond_br, [71, 72, 73], 6)
		75: SideEffectNoResult	constructor(with_flags_side_effect, [56, 74], 7)
		76: Unit	constructor(emit_side_effect, [75], 8)
		77: Option(Inst)	extractor(def_inst, 3)
		78: Inst	match_some(77)
		79: InstructionData	extractor(inst_data, 78)
		80: Opcode	match_variant(79, InstructionData::Binary, opcode)
		81: ValueArray2	match_variant(79, InstructionData::Binary, args)
		82: (Value, Value)	extractor(value_array_2, 81)
		83: Value	match_tuple(82, 0)
		84: Value	match_tuple(82, 1)
		85: Type	extractor(value_type, 83)
		86: Option(Inst)	extractor(def_inst, 84)
		87: Inst	match_some(86)
		88: InstructionData	extractor(inst_data, 87)
		89: Opcode	match_variant(88, InstructionData::UnaryImm, opcode)
		90: Imm64	match_variant(88, InstructionData::UnaryImm, imm)
		91: u64	extractor(u64_from_imm64, 90)
		92: Option(u8)	constructor(test_and_compare_bit_const, [85, 91], 0)
		93: u8	match_some(92)
		94: BranchTarget	constructor(branch_target, [23], 1)
		95: BranchTarget	constructor(branch_target, [24], 2)
		96: Reg	constructor(put_in_reg, [83], 3)
		97: SideEffectNoResult	constructor(tbnz, [94, 95, 96, 93], 4)
		98: Unit	constructor(emit_side_effect, [97], 5)
		99: Opcode	match_variant(79, InstructionData::IntCompare, opcode)
		100: ValueArray2	match_variant(79, InstructionData::IntCompare, args)
		101: IntCC	match_variant(79, InstructionData::IntCompare, cond)
		102: (Value, Value)	extractor(value_array_2, 100)
		103: Value	match_tuple(102, 0)
		104: Value	match_tuple(102, 1)
		105: Option(Inst)	extractor(def_inst, 103)
		106: Inst	match_some(105)
		107: InstructionData	extractor(inst_data, 106)
		108: Opcode	match_variant(107, InstructionData::Binary, opcode)
		109: ValueArray2	match_variant(107, InstructionData::Binary, args)
		110: (Value, Value)	extractor(value_array_2, 109)
		111: Value	match_tuple(110, 0)
		112: Value	match_tuple(110, 1)
		113: Type	extractor(value_type, 111)
		114: Option(Type)	extractor(fits_in_64, 113)
		115: Type	match_some(114)
		116: Option(Inst)	extractor(def_inst, 112)
		117: Inst	match_some(116)
		118: InstructionData	extractor(inst_data, 117)
		119: Opcode	match_variant(118, InstructionData::UnaryImm, opcode)
		120: Imm64	match_variant(118, InstructionData::UnaryImm, imm)
		121: u64	extractor(u64_from_imm64, 120)
		122: Option(Inst)	extractor(def_inst, 104)
		123: Inst	match_some(122)
		124: InstructionData	extractor(inst_data, 123)
		125: Opcode	match_variant(124, InstructionData::UnaryImm, opcode)
		126: Imm64	match_variant(124, InstructionData::UnaryImm, imm)
		127: u64	extractor(u64_from_imm64, 126)
		128: Option(u8)	constructor(test_and_compare_bit_const, [115, 121], 0)
		129: u8	match_some(128)
		130: Reg	constructor(put_in_reg, [111], 3)
		131: SideEffectNoResult	constructor(tbz, [94, 95, 130, 129], 4)
		132: Unit	constructor(emit_side_effect, [131], 5)
		133: Opcode	match_variant(1, InstructionData::Jump, opcode)
		134: BlockCall	match_variant(1, InstructionData::Jump, destination)
		135: Option(MachLabel)	extractor(single_target, 20)
		136: MachLabel	match_some(135)
		137: BranchTarget	constructor(branch_target, [136], 1)
		138: SideEffectNoResult	constructor(aarch64_jump, [137], 2)
		139: Unit	constructor(emit_side_effect, [138], 3)
		140: Opcode	match_variant(1, InstructionData::BranchTable, opcode)
		141: Value	match_variant(1, InstructionData::BranchTable, arg)
		142: JumpTable	match_variant(1, InstructionData::BranchTable, table)
		143: Option((MachLabel, BoxVecMachLabel))	extractor(jump_table_targets, 20)
		144: (MachLabel, BoxVecMachLabel)	match_some(143)
		145: MachLabel	match_tuple(144, 0)
		146: BoxVecMachLabel	match_tuple(144, 1)
		147: u32	constructor(jump_table_size, [146], 1)
		148: CodeOffset	constructor(targets_jt_space, [146], 2)
		149: SideEffectNoResult	constructor(emit_island, [148], 3)
		150: InstOutput	constructor(side_effect, [149], 4)
		151: Reg	constructor(put_in_reg_zext32, [141], 5)
		152: u64	constructor(u32_as_u64, [147], 0)
		153: Unit	constructor(br_table_impl, [152, 151, 145, 146], 6)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2866
			constraints = [
				1:	variant(InstructionData::Brif)
				2:	variant(Opcode::Brif)
				5:	some
				7:	some
				9:	variant(InstructionData::IntCompare)
				10:	variant(Opcode::Icmp)
				21:	some
			]
			prio = 0
			result = 34
			impure = [25, 26, 27, 28, 29, 30, 31, 32, 33, 34]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2876
			constraints = [
				1:	variant(InstructionData::Brif)
				2:	variant(Opcode::Brif)
				5:	some
				7:	some
				9:	variant(InstructionData::FloatCompare)
				21:	some
				35:	variant(Opcode::Fcmp)
				42:	some
			]
			prio = 0
			result = 54
			impure = [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2884
			constraints = [
				1:	variant(InstructionData::Brif)
				2:	variant(Opcode::Brif)
				21:	some
				55:	const_prim(I128)
			]
			prio = -1
			result = 67
			impure = [56, 57, 59, 61, 63, 49, 50, 64, 65, 66, 67]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2893
			constraints = [
				1:	variant(InstructionData::Brif)
				2:	variant(Opcode::Brif)
				21:	some
				68:	some
			]
			prio = -2
			result = 76
			impure = [56, 70, 71, 72, 73, 74, 75, 76]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2902
			constraints = [
				1:	variant(InstructionData::Brif)
				2:	variant(Opcode::Brif)
				21:	some
				77:	some
				79:	variant(InstructionData::Binary)
				80:	variant(Opcode::Band)
				86:	some
				88:	variant(InstructionData::UnaryImm)
				89:	variant(Opcode::Iconst)
				92:	some
			]
			prio = 1
			result = 98
			impure = [94, 95, 96, 97, 98]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2908
			constraints = [
				1:	variant(InstructionData::Brif)
				2:	variant(Opcode::Brif)
				21:	some
				77:	some
				79:	variant(InstructionData::IntCompare)
				99:	variant(Opcode::Icmp)
				101:	variant(IntCC::Equal)
				105:	some
				107:	variant(InstructionData::Binary)
				108:	variant(Opcode::Band)
				114:	some
				116:	some
				118:	variant(InstructionData::UnaryImm)
				119:	variant(Opcode::Iconst)
				122:	some
				124:	variant(InstructionData::UnaryImm)
				125:	variant(Opcode::Iconst)
				127:	const_int(0)
				128:	some
			]
			prio = 1
			result = 132
			impure = [94, 95, 130, 131, 132]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2921
			constraints = [
				1:	variant(InstructionData::Jump)
				133:	variant(Opcode::Jump)
				135:	some
			]
			prio = 0
			result = 139
			impure = [137, 138, 139]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2928
			constraints = [
				1:	variant(InstructionData::BranchTable)
				140:	variant(Opcode::BrTable)
				143:	some
			]
			prio = 0
			result = 153
			impure = [147, 148, 149, 150, 151, 153]
		}
	]
}
term {
	name = lower_fmla
	bindings = [
		0: VecALUModOp	argument(0)
		1: Value	argument(1)
		2: Value	argument(2)
		3: Value	argument(3)
		4: VectorSize	argument(4)
		5: Reg	constructor(put_in_reg, [3], 1)
		6: Reg	constructor(put_in_reg, [1], 2)
		7: Reg	constructor(put_in_reg, [2], 3)
		8: Reg	constructor(vec_rrr_mod, [0, 5, 6, 7, 4], 4)
		9: Option(Inst)	extractor(def_inst, 1)
		10: Inst	match_some(9)
		11: InstructionData	extractor(inst_data, 10)
		12: Opcode	match_variant(11, InstructionData::Unary, opcode)
		13: Value	match_variant(11, InstructionData::Unary, arg)
		14: Reg	constructor(put_in_reg, [2], 2)
		15: Reg	constructor(put_in_reg, [13], 3)
		16: u8	const_int(0, u8)
		17: Reg	constructor(vec_fmla_elem, [0, 5, 14, 15, 4, 16], 4)
		18: Option(Inst)	extractor(def_inst, 2)
		19: Inst	match_some(18)
		20: InstructionData	extractor(inst_data, 19)
		21: Opcode	match_variant(20, InstructionData::Unary, opcode)
		22: Value	match_variant(20, InstructionData::Unary, arg)
		23: Reg	constructor(put_in_reg, [22], 3)
		24: Reg	constructor(vec_fmla_elem, [0, 5, 6, 23, 4, 16], 4)
		25: Opcode	match_variant(11, InstructionData::LoadNoOffset, opcode)
		26: Value	match_variant(11, InstructionData::LoadNoOffset, arg)
		27: MemFlags	match_variant(11, InstructionData::LoadNoOffset, flags)
		28: Option(Inst)	extractor(def_inst, 26)
		29: Inst	match_some(28)
		30: InstructionData	extractor(inst_data, 29)
		31: Opcode	match_variant(30, InstructionData::Shuffle, opcode)
		32: ValueArray2	match_variant(30, InstructionData::Shuffle, args)
		33: Immediate	match_variant(30, InstructionData::Shuffle, imm)
		34: (Value, Value)	extractor(value_array_2, 32)
		35: Value	match_tuple(34, 0)
		36: Value	match_tuple(34, 1)
		37: Option((u8, u8, u8, u8))	extractor(shuffle32_from_imm, 33)
		38: (u8, u8, u8, u8)	match_some(37)
		39: u8	match_tuple(38, 0)
		40: u8	match_tuple(38, 1)
		41: u8	match_tuple(38, 2)
		42: u8	match_tuple(38, 3)
		43: u64	constructor(u8_as_u64, [39], 0)
		44: u64	const_int(4, u64)
		45: bool	constructor(u64_lt, [43, 44], 0)
		46: Reg	constructor(put_in_reg, [35], 3)
		47: Reg	constructor(vec_fmla_elem, [0, 5, 14, 46, 4, 39], 4)
		48: Opcode	match_variant(20, InstructionData::LoadNoOffset, opcode)
		49: Value	match_variant(20, InstructionData::LoadNoOffset, arg)
		50: MemFlags	match_variant(20, InstructionData::LoadNoOffset, flags)
		51: Option(Inst)	extractor(def_inst, 49)
		52: Inst	match_some(51)
		53: InstructionData	extractor(inst_data, 52)
		54: Opcode	match_variant(53, InstructionData::Shuffle, opcode)
		55: ValueArray2	match_variant(53, InstructionData::Shuffle, args)
		56: Immediate	match_variant(53, InstructionData::Shuffle, imm)
		57: (Value, Value)	extractor(value_array_2, 55)
		58: Value	match_tuple(57, 0)
		59: Value	match_tuple(57, 1)
		60: Option((u8, u8, u8, u8))	extractor(shuffle32_from_imm, 56)
		61: (u8, u8, u8, u8)	match_some(60)
		62: u8	match_tuple(61, 0)
		63: u8	match_tuple(61, 1)
		64: u8	match_tuple(61, 2)
		65: u8	match_tuple(61, 3)
		66: u64	constructor(u8_as_u64, [62], 0)
		67: bool	constructor(u64_lt, [66, 44], 0)
		68: Reg	constructor(put_in_reg, [58], 3)
		69: Reg	constructor(vec_fmla_elem, [0, 5, 6, 68, 4, 62], 4)
		70: Option((u8, u8))	extractor(shuffle64_from_imm, 33)
		71: (u8, u8)	match_some(70)
		72: u8	match_tuple(71, 0)
		73: u8	match_tuple(71, 1)
		74: u64	constructor(u8_as_u64, [72], 0)
		75: u64	const_int(2, u64)
		76: bool	constructor(u64_lt, [74, 75], 0)
		77: Reg	constructor(vec_fmla_elem, [0, 5, 14, 46, 4, 72], 4)
		78: Option((u8, u8))	extractor(shuffle64_from_imm, 56)
		79: (u8, u8)	match_some(78)
		80: u8	match_tuple(79, 0)
		81: u8	match_tuple(79, 1)
		82: u64	constructor(u8_as_u64, [80], 0)
		83: bool	constructor(u64_lt, [82, 75], 0)
		84: Reg	constructor(vec_fmla_elem, [0, 5, 6, 68, 4, 80], 4)
		85: VecALUModOp	constructor(neg_fmla, [0], 1)
		86: Reg	constructor(lower_fmla, [85, 13, 2, 3, 4], 2)
		87: Reg	constructor(lower_fmla, [85, 1, 22, 3, 4], 2)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 528
			constraints = [
			]
			prio = 0
			result = 8
			impure = [5, 6, 7, 8]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 533
			constraints = [
				9:	some
				11:	variant(InstructionData::Unary)
				12:	variant(Opcode::Splat)
			]
			prio = 1
			result = 17
			impure = [5, 14, 15, 17]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 535
			constraints = [
				18:	some
				20:	variant(InstructionData::Unary)
				21:	variant(Opcode::Splat)
			]
			prio = 2
			result = 24
			impure = [5, 6, 23, 24]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 545
			constraints = [
				4:	variant(VectorSize::Size32x4)
				9:	some
				11:	variant(InstructionData::LoadNoOffset)
				25:	variant(Opcode::Bitcast)
				28:	some
				30:	variant(InstructionData::Shuffle)
				31:	variant(Opcode::Shuffle)
				37:	some
				45:	const_prim(true)
			]
			equals = [
				35 == 36
				39 == 40
				41 == 40
				42 == 40
			]
			prio = 3
			result = 47
			impure = [5, 14, 46, 47]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 548
			constraints = [
				4:	variant(VectorSize::Size32x4)
				18:	some
				20:	variant(InstructionData::LoadNoOffset)
				48:	variant(Opcode::Bitcast)
				51:	some
				53:	variant(InstructionData::Shuffle)
				54:	variant(Opcode::Shuffle)
				60:	some
				67:	const_prim(true)
			]
			equals = [
				58 == 59
				62 == 63
				64 == 63
				65 == 63
			]
			prio = 4
			result = 69
			impure = [5, 6, 68, 69]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 551
			constraints = [
				4:	variant(VectorSize::Size64x2)
				9:	some
				11:	variant(InstructionData::LoadNoOffset)
				25:	variant(Opcode::Bitcast)
				28:	some
				30:	variant(InstructionData::Shuffle)
				31:	variant(Opcode::Shuffle)
				70:	some
				76:	const_prim(true)
			]
			equals = [
				35 == 36
				72 == 73
			]
			prio = 3
			result = 77
			impure = [5, 14, 46, 77]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 554
			constraints = [
				4:	variant(VectorSize::Size64x2)
				18:	some
				20:	variant(InstructionData::LoadNoOffset)
				48:	variant(Opcode::Bitcast)
				51:	some
				53:	variant(InstructionData::Shuffle)
				54:	variant(Opcode::Shuffle)
				78:	some
				83:	const_prim(true)
			]
			equals = [
				58 == 59
				80 == 81
			]
			prio = 4
			result = 84
			impure = [5, 6, 68, 84]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 564
			constraints = [
				9:	some
				11:	variant(InstructionData::Unary)
				12:	variant(Opcode::Fneg)
			]
			prio = 5
			result = 86
			impure = [85, 86]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 566
			constraints = [
				18:	some
				20:	variant(InstructionData::Unary)
				21:	variant(Opcode::Fneg)
			]
			prio = 6
			result = 87
			impure = [85, 87]
		}
	]
}
term {
	name = neg_fmla
	bindings = [
		0: VecALUModOp	argument(0)
		1: VecALUModOp	make_variant(VecALUModOp::Fmls, [])
		2: VecALUModOp	make_variant(VecALUModOp::Fmla, [])
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 570
			constraints = [
				0:	variant(VecALUModOp::Fmla)
			]
			prio = 0
			result = 1
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 571
			constraints = [
				0:	variant(VecALUModOp::Fmls)
			]
			prio = 0
			result = 2
		}
	]
}
term {
	name = put_nonzero_in_reg_zext64
	bindings = [
		0: Value	argument(0)
		1: Reg	constructor(put_in_reg_zext64, [0], 1)
		2: Reg	constructor(trap_if_zero_divisor, [1], 2)
		3: Type	extractor(value_type, 0)
		4: Option(Inst)	extractor(def_inst, 0)
		5: Inst	match_some(4)
		6: InstructionData	extractor(inst_data, 5)
		7: Opcode	match_variant(6, InstructionData::UnaryImm, opcode)
		8: Imm64	match_variant(6, InstructionData::UnaryImm, imm)
		9: Option(u64)	extractor(nonzero_u64_from_imm64, 8)
		10: u64	match_some(9)
		11: ImmExtend	make_variant(ImmExtend::Zero, [])
		12: Reg	constructor(imm, [3, 11, 10], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 973
			constraints = [
			]
			prio = -1
			result = 2
			impure = [1, 2]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 978
			constraints = [
				4:	some
				6:	variant(InstructionData::UnaryImm)
				7:	variant(Opcode::Iconst)
				9:	some
			]
			prio = 0
			result = 12
			impure = [12]
		}
	]
}
term {
	name = put_nonzero_in_reg_sext64
	bindings = [
		0: Value	argument(0)
		1: Reg	constructor(put_in_reg_sext64, [0], 1)
		2: Reg	constructor(trap_if_zero_divisor, [1], 2)
		3: Type	extractor(value_type, 0)
		4: Option(Inst)	extractor(def_inst, 0)
		5: Inst	match_some(4)
		6: InstructionData	extractor(inst_data, 5)
		7: Opcode	match_variant(6, InstructionData::UnaryImm, opcode)
		8: Imm64	match_variant(6, InstructionData::UnaryImm, imm)
		9: Option(u64)	extractor(nonzero_u64_from_imm64, 8)
		10: u64	match_some(9)
		11: ImmExtend	make_variant(ImmExtend::Sign, [])
		12: Reg	constructor(imm, [3, 11, 10], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1016
			constraints = [
			]
			prio = -1
			result = 2
			impure = [1, 2]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1021
			constraints = [
				4:	some
				6:	variant(InstructionData::UnaryImm)
				7:	variant(Opcode::Iconst)
				9:	some
			]
			prio = 0
			result = 12
			impure = [12]
		}
	]
}
term {
	name = cmp_and_choose
	bindings = [
		0: Type	argument(0)
		1: Option(Type)	extractor(fits_in_64, 0)
		2: Type	match_some(1)
		3: Cond	argument(1)
		4: bool	argument(2)
		5: Value	argument(3)
		6: Value	argument(4)
		7: Reg	constructor(put_in_reg, [5], 1)
		8: Reg	constructor(put_in_reg, [6], 2)
		9: OperandSize	constructor(operand_size, [2], 3)
		10: ProducesFlags	constructor(cmp, [9, 7, 8], 4)
		11: ConsumesFlags	constructor(csel, [3, 7, 8], 5)
		12: Reg	constructor(with_flags_reg, [10, 11], 6)
		13: ValueRegs	constructor(value_reg, [12], 7)
		14: Option(Type)	extractor(fits_in_16, 0)
		15: Type	match_some(14)
		16: u8	constructor(ty_bits, [15], 0)
		17: u8	const_int(32, u8)
		18: Reg	constructor(extend, [7, 4, 16, 17], 2)
		19: Reg	constructor(put_in_reg, [6], 3)
		20: Reg	constructor(extend, [19, 4, 16, 17], 4)
		21: OperandSize	constructor(operand_size, [15], 5)
		22: ProducesFlags	constructor(cmp, [21, 18, 20], 6)
		23: ConsumesFlags	constructor(csel, [3, 18, 20], 7)
		24: Reg	constructor(with_flags_reg, [22, 23], 8)
		25: ValueRegs	constructor(value_reg, [24], 9)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1060
			constraints = [
				1:	some
			]
			prio = 0
			result = 13
			impure = [7, 8, 9, 10, 11, 12, 13]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1068
			constraints = [
				14:	some
			]
			prio = 1
			result = 25
			impure = [7, 18, 19, 20, 21, 22, 23, 24, 25]
		}
	]
}
term {
	name = lower_shl128
	bindings = [
		0: ValueRegs	argument(0)
		1: Reg	argument(1)
		2: usize	const_int(0, usize)
		3: Reg	constructor(value_regs_get, [0, 2], 1)
		4: usize	const_int(1, usize)
		5: Reg	constructor(value_regs_get, [0, 4], 2)
		6: Type	const_prim(I64)
		7: Reg	constructor(lsl, [6, 3, 1], 3)
		8: Reg	constructor(lsl, [6, 5, 1], 4)
		9: Type	const_prim(I32)
		10: Reg	constructor(zero_reg, [], 5)
		11: Reg	constructor(orr_not, [9, 10, 1], 6)
		12: u8	const_int(1, u8)
		13: ImmShift	constructor(imm_shift_from_u8, [12], 7)
		14: Reg	constructor(lsr_imm, [6, 3, 13], 8)
		15: Reg	constructor(lsr, [6, 14, 11], 9)
		16: Reg	constructor(orr, [6, 8, 15], 10)
		17: u64	const_int(64, u64)
		18: ImmLogic	constructor(u64_into_imm_logic, [6, 17], 11)
		19: ProducesFlags	constructor(tst_imm, [6, 1, 18], 12)
		20: Cond	make_variant(Cond::Ne, [])
		21: Reg	constructor(zero_reg, [], 13)
		22: ConsumesFlags	constructor(csel, [20, 21, 7], 14)
		23: ConsumesFlags	constructor(csel, [20, 7, 16], 15)
		24: ConsumesFlags	constructor(consumes_flags_concat, [22, 23], 16)
		25: ValueRegs	constructor(with_flags, [19, 24], 17)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1320
			constraints = [
			]
			prio = 0
			result = 25
			impure = [3, 5, 7, 8, 10, 11, 13, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25]
		}
	]
}
term {
	name = do_shift
	bindings = [
		0: ALUOp	argument(0)
		1: Type	argument(1)
		2: Option(Type)	extractor(fits_in_16, 1)
		3: Type	match_some(2)
		4: Reg	argument(2)
		5: Value	argument(3)
		6: ValueRegs	constructor(put_in_regs, [5], 1)
		7: usize	const_int(0, usize)
		8: Reg	constructor(value_regs_get, [6, 7], 2)
		9: Type	const_prim(I32)
		10: ImmLogic	constructor(shift_mask, [3], 3)
		11: Reg	constructor(and_imm, [9, 8, 10], 4)
		12: Reg	constructor(alu_rrr, [0, 9, 4, 11], 5)
		13: Reg	constructor(alu_rrr, [0, 9, 4, 8], 3)
		14: Type	const_prim(I64)
		15: Reg	constructor(alu_rrr, [0, 14, 4, 8], 3)
		16: Option(Inst)	extractor(def_inst, 5)
		17: Inst	match_some(16)
		18: InstructionData	extractor(inst_data, 17)
		19: Opcode	match_variant(18, InstructionData::UnaryImm, opcode)
		20: Imm64	match_variant(18, InstructionData::UnaryImm, imm)
		21: Option(ImmShift)	constructor(imm_shift_from_imm64, [1, 20], 0)
		22: ImmShift	match_some(21)
		23: Reg	constructor(alu_rr_imm_shift, [0, 1, 4, 22], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1365
			constraints = [
				2:	some
			]
			prio = -1
			result = 12
			impure = [6, 8, 10, 11, 12]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1374
			constraints = [
				1:	const_prim(I32)
			]
			prio = 0
			result = 13
			impure = [6, 8, 13]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1375
			constraints = [
				1:	const_prim(I64)
			]
			prio = 0
			result = 15
			impure = [6, 8, 15]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1383
			constraints = [
				16:	some
				18:	variant(InstructionData::UnaryImm)
				19:	variant(Opcode::Iconst)
				21:	some
			]
			prio = 1
			result = 23
			impure = [23]
		}
	]
}
term {
	name = lower_ushr128
	bindings = [
		0: ValueRegs	argument(0)
		1: Reg	argument(1)
		2: usize	const_int(0, usize)
		3: Reg	constructor(value_regs_get, [0, 2], 1)
		4: usize	const_int(1, usize)
		5: Reg	constructor(value_regs_get, [0, 4], 2)
		6: Type	const_prim(I64)
		7: Reg	constructor(lsr, [6, 3, 1], 3)
		8: Reg	constructor(lsr, [6, 5, 1], 4)
		9: Type	const_prim(I32)
		10: Reg	constructor(zero_reg, [], 5)
		11: Reg	constructor(orr_not, [9, 10, 1], 6)
		12: u8	const_int(1, u8)
		13: ImmShift	constructor(imm_shift_from_u8, [12], 7)
		14: Reg	constructor(lsl_imm, [6, 5, 13], 8)
		15: Reg	constructor(lsl, [6, 14, 11], 9)
		16: Reg	constructor(orr, [6, 7, 15], 10)
		17: u64	const_int(64, u64)
		18: ImmLogic	constructor(u64_into_imm_logic, [6, 17], 11)
		19: ProducesFlags	constructor(tst_imm, [6, 1, 18], 12)
		20: Cond	make_variant(Cond::Ne, [])
		21: ConsumesFlags	constructor(csel, [20, 8, 16], 13)
		22: Reg	constructor(zero_reg, [], 14)
		23: ConsumesFlags	constructor(csel, [20, 22, 8], 15)
		24: ConsumesFlags	constructor(consumes_flags_concat, [21, 23], 16)
		25: ValueRegs	constructor(with_flags, [19, 24], 17)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1427
			constraints = [
			]
			prio = 0
			result = 25
			impure = [3, 5, 7, 8, 10, 11, 13, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25]
		}
	]
}
term {
	name = lower_sshr128
	bindings = [
		0: ValueRegs	argument(0)
		1: Reg	argument(1)
		2: usize	const_int(0, usize)
		3: Reg	constructor(value_regs_get, [0, 2], 1)
		4: usize	const_int(1, usize)
		5: Reg	constructor(value_regs_get, [0, 4], 2)
		6: Type	const_prim(I64)
		7: Reg	constructor(lsr, [6, 3, 1], 3)
		8: Reg	constructor(asr, [6, 5, 1], 4)
		9: Type	const_prim(I32)
		10: Reg	constructor(zero_reg, [], 5)
		11: Reg	constructor(orr_not, [9, 10, 1], 6)
		12: u8	const_int(1, u8)
		13: ImmShift	constructor(imm_shift_from_u8, [12], 7)
		14: Reg	constructor(lsl_imm, [6, 5, 13], 8)
		15: Reg	constructor(lsl, [6, 14, 11], 9)
		16: u8	const_int(63, u8)
		17: ImmShift	constructor(imm_shift_from_u8, [16], 10)
		18: Reg	constructor(asr_imm, [6, 5, 17], 11)
		19: Reg	constructor(orr, [6, 7, 15], 12)
		20: u64	const_int(64, u64)
		21: ImmLogic	constructor(u64_into_imm_logic, [6, 20], 13)
		22: ProducesFlags	constructor(tst_imm, [6, 1, 21], 14)
		23: Cond	make_variant(Cond::Ne, [])
		24: ConsumesFlags	constructor(csel, [23, 8, 19], 15)
		25: ConsumesFlags	constructor(csel, [23, 18, 8], 16)
		26: ConsumesFlags	constructor(consumes_flags_concat, [24, 25], 17)
		27: ValueRegs	constructor(with_flags, [22, 26], 18)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1486
			constraints = [
			]
			prio = 0
			result = 27
			impure = [3, 5, 7, 8, 10, 11, 13, 14, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27]
		}
	]
}
term {
	name = small_rotr
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: Reg	argument(2)
		3: Type	const_prim(I32)
		4: ImmLogic	constructor(rotr_mask, [0], 1)
		5: Reg	constructor(and_imm, [3, 2, 4], 2)
		6: u8	constructor(ty_bits, [0], 0)
		7: Imm12	constructor(u8_into_imm12, [6], 3)
		8: Reg	constructor(sub_imm, [3, 5, 7], 4)
		9: Reg	constructor(zero_reg, [], 5)
		10: Reg	constructor(sub, [3, 9, 8], 6)
		11: Reg	constructor(lsr, [3, 1, 5], 7)
		12: Reg	constructor(lsl, [3, 1, 10], 8)
		13: Reg	constructor(orr, [3, 12, 11], 9)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1605
			constraints = [
			]
			prio = 0
			result = 13
			impure = [4, 5, 7, 8, 9, 10, 11, 12, 13]
		}
	]
}
term {
	name = small_rotr_imm
	bindings = [
		0: Type	argument(0)
		1: Reg	argument(1)
		2: ImmShift	argument(2)
		3: Type	const_prim(I32)
		4: Reg	constructor(lsr_imm, [3, 1, 2], 1)
		5: ImmShift	constructor(rotr_opposite_amount, [0, 2], 2)
		6: Reg	constructor(lsl_imm, [3, 1, 5], 3)
		7: Reg	constructor(orr, [3, 6, 4], 4)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1626
			constraints = [
			]
			prio = 0
			result = 7
			impure = [4, 5, 6, 7]
		}
	]
}
term {
	name = lower_clz128
	bindings = [
		0: ValueRegs	argument(0)
		1: Type	const_prim(I64)
		2: usize	const_int(1, usize)
		3: Reg	constructor(value_regs_get, [0, 2], 1)
		4: Reg	constructor(a64_clz, [1, 3], 2)
		5: usize	const_int(0, usize)
		6: Reg	constructor(value_regs_get, [0, 5], 3)
		7: Reg	constructor(a64_clz, [1, 6], 4)
		8: u8	const_int(6, u8)
		9: ImmShift	constructor(imm_shift_from_u8, [8], 5)
		10: Reg	constructor(lsr_imm, [1, 4, 9], 6)
		11: Reg	constructor(madd, [1, 7, 10, 4], 7)
		12: ImmExtend	make_variant(ImmExtend::Zero, [])
		13: u64	const_int(0, u64)
		14: Reg	constructor(imm, [1, 12, 13], 8)
		15: ValueRegs	constructor(value_regs, [11, 14], 9)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 1691
			constraints = [
			]
			prio = 0
			result = 15
			impure = [3, 4, 6, 7, 9, 10, 11, 14, 15]
		}
	]
}
term {
	name = put_in_reg_ext32
	bindings = [
		0: Value	argument(0)
		1: ArgumentExtension	argument(1)
		2: Reg	constructor(put_in_reg_sext32, [0], 1)
		3: Reg	constructor(put_in_reg_zext32, [0], 1)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2610
			constraints = [
				1:	variant(ArgumentExtension::Sext)
			]
			prio = 0
			result = 2
			impure = [2]
		}
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2612
			constraints = [
				1:	variant(ArgumentExtension::Uext)
			]
			prio = 0
			result = 3
			impure = [3]
		}
	]
}
term {
	name = overflow_op_small
	bindings = [
		0: Type	argument(0)
		1: Value	argument(1)
		2: Value	argument(2)
		3: ArgumentExtension	argument(3)
		4: ALUOp	argument(4)
		5: ExtendOp	constructor(lower_extend_op, [0, 3], 1)
		6: Reg	constructor(put_in_reg_ext32, [1, 3], 2)
		7: Reg	constructor(put_in_reg, [2], 3)
		8: Reg	constructor(alu_rrr_extend, [4, 0, 6, 7, 5], 4)
		9: OperandSize	make_variant(OperandSize::Size32, [])
		10: ProducesFlags	constructor(cmp_extend, [9, 8, 8, 5], 5)
		11: Cond	make_variant(Cond::Ne, [])
		12: ConsumesFlags	constructor(cset, [11], 6)
		13: Reg	constructor(with_flags_reg, [10, 12], 7)
		14: ValueRegs	constructor(value_reg, [8], 8)
		15: ValueRegs	constructor(value_reg, [13], 9)
		16: InstOutput	constructor(output_pair, [14, 15], 10)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2618
			constraints = [
			]
			prio = 0
			result = 16
			impure = [5, 6, 7, 8, 10, 12, 13, 14, 15, 16]
		}
	]
}
term {
	name = overflow_op_normal
	bindings = [
		0: Type	argument(0)
		1: Value	argument(1)
		2: Value	argument(2)
		3: ALUOp	argument(3)
		4: Cond	argument(4)
		5: Reg	constructor(put_in_reg, [1], 1)
		6: Reg	constructor(put_in_reg, [2], 2)
		7: ProducesFlags	constructor(alu_rrr_with_flags_paired, [0, 5, 6, 3], 3)
		8: ConsumesFlags	constructor(cset_paired, [4], 4)
		9: ValueRegs	constructor(with_flags, [7, 8], 5)
		10: usize	const_int(0, usize)
		11: Reg	constructor(value_regs_get, [9, 10], 6)
		12: ValueRegs	constructor(value_reg, [11], 7)
		13: usize	const_int(1, usize)
		14: Reg	constructor(value_regs_get, [9, 13], 8)
		15: ValueRegs	constructor(value_reg, [14], 9)
		16: InstOutput	constructor(output_pair, [12, 15], 10)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2647
			constraints = [
			]
			prio = 0
			result = 16
			impure = [5, 6, 7, 8, 9, 11, 12, 14, 15, 16]
		}
	]
}
term {
	name = overflow_op_128
	bindings = [
		0: Value	argument(0)
		1: Value	argument(1)
		2: ALUOp	argument(2)
		3: ALUOp	argument(3)
		4: Cond	argument(4)
		5: ValueRegs	constructor(put_in_regs, [0], 1)
		6: usize	const_int(0, usize)
		7: Reg	constructor(value_regs_get, [5, 6], 2)
		8: usize	const_int(1, usize)
		9: Reg	constructor(value_regs_get, [5, 8], 3)
		10: ValueRegs	constructor(put_in_regs, [1], 4)
		11: Reg	constructor(value_regs_get, [10, 6], 5)
		12: Reg	constructor(value_regs_get, [10, 8], 6)
		13: Type	const_prim(I64)
		14: ProducesFlags	constructor(alu_rrr_with_flags_paired, [13, 7, 11, 2], 7)
		15: ConsumesAndProducesFlags	constructor(alu_rrr_with_flags_chained, [13, 9, 12, 3], 8)
		16: ConsumesFlags	constructor(cset_paired, [4], 9)
		17: MultiReg	constructor(with_flags_chained, [14, 15, 16], 10)
		18: InstOutput	constructor(multi_reg_to_pair_and_single, [17], 11)
	]
	rules = [
		{
			pos = ../../codegen/src/isa/aarch64/lower.isle line 2658
			constraints = [
			]
			prio = 0
			result = 18
			impure = [5, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18]
		}
	]
}
