struct Case {
    in_bits: u8,
    signed: bool,
    out_bits: u8,
    bits: u64,
}

impl Case {
    fn from_f32(signed: bool, out_bits: u8, x: f32) -> Self {
        Self {
            in_bits: 32,
            signed,
            out_bits,
            bits: x.to_bits() as u64,
        }
    }

    fn from_f64(signed: bool, out_bits: u8, x: f64) -> Self {
        Self {
            in_bits: 64,
            signed,
            out_bits,
            bits: x.to_bits(),
        }
    }

    fn cond(&self) -> String {
        format!(
            "(and (= in #x{:02x}) (= signed {}) (= out #x{:02x}))",
            self.in_bits, self.signed, self.out_bits,
        )
    }
}

fn print_spec(name: &str, cases: Vec<Case>) {
    println!("(spec ({name} signed in out)");

    println!("\t(provide");
    for case in &cases {
        println!("\t\t(=> {} (= result #x{:016x}))", case.cond(), case.bits);
    }
    println!("\t)");

    println!("\t(require (or");
    for case in &cases {
        println!("\t\t{}", case.cond());
    }
    println!("\t))");

    println!(")");
}

fn min_fp_value() {
    print_spec(
        "min_fp_value",
        vec![
            // f32 signed
            Case::from_f32(true, 8, i8::MIN as f32 - 1.),
            Case::from_f32(true, 16, i16::MIN as f32 - 1.),
            Case::from_f32(true, 32, i32::MIN as f32),
            Case::from_f32(true, 64, i64::MIN as f32),
            // f32 unsigned
            Case::from_f32(false, 8, -1.0),
            Case::from_f32(false, 16, -1.0),
            Case::from_f32(false, 32, -1.0),
            Case::from_f32(false, 64, -1.0),
            // f64 signed
            Case::from_f64(true, 8, i8::MIN as f64 - 1.),
            Case::from_f64(true, 16, i16::MIN as f64 - 1.),
            Case::from_f64(true, 32, i32::MIN as f64 - 1.),
            Case::from_f64(true, 64, i64::MIN as f64),
            // f64 unsigned
            Case::from_f64(false, 8, -1.0),
            Case::from_f64(false, 16, -1.0),
            Case::from_f64(false, 32, -1.0),
            Case::from_f64(false, 64, -1.0),
        ],
    );
}

fn max_fp_value() {
    print_spec(
        "max_fp_value",
        vec![
            // f32 signed
            Case::from_f32(true, 8, i8::MAX as f32 + 1.),
            Case::from_f32(true, 16, i16::MAX as f32 + 1.),
            Case::from_f32(true, 32, (i32::MAX as u64 + 1) as f32),
            Case::from_f32(true, 64, (i64::MAX as u64 + 1) as f32),
            // f32 unsigned
            Case::from_f32(false, 8, u8::MAX as f32 + 1.),
            Case::from_f32(false, 16, u16::MAX as f32 + 1.),
            Case::from_f32(false, 32, (u32::MAX as u64 + 1) as f32),
            Case::from_f32(false, 64, (u64::MAX as u128 + 1) as f32),
            // f64 signed
            Case::from_f64(true, 8, i8::MAX as f64 + 1.),
            Case::from_f64(true, 16, i16::MAX as f64 + 1.),
            Case::from_f64(true, 32, i32::MAX as f64 + 1.),
            Case::from_f64(true, 64, (i64::MAX as u64 + 1) as f64),
            // f64 unsigned
            Case::from_f64(false, 8, u8::MAX as f64 + 1.),
            Case::from_f64(false, 16, u16::MAX as f64 + 1.),
            Case::from_f64(false, 32, u32::MAX as f64 + 1.),
            Case::from_f64(false, 64, (u64::MAX as u128 + 1) as f64),
        ],
    );
}

fn generate() {
    println!(";; GENERATED BY `fpconst`. DO NOT EDIT!!!");

    println!();
    min_fp_value();

    println!();
    max_fp_value();
}

pub fn main() {
    generate();
}
