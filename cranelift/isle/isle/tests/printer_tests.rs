//! Auto-generated ISLE printer tests.

use cranelift_isle::files::Files;
use cranelift_isle::lexer;
use cranelift_isle::parser;
use cranelift_isle::printer;
use std::io::BufWriter;
use std::iter::zip;
use std::sync::Arc;

pub fn run_print(isle_filename: &str) {
    // Parse.
    let original_src = std::fs::read_to_string(isle_filename).unwrap();
    let lexer = lexer::Lexer::new(0, &original_src).unwrap();
    let files = Arc::new(Files::from_names_and_contents(vec![(
        isle_filename.to_string(),
        original_src.clone(),
    )]));
    let original = parser::parse_without_pos(lexer, files).unwrap();

    // Print.
    let mut buf = BufWriter::new(Vec::new());
    printer::print(&original, 78, &mut buf).unwrap();
    let bytes = buf.into_inner().unwrap();
    let printed_src = String::from_utf8(bytes).unwrap();

    // Round trip.
    let lexer = lexer::Lexer::new(0, &printed_src).unwrap();
    let files = Arc::new(Files::from_names_and_contents(vec![(
        isle_filename.to_string(),
        printed_src.clone(),
    )]));
    let round_trip = parser::parse_without_pos(lexer, files).unwrap();

    // Ensure equal.
    assert_eq!(original.len(), round_trip.len());
    for (orig, rt) in zip(original, round_trip) {
        assert_eq!(orig, rt);
    }
}

// Generated by build.rs.
include!(concat!(env!("OUT_DIR"), "/isle_printer_tests.rs"));
